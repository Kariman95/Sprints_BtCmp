
EEPROM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b2  00800060  000024ec  00002580  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800112  00800112  00002632  2**0
                  ALLOC
  3 .stab         0000213c  00000000  00000000  00002634  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014fc  00000000  00000000  00004770  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005dac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007b65  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009800  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009960  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009bed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a3bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ee       	ldi	r30, 0xEC	; 236
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 31       	cpi	r26, 0x12	; 18
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e1       	ldi	r26, 0x12	; 18
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 31       	cpi	r26, 0x13	; 19
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 05 12 	call	0x240a	; 0x240a <main>
      8a:	0c 94 74 12 	jmp	0x24e8	; 0x24e8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0e 12 	jmp	0x241c	; 0x241c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac eb       	ldi	r26, 0xBC	; 188
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 2a 12 	jmp	0x2454	; 0x2454 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 1a 12 	jmp	0x2434	; 0x2434 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 36 12 	jmp	0x246c	; 0x246c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 1a 12 	jmp	0x2434	; 0x2434 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 36 12 	jmp	0x246c	; 0x246c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0e 12 	jmp	0x241c	; 0x241c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c eb       	ldi	r24, 0xBC	; 188
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 2a 12 	jmp	0x2454	; 0x2454 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1a 12 	jmp	0x2434	; 0x2434 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 36 12 	jmp	0x246c	; 0x246c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 1a 12 	jmp	0x2434	; 0x2434 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 36 12 	jmp	0x246c	; 0x246c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 1a 12 	jmp	0x2434	; 0x2434 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 36 12 	jmp	0x246c	; 0x246c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 1e 12 	jmp	0x243c	; 0x243c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 3a 12 	jmp	0x2474	; 0x2474 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_Init>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to initialize the UART protocol
*************************************************************************************************/
enuErrorStatus_t UART_Init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
//    UBRRH_R = (BAUDRATE>>8);                      // shift the register right by 8 bits
//    UBRRL_R = BAUDRATE;                           // set baud


	//uart double speed node
	SET_BIT(UCSRA_R, U2X_B);
     b4e:	ab e2       	ldi	r26, 0x2B	; 43
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	eb e2       	ldi	r30, 0x2B	; 43
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	82 60       	ori	r24, 0x02	; 2
     b5a:	8c 93       	st	X, r24
	// UART receiver enable
	SET_BIT(UCSRB_R, RXEN_B);
     b5c:	aa e2       	ldi	r26, 0x2A	; 42
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	ea e2       	ldi	r30, 0x2A	; 42
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 61       	ori	r24, 0x10	; 16
     b68:	8c 93       	st	X, r24

	//UART Transmit enable
	SET_BIT(UCSRB_R, TXEN_B);
     b6a:	aa e2       	ldi	r26, 0x2A	; 42
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	ea e2       	ldi	r30, 0x2A	; 42
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	88 60       	ori	r24, 0x08	; 8
     b76:	8c 93       	st	X, r24

	//UART Asynchronous
	CLR_BIT(UCSRC_R, UMSEL_B);
     b78:	a0 e4       	ldi	r26, 0x40	; 64
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e0 e4       	ldi	r30, 0x40	; 64
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	8f 7b       	andi	r24, 0xBF	; 191
     b84:	8c 93       	st	X, r24

	//parity disable
	CLR_BIT(UCSRC_R, UPM1_B);
     b86:	a0 e4       	ldi	r26, 0x40	; 64
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e0 e4       	ldi	r30, 0x40	; 64
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	8f 7d       	andi	r24, 0xDF	; 223
     b92:	8c 93       	st	X, r24
	CLR_BIT(UCSRC_R, UPM0_B);
     b94:	a0 e4       	ldi	r26, 0x40	; 64
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e0 e4       	ldi	r30, 0x40	; 64
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	8f 7e       	andi	r24, 0xEF	; 239
     ba0:	8c 93       	st	X, r24

	//STOP bit selection 1 stop bit selected here
	CLR_BIT(UCSRC_R, USBS_B);
     ba2:	a0 e4       	ldi	r26, 0x40	; 64
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e0 e4       	ldi	r30, 0x40	; 64
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	87 7f       	andi	r24, 0xF7	; 247
     bae:	8c 93       	st	X, r24

	// Character size selection (8 bit data selected here)
	SET_BIT(UCSRC_R, UCSZ0_B);
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e0 e4       	ldi	r30, 0x40	; 64
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	82 60       	ori	r24, 0x02	; 2
     bbc:	8c 93       	st	X, r24
	SET_BIT(UCSRC_R, UCSZ1_B);
     bbe:	a0 e4       	ldi	r26, 0x40	; 64
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e0 e4       	ldi	r30, 0x40	; 64
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	84 60       	ori	r24, 0x04	; 4
     bca:	8c 93       	st	X, r24
	SET_BIT(UCSRB_R, UCSZ2_B);
     bcc:	aa e2       	ldi	r26, 0x2A	; 42
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	ea e2       	ldi	r30, 0x2A	; 42
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	84 60       	ori	r24, 0x04	; 4
     bd8:	8c 93       	st	X, r24

	//Set baud rate

	// Baud rate= 9600 .. F_cpu 8MHz
	UBRRH_R=0;
     bda:	e0 e4       	ldi	r30, 0x40	; 64
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	10 82       	st	Z, r1
	UBRRL_R=103;
     be0:	e9 e2       	ldi	r30, 0x29	; 41
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	87 e6       	ldi	r24, 0x67	; 103
     be6:	80 83       	st	Z, r24

	genuUARTInitStatus = E_OK;
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	80 93 12 01 	sts	0x0112, r24
	//Set baud rate
//	uint16_t UBRRVAL=(F_CPU/(u16_Baudrate*16UL))-1;
//	UBRRL_R=UBRRVAL; 			//low byte
//	UBRRH_R=(UBRRVAL>>8); 	//high byte

	return genuUARTInitStatus;
     bee:	80 91 12 01 	lds	r24, 0x0112
}//end UART_Init
     bf2:	cf 91       	pop	r28
     bf4:	df 91       	pop	r29
     bf6:	08 95       	ret

00000bf8 <UART_SendData>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to send data via UART
*************************************************************************************************/
enuErrorStatus_t UART_SendData(uint8_t u8Data)
{
     bf8:	df 93       	push	r29
     bfa:	cf 93       	push	r28
     bfc:	00 d0       	rcall	.+0      	; 0xbfe <UART_SendData+0x6>
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
     c02:	89 83       	std	Y+1, r24	; 0x01
	if(genuUARTInitStatus == E_ERROR)
     c04:	80 91 12 01 	lds	r24, 0x0112
     c08:	88 23       	and	r24, r24
     c0a:	11 f4       	brne	.+4      	; 0xc10 <UART_SendData+0x18>
	{
		//if uart is not initialized
		return E_ERROR;
     c0c:	1a 82       	std	Y+2, r1	; 0x02
     c0e:	0f c0       	rjmp	.+30     	; 0xc2e <UART_SendData+0x36>
	}//end if

	/* Wait for empty transmit buffer */
	while (!(GET_BIT(UCSRA_R, UDRE_B)));
     c10:	eb e2       	ldi	r30, 0x2B	; 43
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	88 2f       	mov	r24, r24
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	80 72       	andi	r24, 0x20	; 32
     c1c:	90 70       	andi	r25, 0x00	; 0
     c1e:	00 97       	sbiw	r24, 0x00	; 0
     c20:	b9 f3       	breq	.-18     	; 0xc10 <UART_SendData+0x18>

	/* Put data into buffer, sends the data */
	UDR_R = u8Data;
     c22:	ec e2       	ldi	r30, 0x2C	; 44
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	89 81       	ldd	r24, Y+1	; 0x01
     c28:	80 83       	st	Z, r24

	return E_OK;
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	8a 83       	std	Y+2, r24	; 0x02
     c2e:	8a 81       	ldd	r24, Y+2	; 0x02
}//end UART_SendData
     c30:	0f 90       	pop	r0
     c32:	0f 90       	pop	r0
     c34:	cf 91       	pop	r28
     c36:	df 91       	pop	r29
     c38:	08 95       	ret

00000c3a <UART_ReceiveData>:
* Parameters (out): pu16Data
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to receive data via UART
*************************************************************************************************/
enuErrorStatus_t UART_ReceiveData(uint8_t* pu8Data)
{
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	00 d0       	rcall	.+0      	; 0xc40 <UART_ReceiveData+0x6>
     c40:	0f 92       	push	r0
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
     c46:	9a 83       	std	Y+2, r25	; 0x02
     c48:	89 83       	std	Y+1, r24	; 0x01
	if(genuUARTInitStatus == E_ERROR)
     c4a:	80 91 12 01 	lds	r24, 0x0112
     c4e:	88 23       	and	r24, r24
     c50:	11 f4       	brne	.+4      	; 0xc56 <UART_ReceiveData+0x1c>
	{
		//if uart is not initialized
		return E_ERROR;
     c52:	1b 82       	std	Y+3, r1	; 0x03
     c54:	0d c0       	rjmp	.+26     	; 0xc70 <UART_ReceiveData+0x36>
	}//end if

	/* Wait for data to be received */
	while(!(GET_BIT(UCSRA_R, RXC_B)));
     c56:	eb e2       	ldi	r30, 0x2B	; 43
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	88 23       	and	r24, r24
     c5e:	dc f7       	brge	.-10     	; 0xc56 <UART_ReceiveData+0x1c>

	/* Get and return received data from buffer */
	*pu8Data = UDR_R;
     c60:	ec e2       	ldi	r30, 0x2C	; 44
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	80 81       	ld	r24, Z
     c66:	e9 81       	ldd	r30, Y+1	; 0x01
     c68:	fa 81       	ldd	r31, Y+2	; 0x02
     c6a:	80 83       	st	Z, r24

	return E_OK;
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	8b 83       	std	Y+3, r24	; 0x03
     c70:	8b 81       	ldd	r24, Y+3	; 0x03
}//end UART_ReceiveData
     c72:	0f 90       	pop	r0
     c74:	0f 90       	pop	r0
     c76:	0f 90       	pop	r0
     c78:	cf 91       	pop	r28
     c7a:	df 91       	pop	r29
     c7c:	08 95       	ret

00000c7e <UART_RecieveDataNoBLOCK>:
* Parameters (out): pu16Data
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to receive data via UART
*************************************************************************************************/
enuErrorStatus_t UART_RecieveDataNoBLOCK(uint8_t* pu8Data)
{
     c7e:	df 93       	push	r29
     c80:	cf 93       	push	r28
     c82:	00 d0       	rcall	.+0      	; 0xc84 <UART_RecieveDataNoBLOCK+0x6>
     c84:	00 d0       	rcall	.+0      	; 0xc86 <UART_RecieveDataNoBLOCK+0x8>
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	9b 83       	std	Y+3, r25	; 0x03
     c8c:	8a 83       	std	Y+2, r24	; 0x02
	if(genuUARTInitStatus == E_ERROR)
     c8e:	80 91 12 01 	lds	r24, 0x0112
     c92:	88 23       	and	r24, r24
     c94:	11 f4       	brne	.+4      	; 0xc9a <UART_RecieveDataNoBLOCK+0x1c>
	{
		//if uart is not initialized
		return E_ERROR;
     c96:	1c 82       	std	Y+4, r1	; 0x04
     c98:	10 c0       	rjmp	.+32     	; 0xcba <UART_RecieveDataNoBLOCK+0x3c>
	}//end if

	enuErrorStatus_t enuStatus = E_ERROR;
     c9a:	19 82       	std	Y+1, r1	; 0x01

    if (GET_BIT(UCSRA_R, RXC_B))
     c9c:	eb e2       	ldi	r30, 0x2B	; 43
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	88 23       	and	r24, r24
     ca4:	44 f4       	brge	.+16     	; 0xcb6 <UART_RecieveDataNoBLOCK+0x38>
    {
        *pu8Data = UDR_R;
     ca6:	ec e2       	ldi	r30, 0x2C	; 44
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	ea 81       	ldd	r30, Y+2	; 0x02
     cae:	fb 81       	ldd	r31, Y+3	; 0x03
     cb0:	80 83       	st	Z, r24
        enuStatus = E_OK;
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	89 83       	std	Y+1, r24	; 0x01
    }
    else
    {
        /* do nothing */
    }
    return enuStatus;
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	8c 83       	std	Y+4, r24	; 0x04
     cba:	8c 81       	ldd	r24, Y+4	; 0x04

	return E_OK;
}//end UART_RecieveDataNoBLOCKING
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	cf 91       	pop	r28
     cc6:	df 91       	pop	r29
     cc8:	08 95       	ret

00000cca <UART_SendDataNoBLOCK>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to send data via UART without blocking the system
*************************************************************************************************/
enuErrorStatus_t UART_SendDataNoBLOCK(uint8_t u8Data)
{
     cca:	df 93       	push	r29
     ccc:	cf 93       	push	r28
     cce:	00 d0       	rcall	.+0      	; 0xcd0 <UART_SendDataNoBLOCK+0x6>
     cd0:	0f 92       	push	r0
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
     cd6:	8a 83       	std	Y+2, r24	; 0x02
	if(genuUARTInitStatus == E_ERROR)
     cd8:	80 91 12 01 	lds	r24, 0x0112
     cdc:	88 23       	and	r24, r24
     cde:	11 f4       	brne	.+4      	; 0xce4 <UART_SendDataNoBLOCK+0x1a>
	{
		//if uart is not initialized
		return E_ERROR;
     ce0:	1b 82       	std	Y+3, r1	; 0x03
     ce2:	12 c0       	rjmp	.+36     	; 0xd08 <UART_SendDataNoBLOCK+0x3e>
	}//end if

	enuErrorStatus_t enuStatus = E_ERROR;
     ce4:	19 82       	std	Y+1, r1	; 0x01

    if (GET_BIT(UCSRA_R, UDRE_B))
     ce6:	eb e2       	ldi	r30, 0x2B	; 43
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	88 2f       	mov	r24, r24
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	80 72       	andi	r24, 0x20	; 32
     cf2:	90 70       	andi	r25, 0x00	; 0
     cf4:	00 97       	sbiw	r24, 0x00	; 0
     cf6:	31 f0       	breq	.+12     	; 0xd04 <UART_SendDataNoBLOCK+0x3a>
    {
        UDR_R = u8Data;
     cf8:	ec e2       	ldi	r30, 0x2C	; 44
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	8a 81       	ldd	r24, Y+2	; 0x02
     cfe:	80 83       	st	Z, r24
        enuStatus = E_OK;
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	89 83       	std	Y+1, r24	; 0x01
    }
    else
    {
        /* do nothing */
    }
    return enuStatus;
     d04:	89 81       	ldd	r24, Y+1	; 0x01
     d06:	8b 83       	std	Y+3, r24	; 0x03
     d08:	8b 81       	ldd	r24, Y+3	; 0x03

	return E_OK;
}//end UART_RecieveDataNoBLOCKING
     d0a:	0f 90       	pop	r0
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	cf 91       	pop	r28
     d12:	df 91       	pop	r29
     d14:	08 95       	ret

00000d16 <UART_SendString>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to send string via UART
*************************************************************************************************/
enuErrorStatus_t UART_SendString(uint8_t* pu8String)
{
     d16:	df 93       	push	r29
     d18:	cf 93       	push	r28
     d1a:	00 d0       	rcall	.+0      	; 0xd1c <UART_SendString+0x6>
     d1c:	00 d0       	rcall	.+0      	; 0xd1e <UART_SendString+0x8>
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
     d22:	9b 83       	std	Y+3, r25	; 0x03
     d24:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8i=0;
     d26:	19 82       	std	Y+1, r1	; 0x01

	if(genuUARTInitStatus == E_ERROR || pu8String == NULL_PTR)
     d28:	80 91 12 01 	lds	r24, 0x0112
     d2c:	88 23       	and	r24, r24
     d2e:	21 f0       	breq	.+8      	; 0xd38 <UART_SendString+0x22>
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	9b 81       	ldd	r25, Y+3	; 0x03
     d34:	00 97       	sbiw	r24, 0x00	; 0
     d36:	11 f4       	brne	.+4      	; 0xd3c <UART_SendString+0x26>
	{
		//if uart is not initialized
		return E_ERROR;
     d38:	1c 82       	std	Y+4, r1	; 0x04
     d3a:	26 c0       	rjmp	.+76     	; 0xd88 <UART_SendString+0x72>
	}//end if

	for(u8i=0; u8i<MAXSIZE; u8i++)
     d3c:	19 82       	std	Y+1, r1	; 0x01
     d3e:	19 c0       	rjmp	.+50     	; 0xd72 <UART_SendString+0x5c>
	{
		UART_SendData(pu8String[u8i]);
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	8a 81       	ldd	r24, Y+2	; 0x02
     d48:	9b 81       	ldd	r25, Y+3	; 0x03
     d4a:	fc 01       	movw	r30, r24
     d4c:	e2 0f       	add	r30, r18
     d4e:	f3 1f       	adc	r31, r19
     d50:	80 81       	ld	r24, Z
     d52:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <UART_SendData>
		if(pu8String[u8i] =='\0')
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	28 2f       	mov	r18, r24
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	8a 81       	ldd	r24, Y+2	; 0x02
     d5e:	9b 81       	ldd	r25, Y+3	; 0x03
     d60:	fc 01       	movw	r30, r24
     d62:	e2 0f       	add	r30, r18
     d64:	f3 1f       	adc	r31, r19
     d66:	80 81       	ld	r24, Z
     d68:	88 23       	and	r24, r24
     d6a:	31 f0       	breq	.+12     	; 0xd78 <UART_SendString+0x62>
	{
		//if uart is not initialized
		return E_ERROR;
	}//end if

	for(u8i=0; u8i<MAXSIZE; u8i++)
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	8f 5f       	subi	r24, 0xFF	; 255
     d70:	89 83       	std	Y+1, r24	; 0x01
     d72:	89 81       	ldd	r24, Y+1	; 0x01
     d74:	8f 3f       	cpi	r24, 0xFF	; 255
     d76:	21 f7       	brne	.-56     	; 0xd40 <UART_SendString+0x2a>
		if(pu8String[u8i] =='\0')
		{
			break;
		}
	}
	UART_SendData('\r');
     d78:	8d e0       	ldi	r24, 0x0D	; 13
     d7a:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <UART_SendData>
	UART_SendData('\n');
     d7e:	8a e0       	ldi	r24, 0x0A	; 10
     d80:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <UART_SendData>

	return E_OK;
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	8c 83       	std	Y+4, r24	; 0x04
     d88:	8c 81       	ldd	r24, Y+4	; 0x04
}//end UART_SendString
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
     d90:	0f 90       	pop	r0
     d92:	cf 91       	pop	r28
     d94:	df 91       	pop	r29
     d96:	08 95       	ret

00000d98 <UART_ReceiveString>:
* Parameters (out): pu8String
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to receive string via UART
*************************************************************************************************/
enuErrorStatus_t UART_ReceiveString(uint8_t* pu8String)
{
     d98:	df 93       	push	r29
     d9a:	cf 93       	push	r28
     d9c:	00 d0       	rcall	.+0      	; 0xd9e <UART_ReceiveString+0x6>
     d9e:	00 d0       	rcall	.+0      	; 0xda0 <UART_ReceiveString+0x8>
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
     da4:	9b 83       	std	Y+3, r25	; 0x03
     da6:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8i=0;
     da8:	19 82       	std	Y+1, r1	; 0x01

	if(genuUARTInitStatus == E_ERROR)
     daa:	80 91 12 01 	lds	r24, 0x0112
     dae:	88 23       	and	r24, r24
     db0:	11 f4       	brne	.+4      	; 0xdb6 <UART_ReceiveString+0x1e>
	{
		//if uart is not initialized
		return E_ERROR;
     db2:	1c 82       	std	Y+4, r1	; 0x04
     db4:	32 c0       	rjmp	.+100    	; 0xe1a <UART_ReceiveString+0x82>
	}//end if

	for(u8i=0; u8i<MAXSIZE; u8i++)
     db6:	19 82       	std	Y+1, r1	; 0x01
     db8:	22 c0       	rjmp	.+68     	; 0xdfe <UART_ReceiveString+0x66>
	{
		UART_ReceiveData(&pu8String[u8i]);
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	8a 81       	ldd	r24, Y+2	; 0x02
     dc2:	9b 81       	ldd	r25, Y+3	; 0x03
     dc4:	82 0f       	add	r24, r18
     dc6:	93 1f       	adc	r25, r19
     dc8:	0e 94 1d 06 	call	0xc3a	; 0xc3a <UART_ReceiveData>
		if(pu8String[u8i] =='\r' || pu8String[u8i] =='\n')
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	28 2f       	mov	r18, r24
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	8a 81       	ldd	r24, Y+2	; 0x02
     dd4:	9b 81       	ldd	r25, Y+3	; 0x03
     dd6:	fc 01       	movw	r30, r24
     dd8:	e2 0f       	add	r30, r18
     dda:	f3 1f       	adc	r31, r19
     ddc:	80 81       	ld	r24, Z
     dde:	8d 30       	cpi	r24, 0x0D	; 13
     de0:	89 f0       	breq	.+34     	; 0xe04 <UART_ReceiveString+0x6c>
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	8a 81       	ldd	r24, Y+2	; 0x02
     dea:	9b 81       	ldd	r25, Y+3	; 0x03
     dec:	fc 01       	movw	r30, r24
     dee:	e2 0f       	add	r30, r18
     df0:	f3 1f       	adc	r31, r19
     df2:	80 81       	ld	r24, Z
     df4:	8a 30       	cpi	r24, 0x0A	; 10
     df6:	31 f0       	breq	.+12     	; 0xe04 <UART_ReceiveString+0x6c>
	{
		//if uart is not initialized
		return E_ERROR;
	}//end if

	for(u8i=0; u8i<MAXSIZE; u8i++)
     df8:	89 81       	ldd	r24, Y+1	; 0x01
     dfa:	8f 5f       	subi	r24, 0xFF	; 255
     dfc:	89 83       	std	Y+1, r24	; 0x01
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	8f 3f       	cpi	r24, 0xFF	; 255
     e02:	d9 f6       	brne	.-74     	; 0xdba <UART_ReceiveString+0x22>
		if(pu8String[u8i] =='\r' || pu8String[u8i] =='\n')
		{
			break;
		}
	}
	pu8String[u8i]='\0';
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	28 2f       	mov	r18, r24
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	8a 81       	ldd	r24, Y+2	; 0x02
     e0c:	9b 81       	ldd	r25, Y+3	; 0x03
     e0e:	fc 01       	movw	r30, r24
     e10:	e2 0f       	add	r30, r18
     e12:	f3 1f       	adc	r31, r19
     e14:	10 82       	st	Z, r1
	return E_OK;
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	8c 83       	std	Y+4, r24	; 0x04
     e1a:	8c 81       	ldd	r24, Y+4	; 0x04
}//end UART_ReceiveString
     e1c:	0f 90       	pop	r0
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	08 95       	ret

00000e2a <Test_UART_Init>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to test UART initialization
*************************************************************************************************/
enuErrorStatus_t Test_UART_Init(void)
{
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
	return genuUARTInitStatus;
     e32:	80 91 12 01 	lds	r24, 0x0112
}//end Test_UART_Init
     e36:	cf 91       	pop	r28
     e38:	df 91       	pop	r29
     e3a:	08 95       	ret

00000e3c <Test_UART_SendData>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to test sending data via UART
*************************************************************************************************/
enuErrorStatus_t Test_UART_SendData(void)
{
     e3c:	df 93       	push	r29
     e3e:	cf 93       	push	r28
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
	return UART_SendData('k');
     e44:	8b e6       	ldi	r24, 0x6B	; 107
     e46:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <UART_SendData>
}//end Test_UART_Init
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <Test_UART_SendString>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to test sending string via UART
*************************************************************************************************/
enuErrorStatus_t Test_UART_SendString(void)
{
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
	return UART_SendString((uint8_t*)"Hello");
     e58:	80 e6       	ldi	r24, 0x60	; 96
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	0e 94 8b 06 	call	0xd16	; 0xd16 <UART_SendString>
}//end Test_UART_Init
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <Test_UART_ReceiveData>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to test receiving data via UART
*************************************************************************************************/
enuErrorStatus_t Test_UART_ReceiveData(void)
{
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	0f 92       	push	r0
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
	uint8_t pu8_Data;
	return UART_ReceiveData(&pu8_Data);
     e70:	ce 01       	movw	r24, r28
     e72:	01 96       	adiw	r24, 0x01	; 1
     e74:	0e 94 1d 06 	call	0xc3a	; 0xc3a <UART_ReceiveData>
}//end Test_UART_Init
     e78:	0f 90       	pop	r0
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	08 95       	ret

00000e80 <Test_UART_ReceiveString>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to test receiving string via UART
*************************************************************************************************/
enuErrorStatus_t Test_UART_ReceiveString(void)
{
     e80:	df 93       	push	r29
     e82:	cf 93       	push	r28
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
     e88:	c4 56       	subi	r28, 0x64	; 100
     e8a:	d0 40       	sbci	r29, 0x00	; 0
     e8c:	0f b6       	in	r0, 0x3f	; 63
     e8e:	f8 94       	cli
     e90:	de bf       	out	0x3e, r29	; 62
     e92:	0f be       	out	0x3f, r0	; 63
     e94:	cd bf       	out	0x3d, r28	; 61
	uint8_t u8String[100];
	return UART_ReceiveString(u8String);
     e96:	ce 01       	movw	r24, r28
     e98:	01 96       	adiw	r24, 0x01	; 1
     e9a:	0e 94 cc 06 	call	0xd98	; 0xd98 <UART_ReceiveString>
}//end Test_UART_Init
     e9e:	cc 59       	subi	r28, 0x9C	; 156
     ea0:	df 4f       	sbci	r29, 0xFF	; 255
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	f8 94       	cli
     ea6:	de bf       	out	0x3e, r29	; 62
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	cd bf       	out	0x3d, r28	; 61
     eac:	cf 91       	pop	r28
     eae:	df 91       	pop	r29
     eb0:	08 95       	ret

00000eb2 <TWI_initMatser>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to initialize the TWI matser
*************************************************************************************************/
enuErrorStatus_t TWI_initMatser(void)
{
     eb2:	df 93       	push	r29
     eb4:	cf 93       	push	r28
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
	//prescaller = 1
	CLR_BIT(TWSR_R,TWPS1_B);
     eba:	a1 e2       	ldi	r26, 0x21	; 33
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e1 e2       	ldi	r30, 0x21	; 33
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	8d 7f       	andi	r24, 0xFD	; 253
     ec6:	8c 93       	st	X, r24
	CLR_BIT(TWSR_R,TWPS0_B);
     ec8:	a1 e2       	ldi	r26, 0x21	; 33
     eca:	b0 e0       	ldi	r27, 0x00	; 0
     ecc:	e1 e2       	ldi	r30, 0x21	; 33
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	8e 7f       	andi	r24, 0xFE	; 254
     ed4:	8c 93       	st	X, r24
//	SET_BIT(TWSR_R,TWPS1_B);
//	SET_BIT(TWSR_R,TWPS0_B);
//	TWSR_R |= 1<<TWPS1_B | 1<<TWPS1_B;

	/* Bit Rate: 100.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
	TWBR_R = 32;
     ed6:	e0 e2       	ldi	r30, 0x20	; 32
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 e2       	ldi	r24, 0x20	; 32
     edc:	80 83       	st	Z, r24

	return E_OK;
     ede:	81 e0       	ldi	r24, 0x01	; 1
}//end TWI_initMatser
     ee0:	cf 91       	pop	r28
     ee2:	df 91       	pop	r29
     ee4:	08 95       	ret

00000ee6 <TWI_initSlave>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to initialize the TWI slave
*************************************************************************************************/
enuErrorStatus_t TWI_initSlave(void)
{
     ee6:	df 93       	push	r29
     ee8:	cf 93       	push	r28
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
	//set the address of the slave to be 0x01
	TWAR_R = 0x01<<1;
     eee:	e2 e2       	ldi	r30, 0x22	; 34
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	82 e0       	ldi	r24, 0x02	; 2
     ef4:	80 83       	st	Z, r24

	return E_OK;
     ef6:	81 e0       	ldi	r24, 0x01	; 1
}//end TWI_initSlave
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	08 95       	ret

00000efe <TWI_start>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to transmit start condition
*************************************************************************************************/
enuErrorStatus_t TWI_start(void)
{
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	0f 92       	push	r0
     f04:	cd b7       	in	r28, 0x3d	; 61
     f06:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR_R = (1 << TWINT_B) | (1 << TWSTA_B) | (1 << TWEN_B);
     f08:	e6 e5       	ldi	r30, 0x56	; 86
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	84 ea       	ldi	r24, 0xA4	; 164
     f0e:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(!GET_BIT(TWCR_R,TWINT_B));
     f10:	e6 e5       	ldi	r30, 0x56	; 86
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	88 23       	and	r24, r24
     f18:	dc f7       	brge	.-10     	; 0xf10 <TWI_start+0x12>

    //check if start bit is transmitted successfully
    if(TWI_getStatus() != TW_START)
     f1a:	0e 94 56 08 	call	0x10ac	; 0x10ac <TWI_getStatus>
     f1e:	88 30       	cpi	r24, 0x08	; 8
     f20:	11 f0       	breq	.+4      	; 0xf26 <TWI_start+0x28>
    {
    	return E_ERROR;
     f22:	19 82       	std	Y+1, r1	; 0x01
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <TWI_start+0x2c>
    }
    return E_OK;
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	89 83       	std	Y+1, r24	; 0x01
     f2a:	89 81       	ldd	r24, Y+1	; 0x01
}//end TWI_start
     f2c:	0f 90       	pop	r0
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <TWI_repeatedStart>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to transmit repeated start condition
*************************************************************************************************/
enuErrorStatus_t TWI_repeatedStart(void)
{
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	0f 92       	push	r0
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR_R = (1 << TWINT_B) | (1 << TWSTA_B) | (1 << TWEN_B);
     f3e:	e6 e5       	ldi	r30, 0x56	; 86
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	84 ea       	ldi	r24, 0xA4	; 164
     f44:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(!GET_BIT(TWCR_R,TWINT_B));
     f46:	e6 e5       	ldi	r30, 0x56	; 86
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	88 23       	and	r24, r24
     f4e:	dc f7       	brge	.-10     	; 0xf46 <TWI_repeatedStart+0x12>

    //check if start bit is transmitted successfully
    if(TWI_getStatus() != TW_REP_START)
     f50:	0e 94 56 08 	call	0x10ac	; 0x10ac <TWI_getStatus>
     f54:	80 31       	cpi	r24, 0x10	; 16
     f56:	11 f0       	breq	.+4      	; 0xf5c <TWI_repeatedStart+0x28>
    {
    	return E_ERROR;
     f58:	19 82       	std	Y+1, r1	; 0x01
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <TWI_repeatedStart+0x2c>
    }
    return E_OK;
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	89 83       	std	Y+1, r24	; 0x01
     f60:	89 81       	ldd	r24, Y+1	; 0x01
}//end TWI_start
     f62:	0f 90       	pop	r0
     f64:	cf 91       	pop	r28
     f66:	df 91       	pop	r29
     f68:	08 95       	ret

00000f6a <TWI_stop>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to transmit stop condition
*************************************************************************************************/
enuErrorStatus_t TWI_stop(void)
{
     f6a:	df 93       	push	r29
     f6c:	cf 93       	push	r28
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR_R = (1 << TWINT_B) | (1 << TWSTO_B) | (1 << TWEN_B);
     f72:	e6 e5       	ldi	r30, 0x56	; 86
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	84 e9       	ldi	r24, 0x94	; 148
     f78:	80 83       	st	Z, r24

    return E_OK;
     f7a:	81 e0       	ldi	r24, 0x01	; 1
}//end TWI_stop
     f7c:	cf 91       	pop	r28
     f7e:	df 91       	pop	r29
     f80:	08 95       	ret

00000f82 <TWI_writeData>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to transmit data
*************************************************************************************************/
enuErrorStatus_t TWI_writeData(uint8_t u8Data)
{
     f82:	df 93       	push	r29
     f84:	cf 93       	push	r28
     f86:	00 d0       	rcall	.+0      	; 0xf88 <TWI_writeData+0x6>
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
     f8c:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR_R = u8Data;
     f8e:	e3 e2       	ldi	r30, 0x23	; 35
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	89 81       	ldd	r24, Y+1	; 0x01
     f94:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR_R = (1 << TWINT_B) | (1 << TWEN_B);
     f96:	e6 e5       	ldi	r30, 0x56	; 86
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	84 e8       	ldi	r24, 0x84	; 132
     f9c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(!GET_BIT(TWCR_R,TWINT_B));
     f9e:	e6 e5       	ldi	r30, 0x56	; 86
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	88 23       	and	r24, r24
     fa6:	dc f7       	brge	.-10     	; 0xf9e <TWI_writeData+0x1c>

    //check if data is transmitted successfully
    if(TWI_getStatus() != TW_MT_DATA_ACK)
     fa8:	0e 94 56 08 	call	0x10ac	; 0x10ac <TWI_getStatus>
     fac:	88 32       	cpi	r24, 0x28	; 40
     fae:	11 f0       	breq	.+4      	; 0xfb4 <TWI_writeData+0x32>
    {
    	return E_ERROR;
     fb0:	1a 82       	std	Y+2, r1	; 0x02
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <TWI_writeData+0x36>
    }
    return E_OK;
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	8a 83       	std	Y+2, r24	; 0x02
     fb8:	8a 81       	ldd	r24, Y+2	; 0x02
}//end TWI_writeData
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	cf 91       	pop	r28
     fc0:	df 91       	pop	r29
     fc2:	08 95       	ret

00000fc4 <TWI_writeAddress>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to transmit address
*************************************************************************************************/
enuErrorStatus_t TWI_writeAddress(uint8_t u8Address)
{
     fc4:	df 93       	push	r29
     fc6:	cf 93       	push	r28
     fc8:	00 d0       	rcall	.+0      	; 0xfca <TWI_writeAddress+0x6>
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
     fce:	89 83       	std	Y+1, r24	; 0x01
    /* Put address On TWI data Register */
    TWDR_R = u8Address<<1;
     fd0:	e3 e2       	ldi	r30, 0x23	; 35
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	88 0f       	add	r24, r24
     fd8:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR_R = (1 << TWINT_B) | (1 << TWEN_B);
     fda:	e6 e5       	ldi	r30, 0x56	; 86
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	84 e8       	ldi	r24, 0x84	; 132
     fe0:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(!GET_BIT(TWCR_R,TWINT_B));
     fe2:	e6 e5       	ldi	r30, 0x56	; 86
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	88 23       	and	r24, r24
     fea:	dc f7       	brge	.-10     	; 0xfe2 <TWI_writeAddress+0x1e>

    //check if address is transmitted successfully
    if(TWI_getStatus() != TW_MT_SLA_W_ACK)
     fec:	0e 94 56 08 	call	0x10ac	; 0x10ac <TWI_getStatus>
     ff0:	88 31       	cpi	r24, 0x18	; 24
     ff2:	11 f0       	breq	.+4      	; 0xff8 <TWI_writeAddress+0x34>
    {
    	return E_ERROR;
     ff4:	1a 82       	std	Y+2, r1	; 0x02
     ff6:	02 c0       	rjmp	.+4      	; 0xffc <TWI_writeAddress+0x38>
    }
    return E_OK;
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	8a 83       	std	Y+2, r24	; 0x02
     ffc:	8a 81       	ldd	r24, Y+2	; 0x02
}//end TWI_writeAddress
     ffe:	0f 90       	pop	r0
    1000:	0f 90       	pop	r0
    1002:	cf 91       	pop	r28
    1004:	df 91       	pop	r29
    1006:	08 95       	ret

00001008 <TWI_readDataWithACK>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to read data from slave with ACK
*************************************************************************************************/
enuErrorStatus_t TWI_readDataWithACK(uint8_t* pu8Data)
{
    1008:	df 93       	push	r29
    100a:	cf 93       	push	r28
    100c:	00 d0       	rcall	.+0      	; 0x100e <TWI_readDataWithACK+0x6>
    100e:	0f 92       	push	r0
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
    1014:	9a 83       	std	Y+2, r25	; 0x02
    1016:	89 83       	std	Y+1, r24	; 0x01
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR_R = (1 << TWINT_B) | (1 << TWEN_B) | (1 << TWEA_B);
    1018:	e6 e5       	ldi	r30, 0x56	; 86
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	84 ec       	ldi	r24, 0xC4	; 196
    101e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(!GET_BIT(TWCR_R,TWINT_B));
    1020:	e6 e5       	ldi	r30, 0x56	; 86
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	88 23       	and	r24, r24
    1028:	dc f7       	brge	.-10     	; 0x1020 <TWI_readDataWithACK+0x18>

    /* Read Data */
    *pu8Data = TWDR_R;
    102a:	e3 e2       	ldi	r30, 0x23	; 35
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	e9 81       	ldd	r30, Y+1	; 0x01
    1032:	fa 81       	ldd	r31, Y+2	; 0x02
    1034:	80 83       	st	Z, r24

    //check if data is received successfully
    if(TWI_getStatus() != TW_MR_DATA_ACK)
    1036:	0e 94 56 08 	call	0x10ac	; 0x10ac <TWI_getStatus>
    103a:	80 35       	cpi	r24, 0x50	; 80
    103c:	11 f0       	breq	.+4      	; 0x1042 <TWI_readDataWithACK+0x3a>
    {
    	return E_ERROR;
    103e:	1b 82       	std	Y+3, r1	; 0x03
    1040:	08 c0       	rjmp	.+16     	; 0x1052 <TWI_readDataWithACK+0x4a>
    }

    /* Read Data */
    *pu8Data = TWDR_R;
    1042:	e3 e2       	ldi	r30, 0x23	; 35
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	e9 81       	ldd	r30, Y+1	; 0x01
    104a:	fa 81       	ldd	r31, Y+2	; 0x02
    104c:	80 83       	st	Z, r24

    return E_OK;
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	8b 83       	std	Y+3, r24	; 0x03
    1052:	8b 81       	ldd	r24, Y+3	; 0x03
}//end TWI_readDataWithACK
    1054:	0f 90       	pop	r0
    1056:	0f 90       	pop	r0
    1058:	0f 90       	pop	r0
    105a:	cf 91       	pop	r28
    105c:	df 91       	pop	r29
    105e:	08 95       	ret

00001060 <TWI_readDataWithNACK>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to read data from slave with NACK
*************************************************************************************************/
enuErrorStatus_t TWI_readDataWithNACK(uint8_t* pu8Data)
{
    1060:	df 93       	push	r29
    1062:	cf 93       	push	r28
    1064:	00 d0       	rcall	.+0      	; 0x1066 <TWI_readDataWithNACK+0x6>
    1066:	0f 92       	push	r0
    1068:	cd b7       	in	r28, 0x3d	; 61
    106a:	de b7       	in	r29, 0x3e	; 62
    106c:	9a 83       	std	Y+2, r25	; 0x02
    106e:	89 83       	std	Y+1, r24	; 0x01
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR_R = (1 << TWINT_B) | (1 << TWEN_B);
    1070:	e6 e5       	ldi	r30, 0x56	; 86
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	84 e8       	ldi	r24, 0x84	; 132
    1076:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(!GET_BIT(TWCR_R,TWINT_B));
    1078:	e6 e5       	ldi	r30, 0x56	; 86
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	88 23       	and	r24, r24
    1080:	dc f7       	brge	.-10     	; 0x1078 <TWI_readDataWithNACK+0x18>

    //check if data is received successfully
    if(TWI_getStatus() != TW_MR_DATA_NACK)
    1082:	0e 94 56 08 	call	0x10ac	; 0x10ac <TWI_getStatus>
    1086:	88 35       	cpi	r24, 0x58	; 88
    1088:	11 f0       	breq	.+4      	; 0x108e <TWI_readDataWithNACK+0x2e>
    {
    	return E_ERROR;
    108a:	1b 82       	std	Y+3, r1	; 0x03
    108c:	08 c0       	rjmp	.+16     	; 0x109e <TWI_readDataWithNACK+0x3e>
    }

    /* Read Data */
    *pu8Data = TWDR_R;
    108e:	e3 e2       	ldi	r30, 0x23	; 35
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	e9 81       	ldd	r30, Y+1	; 0x01
    1096:	fa 81       	ldd	r31, Y+2	; 0x02
    1098:	80 83       	st	Z, r24

    return E_OK;
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	8b 83       	std	Y+3, r24	; 0x03
    109e:	8b 81       	ldd	r24, Y+3	; 0x03
}//end TWI_readDataWithNACK
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	08 95       	ret

000010ac <TWI_getStatus>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to get the status of the transmission
*************************************************************************************************/
uint8_t TWI_getStatus(void)
{
    10ac:	df 93       	push	r29
    10ae:	cf 93       	push	r28
    10b0:	0f 92       	push	r0
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
    uint8_t u8Status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    u8Status = TWSR_R & 0xF8;
    10b6:	e1 e2       	ldi	r30, 0x21	; 33
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	88 7f       	andi	r24, 0xF8	; 248
    10be:	89 83       	std	Y+1, r24	; 0x01
    return u8Status;
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
}//end TWI_getStatus
    10c2:	0f 90       	pop	r0
    10c4:	cf 91       	pop	r28
    10c6:	df 91       	pop	r29
    10c8:	08 95       	ret

000010ca <DIO_Init>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to initialize all the DIO groups according to the configuration
*************************************************************************************************/
enuErrorStatus_t DIO_Init(void)
{
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	0f 92       	push	r0
    10d0:	cd b7       	in	r28, 0x3d	; 61
    10d2:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_i;

	for(u8_i=0; u8_i<DIO_GROUPS_NO; u8_i++)
    10d4:	19 82       	std	Y+1, r1	; 0x01
    10d6:	02 c4       	rjmp	.+2052   	; 0x18dc <DIO_Init+0x812>
	{
		//set the pin direction (input, output)
		if(astrDIOConfigParameters[u8_i].enuPinDir == INPUT)
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	c9 01       	movw	r24, r18
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	82 0f       	add	r24, r18
    10e6:	93 1f       	adc	r25, r19
    10e8:	fc 01       	movw	r30, r24
    10ea:	eb 53       	subi	r30, 0x3B	; 59
    10ec:	ff 4f       	sbci	r31, 0xFF	; 255
    10ee:	80 81       	ld	r24, Z
    10f0:	88 23       	and	r24, r24
    10f2:	09 f0       	breq	.+2      	; 0x10f6 <DIO_Init+0x2c>
    10f4:	ed c0       	rjmp	.+474    	; 0x12d0 <DIO_Init+0x206>
		{
			//if PORTA
			if((astrDIOConfigParameters[u8_i].enuPinNo >= 0) && (astrDIOConfigParameters[u8_i].enuPinNo < 8))
    10f6:	89 81       	ldd	r24, Y+1	; 0x01
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	c9 01       	movw	r24, r18
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	82 0f       	add	r24, r18
    1104:	93 1f       	adc	r25, r19
    1106:	fc 01       	movw	r30, r24
    1108:	ec 53       	subi	r30, 0x3C	; 60
    110a:	ff 4f       	sbci	r31, 0xFF	; 255
    110c:	80 81       	ld	r24, Z
    110e:	88 30       	cpi	r24, 0x08	; 8
    1110:	00 f5       	brcc	.+64     	; 0x1152 <DIO_Init+0x88>
			{
				CLR_BIT(DDRA_R, astrDIOConfigParameters[u8_i].enuPinNo);
    1112:	aa e3       	ldi	r26, 0x3A	; 58
    1114:	b0 e0       	ldi	r27, 0x00	; 0
    1116:	ea e3       	ldi	r30, 0x3A	; 58
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	80 81       	ld	r24, Z
    111c:	48 2f       	mov	r20, r24
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	c9 01       	movw	r24, r18
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	82 0f       	add	r24, r18
    112c:	93 1f       	adc	r25, r19
    112e:	fc 01       	movw	r30, r24
    1130:	ec 53       	subi	r30, 0x3C	; 60
    1132:	ff 4f       	sbci	r31, 0xFF	; 255
    1134:	80 81       	ld	r24, Z
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	02 2e       	mov	r0, r18
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <DIO_Init+0x7c>
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	0a 94       	dec	r0
    1148:	e2 f7       	brpl	.-8      	; 0x1142 <DIO_Init+0x78>
    114a:	80 95       	com	r24
    114c:	84 23       	and	r24, r20
    114e:	8c 93       	st	X, r24
    1150:	b3 c1       	rjmp	.+870    	; 0x14b8 <DIO_Init+0x3ee>
			}//end if

			//if PORTB
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 8) && (astrDIOConfigParameters[u8_i].enuPinNo < 16))
    1152:	89 81       	ldd	r24, Y+1	; 0x01
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	c9 01       	movw	r24, r18
    115a:	88 0f       	add	r24, r24
    115c:	99 1f       	adc	r25, r25
    115e:	82 0f       	add	r24, r18
    1160:	93 1f       	adc	r25, r19
    1162:	fc 01       	movw	r30, r24
    1164:	ec 53       	subi	r30, 0x3C	; 60
    1166:	ff 4f       	sbci	r31, 0xFF	; 255
    1168:	80 81       	ld	r24, Z
    116a:	88 30       	cpi	r24, 0x08	; 8
    116c:	88 f1       	brcs	.+98     	; 0x11d0 <DIO_Init+0x106>
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	c9 01       	movw	r24, r18
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	82 0f       	add	r24, r18
    117c:	93 1f       	adc	r25, r19
    117e:	fc 01       	movw	r30, r24
    1180:	ec 53       	subi	r30, 0x3C	; 60
    1182:	ff 4f       	sbci	r31, 0xFF	; 255
    1184:	80 81       	ld	r24, Z
    1186:	80 31       	cpi	r24, 0x10	; 16
    1188:	18 f5       	brcc	.+70     	; 0x11d0 <DIO_Init+0x106>
			{
				CLR_BIT(DDRB_R,(astrDIOConfigParameters[u8_i].enuPinNo - 8));
    118a:	a7 e3       	ldi	r26, 0x37	; 55
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	e7 e3       	ldi	r30, 0x37	; 55
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	48 2f       	mov	r20, r24
    1196:	89 81       	ldd	r24, Y+1	; 0x01
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	c9 01       	movw	r24, r18
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	82 0f       	add	r24, r18
    11a4:	93 1f       	adc	r25, r19
    11a6:	fc 01       	movw	r30, r24
    11a8:	ec 53       	subi	r30, 0x3C	; 60
    11aa:	ff 4f       	sbci	r31, 0xFF	; 255
    11ac:	80 81       	ld	r24, Z
    11ae:	88 2f       	mov	r24, r24
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	9c 01       	movw	r18, r24
    11b4:	28 50       	subi	r18, 0x08	; 8
    11b6:	30 40       	sbci	r19, 0x00	; 0
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	02 2e       	mov	r0, r18
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <DIO_Init+0xfa>
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	0a 94       	dec	r0
    11c6:	e2 f7       	brpl	.-8      	; 0x11c0 <DIO_Init+0xf6>
    11c8:	80 95       	com	r24
    11ca:	84 23       	and	r24, r20
    11cc:	8c 93       	st	X, r24
    11ce:	74 c1       	rjmp	.+744    	; 0x14b8 <DIO_Init+0x3ee>
			}//end else if

			//if PORTC
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 16) && (astrDIOConfigParameters[u8_i].enuPinNo < 24))
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
    11d2:	28 2f       	mov	r18, r24
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	c9 01       	movw	r24, r18
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	82 0f       	add	r24, r18
    11de:	93 1f       	adc	r25, r19
    11e0:	fc 01       	movw	r30, r24
    11e2:	ec 53       	subi	r30, 0x3C	; 60
    11e4:	ff 4f       	sbci	r31, 0xFF	; 255
    11e6:	80 81       	ld	r24, Z
    11e8:	80 31       	cpi	r24, 0x10	; 16
    11ea:	88 f1       	brcs	.+98     	; 0x124e <DIO_Init+0x184>
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	28 2f       	mov	r18, r24
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	c9 01       	movw	r24, r18
    11f4:	88 0f       	add	r24, r24
    11f6:	99 1f       	adc	r25, r25
    11f8:	82 0f       	add	r24, r18
    11fa:	93 1f       	adc	r25, r19
    11fc:	fc 01       	movw	r30, r24
    11fe:	ec 53       	subi	r30, 0x3C	; 60
    1200:	ff 4f       	sbci	r31, 0xFF	; 255
    1202:	80 81       	ld	r24, Z
    1204:	88 31       	cpi	r24, 0x18	; 24
    1206:	18 f5       	brcc	.+70     	; 0x124e <DIO_Init+0x184>
			{
				CLR_BIT(DDRC_R,(astrDIOConfigParameters[u8_i].enuPinNo - 16));
    1208:	a4 e3       	ldi	r26, 0x34	; 52
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	e4 e3       	ldi	r30, 0x34	; 52
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	48 2f       	mov	r20, r24
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	28 2f       	mov	r18, r24
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	c9 01       	movw	r24, r18
    121c:	88 0f       	add	r24, r24
    121e:	99 1f       	adc	r25, r25
    1220:	82 0f       	add	r24, r18
    1222:	93 1f       	adc	r25, r19
    1224:	fc 01       	movw	r30, r24
    1226:	ec 53       	subi	r30, 0x3C	; 60
    1228:	ff 4f       	sbci	r31, 0xFF	; 255
    122a:	80 81       	ld	r24, Z
    122c:	88 2f       	mov	r24, r24
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	9c 01       	movw	r18, r24
    1232:	20 51       	subi	r18, 0x10	; 16
    1234:	30 40       	sbci	r19, 0x00	; 0
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	02 2e       	mov	r0, r18
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <DIO_Init+0x178>
    123e:	88 0f       	add	r24, r24
    1240:	99 1f       	adc	r25, r25
    1242:	0a 94       	dec	r0
    1244:	e2 f7       	brpl	.-8      	; 0x123e <DIO_Init+0x174>
    1246:	80 95       	com	r24
    1248:	84 23       	and	r24, r20
    124a:	8c 93       	st	X, r24
    124c:	35 c1       	rjmp	.+618    	; 0x14b8 <DIO_Init+0x3ee>
			}//end else if

			//if PORTD
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 24) && (astrDIOConfigParameters[u8_i].enuPinNo < 32))
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	c9 01       	movw	r24, r18
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	82 0f       	add	r24, r18
    125c:	93 1f       	adc	r25, r19
    125e:	fc 01       	movw	r30, r24
    1260:	ec 53       	subi	r30, 0x3C	; 60
    1262:	ff 4f       	sbci	r31, 0xFF	; 255
    1264:	80 81       	ld	r24, Z
    1266:	88 31       	cpi	r24, 0x18	; 24
    1268:	08 f4       	brcc	.+2      	; 0x126c <DIO_Init+0x1a2>
    126a:	26 c1       	rjmp	.+588    	; 0x14b8 <DIO_Init+0x3ee>
    126c:	89 81       	ldd	r24, Y+1	; 0x01
    126e:	28 2f       	mov	r18, r24
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	c9 01       	movw	r24, r18
    1274:	88 0f       	add	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	82 0f       	add	r24, r18
    127a:	93 1f       	adc	r25, r19
    127c:	fc 01       	movw	r30, r24
    127e:	ec 53       	subi	r30, 0x3C	; 60
    1280:	ff 4f       	sbci	r31, 0xFF	; 255
    1282:	80 81       	ld	r24, Z
    1284:	80 32       	cpi	r24, 0x20	; 32
    1286:	08 f0       	brcs	.+2      	; 0x128a <DIO_Init+0x1c0>
    1288:	17 c1       	rjmp	.+558    	; 0x14b8 <DIO_Init+0x3ee>
			{
				CLR_BIT(DDRD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
    128a:	a1 e3       	ldi	r26, 0x31	; 49
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	e1 e3       	ldi	r30, 0x31	; 49
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	48 2f       	mov	r20, r24
    1296:	89 81       	ldd	r24, Y+1	; 0x01
    1298:	28 2f       	mov	r18, r24
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	c9 01       	movw	r24, r18
    129e:	88 0f       	add	r24, r24
    12a0:	99 1f       	adc	r25, r25
    12a2:	82 0f       	add	r24, r18
    12a4:	93 1f       	adc	r25, r19
    12a6:	fc 01       	movw	r30, r24
    12a8:	ec 53       	subi	r30, 0x3C	; 60
    12aa:	ff 4f       	sbci	r31, 0xFF	; 255
    12ac:	80 81       	ld	r24, Z
    12ae:	88 2f       	mov	r24, r24
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	9c 01       	movw	r18, r24
    12b4:	28 51       	subi	r18, 0x18	; 24
    12b6:	30 40       	sbci	r19, 0x00	; 0
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	02 2e       	mov	r0, r18
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <DIO_Init+0x1fa>
    12c0:	88 0f       	add	r24, r24
    12c2:	99 1f       	adc	r25, r25
    12c4:	0a 94       	dec	r0
    12c6:	e2 f7       	brpl	.-8      	; 0x12c0 <DIO_Init+0x1f6>
    12c8:	80 95       	com	r24
    12ca:	84 23       	and	r24, r20
    12cc:	8c 93       	st	X, r24
    12ce:	f4 c0       	rjmp	.+488    	; 0x14b8 <DIO_Init+0x3ee>
			}//end else if
		}//end if

		else if(astrDIOConfigParameters[u8_i].enuPinDir == OUTPUT)
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	28 2f       	mov	r18, r24
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	c9 01       	movw	r24, r18
    12d8:	88 0f       	add	r24, r24
    12da:	99 1f       	adc	r25, r25
    12dc:	82 0f       	add	r24, r18
    12de:	93 1f       	adc	r25, r19
    12e0:	fc 01       	movw	r30, r24
    12e2:	eb 53       	subi	r30, 0x3B	; 59
    12e4:	ff 4f       	sbci	r31, 0xFF	; 255
    12e6:	80 81       	ld	r24, Z
    12e8:	81 30       	cpi	r24, 0x01	; 1
    12ea:	09 f0       	breq	.+2      	; 0x12ee <DIO_Init+0x224>
    12ec:	e5 c0       	rjmp	.+458    	; 0x14b8 <DIO_Init+0x3ee>
		{
			if((astrDIOConfigParameters[u8_i].enuPinNo >= 0) && (astrDIOConfigParameters[u8_i].enuPinNo < 8))	//if porta
    12ee:	89 81       	ldd	r24, Y+1	; 0x01
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	c9 01       	movw	r24, r18
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	82 0f       	add	r24, r18
    12fc:	93 1f       	adc	r25, r19
    12fe:	fc 01       	movw	r30, r24
    1300:	ec 53       	subi	r30, 0x3C	; 60
    1302:	ff 4f       	sbci	r31, 0xFF	; 255
    1304:	80 81       	ld	r24, Z
    1306:	88 30       	cpi	r24, 0x08	; 8
    1308:	f8 f4       	brcc	.+62     	; 0x1348 <DIO_Init+0x27e>
			{
				SET_BIT(DDRA_R, astrDIOConfigParameters[u8_i].enuPinNo);
    130a:	aa e3       	ldi	r26, 0x3A	; 58
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	ea e3       	ldi	r30, 0x3A	; 58
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	48 2f       	mov	r20, r24
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	28 2f       	mov	r18, r24
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	c9 01       	movw	r24, r18
    131e:	88 0f       	add	r24, r24
    1320:	99 1f       	adc	r25, r25
    1322:	82 0f       	add	r24, r18
    1324:	93 1f       	adc	r25, r19
    1326:	fc 01       	movw	r30, r24
    1328:	ec 53       	subi	r30, 0x3C	; 60
    132a:	ff 4f       	sbci	r31, 0xFF	; 255
    132c:	80 81       	ld	r24, Z
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	02 2e       	mov	r0, r18
    1338:	02 c0       	rjmp	.+4      	; 0x133e <DIO_Init+0x274>
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	0a 94       	dec	r0
    1340:	e2 f7       	brpl	.-8      	; 0x133a <DIO_Init+0x270>
    1342:	84 2b       	or	r24, r20
    1344:	8c 93       	st	X, r24
    1346:	b8 c0       	rjmp	.+368    	; 0x14b8 <DIO_Init+0x3ee>
			}//end if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 8) && (astrDIOConfigParameters[u8_i].enuPinNo < 16))	//if portb
    1348:	89 81       	ldd	r24, Y+1	; 0x01
    134a:	28 2f       	mov	r18, r24
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	c9 01       	movw	r24, r18
    1350:	88 0f       	add	r24, r24
    1352:	99 1f       	adc	r25, r25
    1354:	82 0f       	add	r24, r18
    1356:	93 1f       	adc	r25, r19
    1358:	fc 01       	movw	r30, r24
    135a:	ec 53       	subi	r30, 0x3C	; 60
    135c:	ff 4f       	sbci	r31, 0xFF	; 255
    135e:	80 81       	ld	r24, Z
    1360:	88 30       	cpi	r24, 0x08	; 8
    1362:	80 f1       	brcs	.+96     	; 0x13c4 <DIO_Init+0x2fa>
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	c9 01       	movw	r24, r18
    136c:	88 0f       	add	r24, r24
    136e:	99 1f       	adc	r25, r25
    1370:	82 0f       	add	r24, r18
    1372:	93 1f       	adc	r25, r19
    1374:	fc 01       	movw	r30, r24
    1376:	ec 53       	subi	r30, 0x3C	; 60
    1378:	ff 4f       	sbci	r31, 0xFF	; 255
    137a:	80 81       	ld	r24, Z
    137c:	80 31       	cpi	r24, 0x10	; 16
    137e:	10 f5       	brcc	.+68     	; 0x13c4 <DIO_Init+0x2fa>
			{
				SET_BIT(DDRB_R,(astrDIOConfigParameters[u8_i].enuPinNo - 8));
    1380:	a7 e3       	ldi	r26, 0x37	; 55
    1382:	b0 e0       	ldi	r27, 0x00	; 0
    1384:	e7 e3       	ldi	r30, 0x37	; 55
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	48 2f       	mov	r20, r24
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	c9 01       	movw	r24, r18
    1394:	88 0f       	add	r24, r24
    1396:	99 1f       	adc	r25, r25
    1398:	82 0f       	add	r24, r18
    139a:	93 1f       	adc	r25, r19
    139c:	fc 01       	movw	r30, r24
    139e:	ec 53       	subi	r30, 0x3C	; 60
    13a0:	ff 4f       	sbci	r31, 0xFF	; 255
    13a2:	80 81       	ld	r24, Z
    13a4:	88 2f       	mov	r24, r24
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	9c 01       	movw	r18, r24
    13aa:	28 50       	subi	r18, 0x08	; 8
    13ac:	30 40       	sbci	r19, 0x00	; 0
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	02 2e       	mov	r0, r18
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <DIO_Init+0x2f0>
    13b6:	88 0f       	add	r24, r24
    13b8:	99 1f       	adc	r25, r25
    13ba:	0a 94       	dec	r0
    13bc:	e2 f7       	brpl	.-8      	; 0x13b6 <DIO_Init+0x2ec>
    13be:	84 2b       	or	r24, r20
    13c0:	8c 93       	st	X, r24
    13c2:	7a c0       	rjmp	.+244    	; 0x14b8 <DIO_Init+0x3ee>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 16) && (astrDIOConfigParameters[u8_i].enuPinNo < 24))	//if portc
    13c4:	89 81       	ldd	r24, Y+1	; 0x01
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	c9 01       	movw	r24, r18
    13cc:	88 0f       	add	r24, r24
    13ce:	99 1f       	adc	r25, r25
    13d0:	82 0f       	add	r24, r18
    13d2:	93 1f       	adc	r25, r19
    13d4:	fc 01       	movw	r30, r24
    13d6:	ec 53       	subi	r30, 0x3C	; 60
    13d8:	ff 4f       	sbci	r31, 0xFF	; 255
    13da:	80 81       	ld	r24, Z
    13dc:	80 31       	cpi	r24, 0x10	; 16
    13de:	80 f1       	brcs	.+96     	; 0x1440 <DIO_Init+0x376>
    13e0:	89 81       	ldd	r24, Y+1	; 0x01
    13e2:	28 2f       	mov	r18, r24
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	c9 01       	movw	r24, r18
    13e8:	88 0f       	add	r24, r24
    13ea:	99 1f       	adc	r25, r25
    13ec:	82 0f       	add	r24, r18
    13ee:	93 1f       	adc	r25, r19
    13f0:	fc 01       	movw	r30, r24
    13f2:	ec 53       	subi	r30, 0x3C	; 60
    13f4:	ff 4f       	sbci	r31, 0xFF	; 255
    13f6:	80 81       	ld	r24, Z
    13f8:	88 31       	cpi	r24, 0x18	; 24
    13fa:	10 f5       	brcc	.+68     	; 0x1440 <DIO_Init+0x376>
			{
				SET_BIT(DDRC_R,(astrDIOConfigParameters[u8_i].enuPinNo - 16));
    13fc:	a4 e3       	ldi	r26, 0x34	; 52
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	e4 e3       	ldi	r30, 0x34	; 52
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	48 2f       	mov	r20, r24
    1408:	89 81       	ldd	r24, Y+1	; 0x01
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	c9 01       	movw	r24, r18
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	82 0f       	add	r24, r18
    1416:	93 1f       	adc	r25, r19
    1418:	fc 01       	movw	r30, r24
    141a:	ec 53       	subi	r30, 0x3C	; 60
    141c:	ff 4f       	sbci	r31, 0xFF	; 255
    141e:	80 81       	ld	r24, Z
    1420:	88 2f       	mov	r24, r24
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	9c 01       	movw	r18, r24
    1426:	20 51       	subi	r18, 0x10	; 16
    1428:	30 40       	sbci	r19, 0x00	; 0
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	02 2e       	mov	r0, r18
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <DIO_Init+0x36c>
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	0a 94       	dec	r0
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <DIO_Init+0x368>
    143a:	84 2b       	or	r24, r20
    143c:	8c 93       	st	X, r24
    143e:	3c c0       	rjmp	.+120    	; 0x14b8 <DIO_Init+0x3ee>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 24) && (astrDIOConfigParameters[u8_i].enuPinNo < 32))	//if portd
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	c9 01       	movw	r24, r18
    1448:	88 0f       	add	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	82 0f       	add	r24, r18
    144e:	93 1f       	adc	r25, r19
    1450:	fc 01       	movw	r30, r24
    1452:	ec 53       	subi	r30, 0x3C	; 60
    1454:	ff 4f       	sbci	r31, 0xFF	; 255
    1456:	80 81       	ld	r24, Z
    1458:	88 31       	cpi	r24, 0x18	; 24
    145a:	70 f1       	brcs	.+92     	; 0x14b8 <DIO_Init+0x3ee>
    145c:	89 81       	ldd	r24, Y+1	; 0x01
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	c9 01       	movw	r24, r18
    1464:	88 0f       	add	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	82 0f       	add	r24, r18
    146a:	93 1f       	adc	r25, r19
    146c:	fc 01       	movw	r30, r24
    146e:	ec 53       	subi	r30, 0x3C	; 60
    1470:	ff 4f       	sbci	r31, 0xFF	; 255
    1472:	80 81       	ld	r24, Z
    1474:	80 32       	cpi	r24, 0x20	; 32
    1476:	00 f5       	brcc	.+64     	; 0x14b8 <DIO_Init+0x3ee>
			{
				SET_BIT(DDRD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
    1478:	a1 e3       	ldi	r26, 0x31	; 49
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	e1 e3       	ldi	r30, 0x31	; 49
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	48 2f       	mov	r20, r24
    1484:	89 81       	ldd	r24, Y+1	; 0x01
    1486:	28 2f       	mov	r18, r24
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	c9 01       	movw	r24, r18
    148c:	88 0f       	add	r24, r24
    148e:	99 1f       	adc	r25, r25
    1490:	82 0f       	add	r24, r18
    1492:	93 1f       	adc	r25, r19
    1494:	fc 01       	movw	r30, r24
    1496:	ec 53       	subi	r30, 0x3C	; 60
    1498:	ff 4f       	sbci	r31, 0xFF	; 255
    149a:	80 81       	ld	r24, Z
    149c:	88 2f       	mov	r24, r24
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	9c 01       	movw	r18, r24
    14a2:	28 51       	subi	r18, 0x18	; 24
    14a4:	30 40       	sbci	r19, 0x00	; 0
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <DIO_Init+0x3e6>
    14ac:	88 0f       	add	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	2a 95       	dec	r18
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <DIO_Init+0x3e2>
    14b4:	84 2b       	or	r24, r20
    14b6:	8c 93       	st	X, r24
			}//end else if
		}//end else if

		//enable or disable pull-up resistor
		if(astrDIOConfigParameters[u8_i].enuPinDir == INPUT &&
    14b8:	89 81       	ldd	r24, Y+1	; 0x01
    14ba:	28 2f       	mov	r18, r24
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	c9 01       	movw	r24, r18
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	82 0f       	add	r24, r18
    14c6:	93 1f       	adc	r25, r19
    14c8:	fc 01       	movw	r30, r24
    14ca:	eb 53       	subi	r30, 0x3B	; 59
    14cc:	ff 4f       	sbci	r31, 0xFF	; 255
    14ce:	80 81       	ld	r24, Z
    14d0:	88 23       	and	r24, r24
    14d2:	09 f0       	breq	.+2      	; 0x14d6 <DIO_Init+0x40c>
    14d4:	fc c0       	rjmp	.+504    	; 0x16ce <DIO_Init+0x604>
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	28 2f       	mov	r18, r24
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	c9 01       	movw	r24, r18
    14de:	88 0f       	add	r24, r24
    14e0:	99 1f       	adc	r25, r25
    14e2:	82 0f       	add	r24, r18
    14e4:	93 1f       	adc	r25, r19
    14e6:	fc 01       	movw	r30, r24
    14e8:	ea 53       	subi	r30, 0x3A	; 58
    14ea:	ff 4f       	sbci	r31, 0xFF	; 255
    14ec:	80 81       	ld	r24, Z
    14ee:	88 23       	and	r24, r24
    14f0:	09 f0       	breq	.+2      	; 0x14f4 <DIO_Init+0x42a>
    14f2:	ed c0       	rjmp	.+474    	; 0x16ce <DIO_Init+0x604>
		   astrDIOConfigParameters[u8_i].enuPullupResEn == NO_CONNECTION)
		{
			if((astrDIOConfigParameters[u8_i].enuPinNo >= 0) && (astrDIOConfigParameters[u8_i].enuPinNo < 8))	//if porta
    14f4:	89 81       	ldd	r24, Y+1	; 0x01
    14f6:	28 2f       	mov	r18, r24
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	c9 01       	movw	r24, r18
    14fc:	88 0f       	add	r24, r24
    14fe:	99 1f       	adc	r25, r25
    1500:	82 0f       	add	r24, r18
    1502:	93 1f       	adc	r25, r19
    1504:	fc 01       	movw	r30, r24
    1506:	ec 53       	subi	r30, 0x3C	; 60
    1508:	ff 4f       	sbci	r31, 0xFF	; 255
    150a:	80 81       	ld	r24, Z
    150c:	88 30       	cpi	r24, 0x08	; 8
    150e:	00 f5       	brcc	.+64     	; 0x1550 <DIO_Init+0x486>
			{
				CLR_BIT(PORTA_R, astrDIOConfigParameters[u8_i].enuPinNo);
    1510:	ab e3       	ldi	r26, 0x3B	; 59
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	eb e3       	ldi	r30, 0x3B	; 59
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	48 2f       	mov	r20, r24
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	28 2f       	mov	r18, r24
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	c9 01       	movw	r24, r18
    1524:	88 0f       	add	r24, r24
    1526:	99 1f       	adc	r25, r25
    1528:	82 0f       	add	r24, r18
    152a:	93 1f       	adc	r25, r19
    152c:	fc 01       	movw	r30, r24
    152e:	ec 53       	subi	r30, 0x3C	; 60
    1530:	ff 4f       	sbci	r31, 0xFF	; 255
    1532:	80 81       	ld	r24, Z
    1534:	28 2f       	mov	r18, r24
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	02 2e       	mov	r0, r18
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <DIO_Init+0x47a>
    1540:	88 0f       	add	r24, r24
    1542:	99 1f       	adc	r25, r25
    1544:	0a 94       	dec	r0
    1546:	e2 f7       	brpl	.-8      	; 0x1540 <DIO_Init+0x476>
    1548:	80 95       	com	r24
    154a:	84 23       	and	r24, r20
    154c:	8c 93       	st	X, r24
    154e:	c3 c1       	rjmp	.+902    	; 0x18d6 <DIO_Init+0x80c>
			}//end if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 8) && (astrDIOConfigParameters[u8_i].enuPinNo < 16))	//if portb
    1550:	89 81       	ldd	r24, Y+1	; 0x01
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	c9 01       	movw	r24, r18
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	82 0f       	add	r24, r18
    155e:	93 1f       	adc	r25, r19
    1560:	fc 01       	movw	r30, r24
    1562:	ec 53       	subi	r30, 0x3C	; 60
    1564:	ff 4f       	sbci	r31, 0xFF	; 255
    1566:	80 81       	ld	r24, Z
    1568:	88 30       	cpi	r24, 0x08	; 8
    156a:	88 f1       	brcs	.+98     	; 0x15ce <DIO_Init+0x504>
    156c:	89 81       	ldd	r24, Y+1	; 0x01
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	c9 01       	movw	r24, r18
    1574:	88 0f       	add	r24, r24
    1576:	99 1f       	adc	r25, r25
    1578:	82 0f       	add	r24, r18
    157a:	93 1f       	adc	r25, r19
    157c:	fc 01       	movw	r30, r24
    157e:	ec 53       	subi	r30, 0x3C	; 60
    1580:	ff 4f       	sbci	r31, 0xFF	; 255
    1582:	80 81       	ld	r24, Z
    1584:	80 31       	cpi	r24, 0x10	; 16
    1586:	18 f5       	brcc	.+70     	; 0x15ce <DIO_Init+0x504>
			{
				CLR_BIT(PORTB_R,(astrDIOConfigParameters[u8_i].enuPinNo - 8));
    1588:	a8 e3       	ldi	r26, 0x38	; 56
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	e8 e3       	ldi	r30, 0x38	; 56
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	48 2f       	mov	r20, r24
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	28 2f       	mov	r18, r24
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	c9 01       	movw	r24, r18
    159c:	88 0f       	add	r24, r24
    159e:	99 1f       	adc	r25, r25
    15a0:	82 0f       	add	r24, r18
    15a2:	93 1f       	adc	r25, r19
    15a4:	fc 01       	movw	r30, r24
    15a6:	ec 53       	subi	r30, 0x3C	; 60
    15a8:	ff 4f       	sbci	r31, 0xFF	; 255
    15aa:	80 81       	ld	r24, Z
    15ac:	88 2f       	mov	r24, r24
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	9c 01       	movw	r18, r24
    15b2:	28 50       	subi	r18, 0x08	; 8
    15b4:	30 40       	sbci	r19, 0x00	; 0
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	02 2e       	mov	r0, r18
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <DIO_Init+0x4f8>
    15be:	88 0f       	add	r24, r24
    15c0:	99 1f       	adc	r25, r25
    15c2:	0a 94       	dec	r0
    15c4:	e2 f7       	brpl	.-8      	; 0x15be <DIO_Init+0x4f4>
    15c6:	80 95       	com	r24
    15c8:	84 23       	and	r24, r20
    15ca:	8c 93       	st	X, r24
    15cc:	84 c1       	rjmp	.+776    	; 0x18d6 <DIO_Init+0x80c>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 16) && (astrDIOConfigParameters[u8_i].enuPinNo < 24))	//if portc
    15ce:	89 81       	ldd	r24, Y+1	; 0x01
    15d0:	28 2f       	mov	r18, r24
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	c9 01       	movw	r24, r18
    15d6:	88 0f       	add	r24, r24
    15d8:	99 1f       	adc	r25, r25
    15da:	82 0f       	add	r24, r18
    15dc:	93 1f       	adc	r25, r19
    15de:	fc 01       	movw	r30, r24
    15e0:	ec 53       	subi	r30, 0x3C	; 60
    15e2:	ff 4f       	sbci	r31, 0xFF	; 255
    15e4:	80 81       	ld	r24, Z
    15e6:	80 31       	cpi	r24, 0x10	; 16
    15e8:	88 f1       	brcs	.+98     	; 0x164c <DIO_Init+0x582>
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
    15ec:	28 2f       	mov	r18, r24
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	c9 01       	movw	r24, r18
    15f2:	88 0f       	add	r24, r24
    15f4:	99 1f       	adc	r25, r25
    15f6:	82 0f       	add	r24, r18
    15f8:	93 1f       	adc	r25, r19
    15fa:	fc 01       	movw	r30, r24
    15fc:	ec 53       	subi	r30, 0x3C	; 60
    15fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1600:	80 81       	ld	r24, Z
    1602:	88 31       	cpi	r24, 0x18	; 24
    1604:	18 f5       	brcc	.+70     	; 0x164c <DIO_Init+0x582>
			{
				CLR_BIT(PORTC_R,(astrDIOConfigParameters[u8_i].enuPinNo - 16));
    1606:	a5 e3       	ldi	r26, 0x35	; 53
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	e5 e3       	ldi	r30, 0x35	; 53
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	48 2f       	mov	r20, r24
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	28 2f       	mov	r18, r24
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	c9 01       	movw	r24, r18
    161a:	88 0f       	add	r24, r24
    161c:	99 1f       	adc	r25, r25
    161e:	82 0f       	add	r24, r18
    1620:	93 1f       	adc	r25, r19
    1622:	fc 01       	movw	r30, r24
    1624:	ec 53       	subi	r30, 0x3C	; 60
    1626:	ff 4f       	sbci	r31, 0xFF	; 255
    1628:	80 81       	ld	r24, Z
    162a:	88 2f       	mov	r24, r24
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	9c 01       	movw	r18, r24
    1630:	20 51       	subi	r18, 0x10	; 16
    1632:	30 40       	sbci	r19, 0x00	; 0
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	02 2e       	mov	r0, r18
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <DIO_Init+0x576>
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	0a 94       	dec	r0
    1642:	e2 f7       	brpl	.-8      	; 0x163c <DIO_Init+0x572>
    1644:	80 95       	com	r24
    1646:	84 23       	and	r24, r20
    1648:	8c 93       	st	X, r24
    164a:	45 c1       	rjmp	.+650    	; 0x18d6 <DIO_Init+0x80c>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 24) && (astrDIOConfigParameters[u8_i].enuPinNo < 32))	//if portd
    164c:	89 81       	ldd	r24, Y+1	; 0x01
    164e:	28 2f       	mov	r18, r24
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	c9 01       	movw	r24, r18
    1654:	88 0f       	add	r24, r24
    1656:	99 1f       	adc	r25, r25
    1658:	82 0f       	add	r24, r18
    165a:	93 1f       	adc	r25, r19
    165c:	fc 01       	movw	r30, r24
    165e:	ec 53       	subi	r30, 0x3C	; 60
    1660:	ff 4f       	sbci	r31, 0xFF	; 255
    1662:	80 81       	ld	r24, Z
    1664:	88 31       	cpi	r24, 0x18	; 24
    1666:	08 f4       	brcc	.+2      	; 0x166a <DIO_Init+0x5a0>
    1668:	36 c1       	rjmp	.+620    	; 0x18d6 <DIO_Init+0x80c>
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	28 2f       	mov	r18, r24
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	c9 01       	movw	r24, r18
    1672:	88 0f       	add	r24, r24
    1674:	99 1f       	adc	r25, r25
    1676:	82 0f       	add	r24, r18
    1678:	93 1f       	adc	r25, r19
    167a:	fc 01       	movw	r30, r24
    167c:	ec 53       	subi	r30, 0x3C	; 60
    167e:	ff 4f       	sbci	r31, 0xFF	; 255
    1680:	80 81       	ld	r24, Z
    1682:	80 32       	cpi	r24, 0x20	; 32
    1684:	08 f0       	brcs	.+2      	; 0x1688 <DIO_Init+0x5be>
    1686:	27 c1       	rjmp	.+590    	; 0x18d6 <DIO_Init+0x80c>
			{
				CLR_BIT(PORTD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
    1688:	a2 e3       	ldi	r26, 0x32	; 50
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	e2 e3       	ldi	r30, 0x32	; 50
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	48 2f       	mov	r20, r24
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	c9 01       	movw	r24, r18
    169c:	88 0f       	add	r24, r24
    169e:	99 1f       	adc	r25, r25
    16a0:	82 0f       	add	r24, r18
    16a2:	93 1f       	adc	r25, r19
    16a4:	fc 01       	movw	r30, r24
    16a6:	ec 53       	subi	r30, 0x3C	; 60
    16a8:	ff 4f       	sbci	r31, 0xFF	; 255
    16aa:	80 81       	ld	r24, Z
    16ac:	88 2f       	mov	r24, r24
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	9c 01       	movw	r18, r24
    16b2:	28 51       	subi	r18, 0x18	; 24
    16b4:	30 40       	sbci	r19, 0x00	; 0
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	02 2e       	mov	r0, r18
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <DIO_Init+0x5f8>
    16be:	88 0f       	add	r24, r24
    16c0:	99 1f       	adc	r25, r25
    16c2:	0a 94       	dec	r0
    16c4:	e2 f7       	brpl	.-8      	; 0x16be <DIO_Init+0x5f4>
    16c6:	80 95       	com	r24
    16c8:	84 23       	and	r24, r20
    16ca:	8c 93       	st	X, r24
    16cc:	04 c1       	rjmp	.+520    	; 0x18d6 <DIO_Init+0x80c>
			}//end else if
		}//end if

		else if(astrDIOConfigParameters[u8_i].enuPinDir == INPUT &&
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
    16d0:	28 2f       	mov	r18, r24
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	c9 01       	movw	r24, r18
    16d6:	88 0f       	add	r24, r24
    16d8:	99 1f       	adc	r25, r25
    16da:	82 0f       	add	r24, r18
    16dc:	93 1f       	adc	r25, r19
    16de:	fc 01       	movw	r30, r24
    16e0:	eb 53       	subi	r30, 0x3B	; 59
    16e2:	ff 4f       	sbci	r31, 0xFF	; 255
    16e4:	80 81       	ld	r24, Z
    16e6:	88 23       	and	r24, r24
    16e8:	09 f0       	breq	.+2      	; 0x16ec <DIO_Init+0x622>
    16ea:	f5 c0       	rjmp	.+490    	; 0x18d6 <DIO_Init+0x80c>
    16ec:	89 81       	ldd	r24, Y+1	; 0x01
    16ee:	28 2f       	mov	r18, r24
    16f0:	30 e0       	ldi	r19, 0x00	; 0
    16f2:	c9 01       	movw	r24, r18
    16f4:	88 0f       	add	r24, r24
    16f6:	99 1f       	adc	r25, r25
    16f8:	82 0f       	add	r24, r18
    16fa:	93 1f       	adc	r25, r19
    16fc:	fc 01       	movw	r30, r24
    16fe:	ea 53       	subi	r30, 0x3A	; 58
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	80 81       	ld	r24, Z
    1704:	81 30       	cpi	r24, 0x01	; 1
    1706:	09 f0       	breq	.+2      	; 0x170a <DIO_Init+0x640>
    1708:	e6 c0       	rjmp	.+460    	; 0x18d6 <DIO_Init+0x80c>
				astrDIOConfigParameters[u8_i].enuPullupResEn == PULL_UP_ENABLE)
		{
			if((astrDIOConfigParameters[u8_i].enuPinNo >= 0) && (astrDIOConfigParameters[u8_i].enuPinNo < 8))	//if porta
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	c9 01       	movw	r24, r18
    1712:	88 0f       	add	r24, r24
    1714:	99 1f       	adc	r25, r25
    1716:	82 0f       	add	r24, r18
    1718:	93 1f       	adc	r25, r19
    171a:	fc 01       	movw	r30, r24
    171c:	ec 53       	subi	r30, 0x3C	; 60
    171e:	ff 4f       	sbci	r31, 0xFF	; 255
    1720:	80 81       	ld	r24, Z
    1722:	88 30       	cpi	r24, 0x08	; 8
    1724:	f8 f4       	brcc	.+62     	; 0x1764 <DIO_Init+0x69a>
			{
				SET_BIT(PORTA_R, astrDIOConfigParameters[u8_i].enuPinNo);
    1726:	ab e3       	ldi	r26, 0x3B	; 59
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	eb e3       	ldi	r30, 0x3B	; 59
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	48 2f       	mov	r20, r24
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	c9 01       	movw	r24, r18
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	82 0f       	add	r24, r18
    1740:	93 1f       	adc	r25, r19
    1742:	fc 01       	movw	r30, r24
    1744:	ec 53       	subi	r30, 0x3C	; 60
    1746:	ff 4f       	sbci	r31, 0xFF	; 255
    1748:	80 81       	ld	r24, Z
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	02 2e       	mov	r0, r18
    1754:	02 c0       	rjmp	.+4      	; 0x175a <DIO_Init+0x690>
    1756:	88 0f       	add	r24, r24
    1758:	99 1f       	adc	r25, r25
    175a:	0a 94       	dec	r0
    175c:	e2 f7       	brpl	.-8      	; 0x1756 <DIO_Init+0x68c>
    175e:	84 2b       	or	r24, r20
    1760:	8c 93       	st	X, r24
    1762:	b9 c0       	rjmp	.+370    	; 0x18d6 <DIO_Init+0x80c>
			}//end if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 8) && (astrDIOConfigParameters[u8_i].enuPinNo < 16))	//if portb
    1764:	89 81       	ldd	r24, Y+1	; 0x01
    1766:	28 2f       	mov	r18, r24
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	c9 01       	movw	r24, r18
    176c:	88 0f       	add	r24, r24
    176e:	99 1f       	adc	r25, r25
    1770:	82 0f       	add	r24, r18
    1772:	93 1f       	adc	r25, r19
    1774:	fc 01       	movw	r30, r24
    1776:	ec 53       	subi	r30, 0x3C	; 60
    1778:	ff 4f       	sbci	r31, 0xFF	; 255
    177a:	80 81       	ld	r24, Z
    177c:	88 30       	cpi	r24, 0x08	; 8
    177e:	80 f1       	brcs	.+96     	; 0x17e0 <DIO_Init+0x716>
    1780:	89 81       	ldd	r24, Y+1	; 0x01
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	c9 01       	movw	r24, r18
    1788:	88 0f       	add	r24, r24
    178a:	99 1f       	adc	r25, r25
    178c:	82 0f       	add	r24, r18
    178e:	93 1f       	adc	r25, r19
    1790:	fc 01       	movw	r30, r24
    1792:	ec 53       	subi	r30, 0x3C	; 60
    1794:	ff 4f       	sbci	r31, 0xFF	; 255
    1796:	80 81       	ld	r24, Z
    1798:	80 31       	cpi	r24, 0x10	; 16
    179a:	10 f5       	brcc	.+68     	; 0x17e0 <DIO_Init+0x716>
			{
				SET_BIT(PORTB_R,(astrDIOConfigParameters[u8_i].enuPinNo - 8));
    179c:	a8 e3       	ldi	r26, 0x38	; 56
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e8 e3       	ldi	r30, 0x38	; 56
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	48 2f       	mov	r20, r24
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	28 2f       	mov	r18, r24
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	c9 01       	movw	r24, r18
    17b0:	88 0f       	add	r24, r24
    17b2:	99 1f       	adc	r25, r25
    17b4:	82 0f       	add	r24, r18
    17b6:	93 1f       	adc	r25, r19
    17b8:	fc 01       	movw	r30, r24
    17ba:	ec 53       	subi	r30, 0x3C	; 60
    17bc:	ff 4f       	sbci	r31, 0xFF	; 255
    17be:	80 81       	ld	r24, Z
    17c0:	88 2f       	mov	r24, r24
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	9c 01       	movw	r18, r24
    17c6:	28 50       	subi	r18, 0x08	; 8
    17c8:	30 40       	sbci	r19, 0x00	; 0
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	02 2e       	mov	r0, r18
    17d0:	02 c0       	rjmp	.+4      	; 0x17d6 <DIO_Init+0x70c>
    17d2:	88 0f       	add	r24, r24
    17d4:	99 1f       	adc	r25, r25
    17d6:	0a 94       	dec	r0
    17d8:	e2 f7       	brpl	.-8      	; 0x17d2 <DIO_Init+0x708>
    17da:	84 2b       	or	r24, r20
    17dc:	8c 93       	st	X, r24
    17de:	7b c0       	rjmp	.+246    	; 0x18d6 <DIO_Init+0x80c>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 16) && (astrDIOConfigParameters[u8_i].enuPinNo < 24))	//if portc
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
    17e2:	28 2f       	mov	r18, r24
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	c9 01       	movw	r24, r18
    17e8:	88 0f       	add	r24, r24
    17ea:	99 1f       	adc	r25, r25
    17ec:	82 0f       	add	r24, r18
    17ee:	93 1f       	adc	r25, r19
    17f0:	fc 01       	movw	r30, r24
    17f2:	ec 53       	subi	r30, 0x3C	; 60
    17f4:	ff 4f       	sbci	r31, 0xFF	; 255
    17f6:	80 81       	ld	r24, Z
    17f8:	80 31       	cpi	r24, 0x10	; 16
    17fa:	80 f1       	brcs	.+96     	; 0x185c <DIO_Init+0x792>
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
    17fe:	28 2f       	mov	r18, r24
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	c9 01       	movw	r24, r18
    1804:	88 0f       	add	r24, r24
    1806:	99 1f       	adc	r25, r25
    1808:	82 0f       	add	r24, r18
    180a:	93 1f       	adc	r25, r19
    180c:	fc 01       	movw	r30, r24
    180e:	ec 53       	subi	r30, 0x3C	; 60
    1810:	ff 4f       	sbci	r31, 0xFF	; 255
    1812:	80 81       	ld	r24, Z
    1814:	88 31       	cpi	r24, 0x18	; 24
    1816:	10 f5       	brcc	.+68     	; 0x185c <DIO_Init+0x792>
			{
				SET_BIT(PORTC_R,(astrDIOConfigParameters[u8_i].enuPinNo - 16));
    1818:	a5 e3       	ldi	r26, 0x35	; 53
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	e5 e3       	ldi	r30, 0x35	; 53
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	48 2f       	mov	r20, r24
    1824:	89 81       	ldd	r24, Y+1	; 0x01
    1826:	28 2f       	mov	r18, r24
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	c9 01       	movw	r24, r18
    182c:	88 0f       	add	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	82 0f       	add	r24, r18
    1832:	93 1f       	adc	r25, r19
    1834:	fc 01       	movw	r30, r24
    1836:	ec 53       	subi	r30, 0x3C	; 60
    1838:	ff 4f       	sbci	r31, 0xFF	; 255
    183a:	80 81       	ld	r24, Z
    183c:	88 2f       	mov	r24, r24
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	9c 01       	movw	r18, r24
    1842:	20 51       	subi	r18, 0x10	; 16
    1844:	30 40       	sbci	r19, 0x00	; 0
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	02 2e       	mov	r0, r18
    184c:	02 c0       	rjmp	.+4      	; 0x1852 <DIO_Init+0x788>
    184e:	88 0f       	add	r24, r24
    1850:	99 1f       	adc	r25, r25
    1852:	0a 94       	dec	r0
    1854:	e2 f7       	brpl	.-8      	; 0x184e <DIO_Init+0x784>
    1856:	84 2b       	or	r24, r20
    1858:	8c 93       	st	X, r24
    185a:	3d c0       	rjmp	.+122    	; 0x18d6 <DIO_Init+0x80c>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 24) && (astrDIOConfigParameters[u8_i].enuPinNo < 32))	//if portd
    185c:	89 81       	ldd	r24, Y+1	; 0x01
    185e:	28 2f       	mov	r18, r24
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	c9 01       	movw	r24, r18
    1864:	88 0f       	add	r24, r24
    1866:	99 1f       	adc	r25, r25
    1868:	82 0f       	add	r24, r18
    186a:	93 1f       	adc	r25, r19
    186c:	fc 01       	movw	r30, r24
    186e:	ec 53       	subi	r30, 0x3C	; 60
    1870:	ff 4f       	sbci	r31, 0xFF	; 255
    1872:	80 81       	ld	r24, Z
    1874:	88 31       	cpi	r24, 0x18	; 24
    1876:	78 f1       	brcs	.+94     	; 0x18d6 <DIO_Init+0x80c>
    1878:	89 81       	ldd	r24, Y+1	; 0x01
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	c9 01       	movw	r24, r18
    1880:	88 0f       	add	r24, r24
    1882:	99 1f       	adc	r25, r25
    1884:	82 0f       	add	r24, r18
    1886:	93 1f       	adc	r25, r19
    1888:	fc 01       	movw	r30, r24
    188a:	ec 53       	subi	r30, 0x3C	; 60
    188c:	ff 4f       	sbci	r31, 0xFF	; 255
    188e:	80 81       	ld	r24, Z
    1890:	80 32       	cpi	r24, 0x20	; 32
    1892:	08 f5       	brcc	.+66     	; 0x18d6 <DIO_Init+0x80c>
			{
				SET_BIT(PORTD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
    1894:	a2 e3       	ldi	r26, 0x32	; 50
    1896:	b0 e0       	ldi	r27, 0x00	; 0
    1898:	e2 e3       	ldi	r30, 0x32	; 50
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	48 2f       	mov	r20, r24
    18a0:	89 81       	ldd	r24, Y+1	; 0x01
    18a2:	28 2f       	mov	r18, r24
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	c9 01       	movw	r24, r18
    18a8:	88 0f       	add	r24, r24
    18aa:	99 1f       	adc	r25, r25
    18ac:	82 0f       	add	r24, r18
    18ae:	93 1f       	adc	r25, r19
    18b0:	fc 01       	movw	r30, r24
    18b2:	ec 53       	subi	r30, 0x3C	; 60
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	80 81       	ld	r24, Z
    18b8:	88 2f       	mov	r24, r24
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	9c 01       	movw	r18, r24
    18be:	28 51       	subi	r18, 0x18	; 24
    18c0:	30 40       	sbci	r19, 0x00	; 0
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	02 2e       	mov	r0, r18
    18c8:	02 c0       	rjmp	.+4      	; 0x18ce <DIO_Init+0x804>
    18ca:	88 0f       	add	r24, r24
    18cc:	99 1f       	adc	r25, r25
    18ce:	0a 94       	dec	r0
    18d0:	e2 f7       	brpl	.-8      	; 0x18ca <DIO_Init+0x800>
    18d2:	84 2b       	or	r24, r20
    18d4:	8c 93       	st	X, r24
*************************************************************************************************/
enuErrorStatus_t DIO_Init(void)
{
	uint8_t u8_i;

	for(u8_i=0; u8_i<DIO_GROUPS_NO; u8_i++)
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	8f 5f       	subi	r24, 0xFF	; 255
    18da:	89 83       	std	Y+1, r24	; 0x01
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	8a 31       	cpi	r24, 0x1A	; 26
    18e0:	08 f4       	brcc	.+2      	; 0x18e4 <DIO_Init+0x81a>
    18e2:	fa cb       	rjmp	.-2060   	; 0x10d8 <DIO_Init+0xe>
				SET_BIT(PORTD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
			}//end else if
		}//end else if

	}//end for
    return E_OK;
    18e4:	81 e0       	ldi	r24, 0x01	; 1
}//end DIO_Init
    18e6:	0f 90       	pop	r0
    18e8:	cf 91       	pop	r28
    18ea:	df 91       	pop	r29
    18ec:	08 95       	ret

000018ee <DIO_Write>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to write a digital value into the selected DIO pin
*************************************************************************************************/
enuErrorStatus_t DIO_Write(uint8_t u8_GroupId, uint8_t u8_Data)
{
    18ee:	df 93       	push	r29
    18f0:	cf 93       	push	r28
    18f2:	00 d0       	rcall	.+0      	; 0x18f4 <DIO_Write+0x6>
    18f4:	cd b7       	in	r28, 0x3d	; 61
    18f6:	de b7       	in	r29, 0x3e	; 62
    18f8:	89 83       	std	Y+1, r24	; 0x01
    18fa:	6a 83       	std	Y+2, r22	; 0x02
//	if(DIO_Init() == E_ERROR)	return E_ERROR;
//	else{

		if (u8_Data == LOW)
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	88 23       	and	r24, r24
    1900:	09 f0       	breq	.+2      	; 0x1904 <DIO_Write+0x16>
    1902:	ed c0       	rjmp	.+474    	; 0x1ade <DIO_Write+0x1f0>
	    {
			if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 0) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 8))	//if porta
    1904:	89 81       	ldd	r24, Y+1	; 0x01
    1906:	28 2f       	mov	r18, r24
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	c9 01       	movw	r24, r18
    190c:	88 0f       	add	r24, r24
    190e:	99 1f       	adc	r25, r25
    1910:	82 0f       	add	r24, r18
    1912:	93 1f       	adc	r25, r19
    1914:	fc 01       	movw	r30, r24
    1916:	ec 53       	subi	r30, 0x3C	; 60
    1918:	ff 4f       	sbci	r31, 0xFF	; 255
    191a:	80 81       	ld	r24, Z
    191c:	88 30       	cpi	r24, 0x08	; 8
    191e:	00 f5       	brcc	.+64     	; 0x1960 <DIO_Write+0x72>
			{
				CLR_BIT(PORTA_R, astrDIOConfigParameters[u8_GroupId].enuPinNo);
    1920:	ab e3       	ldi	r26, 0x3B	; 59
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	eb e3       	ldi	r30, 0x3B	; 59
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	48 2f       	mov	r20, r24
    192c:	89 81       	ldd	r24, Y+1	; 0x01
    192e:	28 2f       	mov	r18, r24
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	c9 01       	movw	r24, r18
    1934:	88 0f       	add	r24, r24
    1936:	99 1f       	adc	r25, r25
    1938:	82 0f       	add	r24, r18
    193a:	93 1f       	adc	r25, r19
    193c:	fc 01       	movw	r30, r24
    193e:	ec 53       	subi	r30, 0x3C	; 60
    1940:	ff 4f       	sbci	r31, 0xFF	; 255
    1942:	80 81       	ld	r24, Z
    1944:	28 2f       	mov	r18, r24
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	81 e0       	ldi	r24, 0x01	; 1
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	02 2e       	mov	r0, r18
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <DIO_Write+0x66>
    1950:	88 0f       	add	r24, r24
    1952:	99 1f       	adc	r25, r25
    1954:	0a 94       	dec	r0
    1956:	e2 f7       	brpl	.-8      	; 0x1950 <DIO_Write+0x62>
    1958:	80 95       	com	r24
    195a:	84 23       	and	r24, r20
    195c:	8c 93       	st	X, r24
    195e:	a9 c1       	rjmp	.+850    	; 0x1cb2 <DIO_Write+0x3c4>
			}//end if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 8) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 16))	//if portb
    1960:	89 81       	ldd	r24, Y+1	; 0x01
    1962:	28 2f       	mov	r18, r24
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	c9 01       	movw	r24, r18
    1968:	88 0f       	add	r24, r24
    196a:	99 1f       	adc	r25, r25
    196c:	82 0f       	add	r24, r18
    196e:	93 1f       	adc	r25, r19
    1970:	fc 01       	movw	r30, r24
    1972:	ec 53       	subi	r30, 0x3C	; 60
    1974:	ff 4f       	sbci	r31, 0xFF	; 255
    1976:	80 81       	ld	r24, Z
    1978:	88 30       	cpi	r24, 0x08	; 8
    197a:	88 f1       	brcs	.+98     	; 0x19de <DIO_Write+0xf0>
    197c:	89 81       	ldd	r24, Y+1	; 0x01
    197e:	28 2f       	mov	r18, r24
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	c9 01       	movw	r24, r18
    1984:	88 0f       	add	r24, r24
    1986:	99 1f       	adc	r25, r25
    1988:	82 0f       	add	r24, r18
    198a:	93 1f       	adc	r25, r19
    198c:	fc 01       	movw	r30, r24
    198e:	ec 53       	subi	r30, 0x3C	; 60
    1990:	ff 4f       	sbci	r31, 0xFF	; 255
    1992:	80 81       	ld	r24, Z
    1994:	80 31       	cpi	r24, 0x10	; 16
    1996:	18 f5       	brcc	.+70     	; 0x19de <DIO_Write+0xf0>
			{
				CLR_BIT(PORTB_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 8));
    1998:	a8 e3       	ldi	r26, 0x38	; 56
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	e8 e3       	ldi	r30, 0x38	; 56
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	48 2f       	mov	r20, r24
    19a4:	89 81       	ldd	r24, Y+1	; 0x01
    19a6:	28 2f       	mov	r18, r24
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	c9 01       	movw	r24, r18
    19ac:	88 0f       	add	r24, r24
    19ae:	99 1f       	adc	r25, r25
    19b0:	82 0f       	add	r24, r18
    19b2:	93 1f       	adc	r25, r19
    19b4:	fc 01       	movw	r30, r24
    19b6:	ec 53       	subi	r30, 0x3C	; 60
    19b8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ba:	80 81       	ld	r24, Z
    19bc:	88 2f       	mov	r24, r24
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	9c 01       	movw	r18, r24
    19c2:	28 50       	subi	r18, 0x08	; 8
    19c4:	30 40       	sbci	r19, 0x00	; 0
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	02 2e       	mov	r0, r18
    19cc:	02 c0       	rjmp	.+4      	; 0x19d2 <DIO_Write+0xe4>
    19ce:	88 0f       	add	r24, r24
    19d0:	99 1f       	adc	r25, r25
    19d2:	0a 94       	dec	r0
    19d4:	e2 f7       	brpl	.-8      	; 0x19ce <DIO_Write+0xe0>
    19d6:	80 95       	com	r24
    19d8:	84 23       	and	r24, r20
    19da:	8c 93       	st	X, r24
    19dc:	6a c1       	rjmp	.+724    	; 0x1cb2 <DIO_Write+0x3c4>
			}//end else if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 16) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 24))	//if portc
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	28 2f       	mov	r18, r24
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	c9 01       	movw	r24, r18
    19e6:	88 0f       	add	r24, r24
    19e8:	99 1f       	adc	r25, r25
    19ea:	82 0f       	add	r24, r18
    19ec:	93 1f       	adc	r25, r19
    19ee:	fc 01       	movw	r30, r24
    19f0:	ec 53       	subi	r30, 0x3C	; 60
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	80 81       	ld	r24, Z
    19f6:	80 31       	cpi	r24, 0x10	; 16
    19f8:	88 f1       	brcs	.+98     	; 0x1a5c <DIO_Write+0x16e>
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
    19fc:	28 2f       	mov	r18, r24
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	c9 01       	movw	r24, r18
    1a02:	88 0f       	add	r24, r24
    1a04:	99 1f       	adc	r25, r25
    1a06:	82 0f       	add	r24, r18
    1a08:	93 1f       	adc	r25, r19
    1a0a:	fc 01       	movw	r30, r24
    1a0c:	ec 53       	subi	r30, 0x3C	; 60
    1a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a10:	80 81       	ld	r24, Z
    1a12:	88 31       	cpi	r24, 0x18	; 24
    1a14:	18 f5       	brcc	.+70     	; 0x1a5c <DIO_Write+0x16e>
			{
				CLR_BIT(PORTC_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 16));
    1a16:	a5 e3       	ldi	r26, 0x35	; 53
    1a18:	b0 e0       	ldi	r27, 0x00	; 0
    1a1a:	e5 e3       	ldi	r30, 0x35	; 53
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	80 81       	ld	r24, Z
    1a20:	48 2f       	mov	r20, r24
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
    1a24:	28 2f       	mov	r18, r24
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	c9 01       	movw	r24, r18
    1a2a:	88 0f       	add	r24, r24
    1a2c:	99 1f       	adc	r25, r25
    1a2e:	82 0f       	add	r24, r18
    1a30:	93 1f       	adc	r25, r19
    1a32:	fc 01       	movw	r30, r24
    1a34:	ec 53       	subi	r30, 0x3C	; 60
    1a36:	ff 4f       	sbci	r31, 0xFF	; 255
    1a38:	80 81       	ld	r24, Z
    1a3a:	88 2f       	mov	r24, r24
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	9c 01       	movw	r18, r24
    1a40:	20 51       	subi	r18, 0x10	; 16
    1a42:	30 40       	sbci	r19, 0x00	; 0
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	02 2e       	mov	r0, r18
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <DIO_Write+0x162>
    1a4c:	88 0f       	add	r24, r24
    1a4e:	99 1f       	adc	r25, r25
    1a50:	0a 94       	dec	r0
    1a52:	e2 f7       	brpl	.-8      	; 0x1a4c <DIO_Write+0x15e>
    1a54:	80 95       	com	r24
    1a56:	84 23       	and	r24, r20
    1a58:	8c 93       	st	X, r24
    1a5a:	2b c1       	rjmp	.+598    	; 0x1cb2 <DIO_Write+0x3c4>
			}//end else if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 24) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 32))	//if portd
    1a5c:	89 81       	ldd	r24, Y+1	; 0x01
    1a5e:	28 2f       	mov	r18, r24
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	c9 01       	movw	r24, r18
    1a64:	88 0f       	add	r24, r24
    1a66:	99 1f       	adc	r25, r25
    1a68:	82 0f       	add	r24, r18
    1a6a:	93 1f       	adc	r25, r19
    1a6c:	fc 01       	movw	r30, r24
    1a6e:	ec 53       	subi	r30, 0x3C	; 60
    1a70:	ff 4f       	sbci	r31, 0xFF	; 255
    1a72:	80 81       	ld	r24, Z
    1a74:	88 31       	cpi	r24, 0x18	; 24
    1a76:	08 f4       	brcc	.+2      	; 0x1a7a <DIO_Write+0x18c>
    1a78:	1c c1       	rjmp	.+568    	; 0x1cb2 <DIO_Write+0x3c4>
    1a7a:	89 81       	ldd	r24, Y+1	; 0x01
    1a7c:	28 2f       	mov	r18, r24
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	c9 01       	movw	r24, r18
    1a82:	88 0f       	add	r24, r24
    1a84:	99 1f       	adc	r25, r25
    1a86:	82 0f       	add	r24, r18
    1a88:	93 1f       	adc	r25, r19
    1a8a:	fc 01       	movw	r30, r24
    1a8c:	ec 53       	subi	r30, 0x3C	; 60
    1a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a90:	80 81       	ld	r24, Z
    1a92:	80 32       	cpi	r24, 0x20	; 32
    1a94:	08 f0       	brcs	.+2      	; 0x1a98 <DIO_Write+0x1aa>
    1a96:	0d c1       	rjmp	.+538    	; 0x1cb2 <DIO_Write+0x3c4>
			{
				CLR_BIT(PORTD_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 24));
    1a98:	a2 e3       	ldi	r26, 0x32	; 50
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	e2 e3       	ldi	r30, 0x32	; 50
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	80 81       	ld	r24, Z
    1aa2:	48 2f       	mov	r20, r24
    1aa4:	89 81       	ldd	r24, Y+1	; 0x01
    1aa6:	28 2f       	mov	r18, r24
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	c9 01       	movw	r24, r18
    1aac:	88 0f       	add	r24, r24
    1aae:	99 1f       	adc	r25, r25
    1ab0:	82 0f       	add	r24, r18
    1ab2:	93 1f       	adc	r25, r19
    1ab4:	fc 01       	movw	r30, r24
    1ab6:	ec 53       	subi	r30, 0x3C	; 60
    1ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aba:	80 81       	ld	r24, Z
    1abc:	88 2f       	mov	r24, r24
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	9c 01       	movw	r18, r24
    1ac2:	28 51       	subi	r18, 0x18	; 24
    1ac4:	30 40       	sbci	r19, 0x00	; 0
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	02 2e       	mov	r0, r18
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <DIO_Write+0x1e4>
    1ace:	88 0f       	add	r24, r24
    1ad0:	99 1f       	adc	r25, r25
    1ad2:	0a 94       	dec	r0
    1ad4:	e2 f7       	brpl	.-8      	; 0x1ace <DIO_Write+0x1e0>
    1ad6:	80 95       	com	r24
    1ad8:	84 23       	and	r24, r20
    1ada:	8c 93       	st	X, r24
    1adc:	ea c0       	rjmp	.+468    	; 0x1cb2 <DIO_Write+0x3c4>
			}//end else if
	    }//end if

	    else if(u8_Data == HIGH)
    1ade:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae0:	81 30       	cpi	r24, 0x01	; 1
    1ae2:	09 f0       	breq	.+2      	; 0x1ae6 <DIO_Write+0x1f8>
    1ae4:	e6 c0       	rjmp	.+460    	; 0x1cb2 <DIO_Write+0x3c4>
	    {
			if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 0) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 8))	//if porta
    1ae6:	89 81       	ldd	r24, Y+1	; 0x01
    1ae8:	28 2f       	mov	r18, r24
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	c9 01       	movw	r24, r18
    1aee:	88 0f       	add	r24, r24
    1af0:	99 1f       	adc	r25, r25
    1af2:	82 0f       	add	r24, r18
    1af4:	93 1f       	adc	r25, r19
    1af6:	fc 01       	movw	r30, r24
    1af8:	ec 53       	subi	r30, 0x3C	; 60
    1afa:	ff 4f       	sbci	r31, 0xFF	; 255
    1afc:	80 81       	ld	r24, Z
    1afe:	88 30       	cpi	r24, 0x08	; 8
    1b00:	f8 f4       	brcc	.+62     	; 0x1b40 <DIO_Write+0x252>
			{
				SET_BIT(PORTA_R, astrDIOConfigParameters[u8_GroupId].enuPinNo);
    1b02:	ab e3       	ldi	r26, 0x3B	; 59
    1b04:	b0 e0       	ldi	r27, 0x00	; 0
    1b06:	eb e3       	ldi	r30, 0x3B	; 59
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	48 2f       	mov	r20, r24
    1b0e:	89 81       	ldd	r24, Y+1	; 0x01
    1b10:	28 2f       	mov	r18, r24
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	c9 01       	movw	r24, r18
    1b16:	88 0f       	add	r24, r24
    1b18:	99 1f       	adc	r25, r25
    1b1a:	82 0f       	add	r24, r18
    1b1c:	93 1f       	adc	r25, r19
    1b1e:	fc 01       	movw	r30, r24
    1b20:	ec 53       	subi	r30, 0x3C	; 60
    1b22:	ff 4f       	sbci	r31, 0xFF	; 255
    1b24:	80 81       	ld	r24, Z
    1b26:	28 2f       	mov	r18, r24
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	02 2e       	mov	r0, r18
    1b30:	02 c0       	rjmp	.+4      	; 0x1b36 <DIO_Write+0x248>
    1b32:	88 0f       	add	r24, r24
    1b34:	99 1f       	adc	r25, r25
    1b36:	0a 94       	dec	r0
    1b38:	e2 f7       	brpl	.-8      	; 0x1b32 <DIO_Write+0x244>
    1b3a:	84 2b       	or	r24, r20
    1b3c:	8c 93       	st	X, r24
    1b3e:	b9 c0       	rjmp	.+370    	; 0x1cb2 <DIO_Write+0x3c4>
			}//end if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 8) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 16))	//if portb
    1b40:	89 81       	ldd	r24, Y+1	; 0x01
    1b42:	28 2f       	mov	r18, r24
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	c9 01       	movw	r24, r18
    1b48:	88 0f       	add	r24, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	82 0f       	add	r24, r18
    1b4e:	93 1f       	adc	r25, r19
    1b50:	fc 01       	movw	r30, r24
    1b52:	ec 53       	subi	r30, 0x3C	; 60
    1b54:	ff 4f       	sbci	r31, 0xFF	; 255
    1b56:	80 81       	ld	r24, Z
    1b58:	88 30       	cpi	r24, 0x08	; 8
    1b5a:	80 f1       	brcs	.+96     	; 0x1bbc <DIO_Write+0x2ce>
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01
    1b5e:	28 2f       	mov	r18, r24
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	c9 01       	movw	r24, r18
    1b64:	88 0f       	add	r24, r24
    1b66:	99 1f       	adc	r25, r25
    1b68:	82 0f       	add	r24, r18
    1b6a:	93 1f       	adc	r25, r19
    1b6c:	fc 01       	movw	r30, r24
    1b6e:	ec 53       	subi	r30, 0x3C	; 60
    1b70:	ff 4f       	sbci	r31, 0xFF	; 255
    1b72:	80 81       	ld	r24, Z
    1b74:	80 31       	cpi	r24, 0x10	; 16
    1b76:	10 f5       	brcc	.+68     	; 0x1bbc <DIO_Write+0x2ce>
			{
				SET_BIT(PORTB_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 8));
    1b78:	a8 e3       	ldi	r26, 0x38	; 56
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	e8 e3       	ldi	r30, 0x38	; 56
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	80 81       	ld	r24, Z
    1b82:	48 2f       	mov	r20, r24
    1b84:	89 81       	ldd	r24, Y+1	; 0x01
    1b86:	28 2f       	mov	r18, r24
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	c9 01       	movw	r24, r18
    1b8c:	88 0f       	add	r24, r24
    1b8e:	99 1f       	adc	r25, r25
    1b90:	82 0f       	add	r24, r18
    1b92:	93 1f       	adc	r25, r19
    1b94:	fc 01       	movw	r30, r24
    1b96:	ec 53       	subi	r30, 0x3C	; 60
    1b98:	ff 4f       	sbci	r31, 0xFF	; 255
    1b9a:	80 81       	ld	r24, Z
    1b9c:	88 2f       	mov	r24, r24
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	9c 01       	movw	r18, r24
    1ba2:	28 50       	subi	r18, 0x08	; 8
    1ba4:	30 40       	sbci	r19, 0x00	; 0
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	02 2e       	mov	r0, r18
    1bac:	02 c0       	rjmp	.+4      	; 0x1bb2 <DIO_Write+0x2c4>
    1bae:	88 0f       	add	r24, r24
    1bb0:	99 1f       	adc	r25, r25
    1bb2:	0a 94       	dec	r0
    1bb4:	e2 f7       	brpl	.-8      	; 0x1bae <DIO_Write+0x2c0>
    1bb6:	84 2b       	or	r24, r20
    1bb8:	8c 93       	st	X, r24
    1bba:	7b c0       	rjmp	.+246    	; 0x1cb2 <DIO_Write+0x3c4>
			}//end else if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 16) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 24))	//if portc
    1bbc:	89 81       	ldd	r24, Y+1	; 0x01
    1bbe:	28 2f       	mov	r18, r24
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	c9 01       	movw	r24, r18
    1bc4:	88 0f       	add	r24, r24
    1bc6:	99 1f       	adc	r25, r25
    1bc8:	82 0f       	add	r24, r18
    1bca:	93 1f       	adc	r25, r19
    1bcc:	fc 01       	movw	r30, r24
    1bce:	ec 53       	subi	r30, 0x3C	; 60
    1bd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd2:	80 81       	ld	r24, Z
    1bd4:	80 31       	cpi	r24, 0x10	; 16
    1bd6:	80 f1       	brcs	.+96     	; 0x1c38 <DIO_Write+0x34a>
    1bd8:	89 81       	ldd	r24, Y+1	; 0x01
    1bda:	28 2f       	mov	r18, r24
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	c9 01       	movw	r24, r18
    1be0:	88 0f       	add	r24, r24
    1be2:	99 1f       	adc	r25, r25
    1be4:	82 0f       	add	r24, r18
    1be6:	93 1f       	adc	r25, r19
    1be8:	fc 01       	movw	r30, r24
    1bea:	ec 53       	subi	r30, 0x3C	; 60
    1bec:	ff 4f       	sbci	r31, 0xFF	; 255
    1bee:	80 81       	ld	r24, Z
    1bf0:	88 31       	cpi	r24, 0x18	; 24
    1bf2:	10 f5       	brcc	.+68     	; 0x1c38 <DIO_Write+0x34a>
			{
				SET_BIT(PORTC_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 16));
    1bf4:	a5 e3       	ldi	r26, 0x35	; 53
    1bf6:	b0 e0       	ldi	r27, 0x00	; 0
    1bf8:	e5 e3       	ldi	r30, 0x35	; 53
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	48 2f       	mov	r20, r24
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	28 2f       	mov	r18, r24
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	c9 01       	movw	r24, r18
    1c08:	88 0f       	add	r24, r24
    1c0a:	99 1f       	adc	r25, r25
    1c0c:	82 0f       	add	r24, r18
    1c0e:	93 1f       	adc	r25, r19
    1c10:	fc 01       	movw	r30, r24
    1c12:	ec 53       	subi	r30, 0x3C	; 60
    1c14:	ff 4f       	sbci	r31, 0xFF	; 255
    1c16:	80 81       	ld	r24, Z
    1c18:	88 2f       	mov	r24, r24
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	9c 01       	movw	r18, r24
    1c1e:	20 51       	subi	r18, 0x10	; 16
    1c20:	30 40       	sbci	r19, 0x00	; 0
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	02 2e       	mov	r0, r18
    1c28:	02 c0       	rjmp	.+4      	; 0x1c2e <DIO_Write+0x340>
    1c2a:	88 0f       	add	r24, r24
    1c2c:	99 1f       	adc	r25, r25
    1c2e:	0a 94       	dec	r0
    1c30:	e2 f7       	brpl	.-8      	; 0x1c2a <DIO_Write+0x33c>
    1c32:	84 2b       	or	r24, r20
    1c34:	8c 93       	st	X, r24
    1c36:	3d c0       	rjmp	.+122    	; 0x1cb2 <DIO_Write+0x3c4>
			}//end else if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 24) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 32))	//if portd
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
    1c3a:	28 2f       	mov	r18, r24
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	c9 01       	movw	r24, r18
    1c40:	88 0f       	add	r24, r24
    1c42:	99 1f       	adc	r25, r25
    1c44:	82 0f       	add	r24, r18
    1c46:	93 1f       	adc	r25, r19
    1c48:	fc 01       	movw	r30, r24
    1c4a:	ec 53       	subi	r30, 0x3C	; 60
    1c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4e:	80 81       	ld	r24, Z
    1c50:	88 31       	cpi	r24, 0x18	; 24
    1c52:	78 f1       	brcs	.+94     	; 0x1cb2 <DIO_Write+0x3c4>
    1c54:	89 81       	ldd	r24, Y+1	; 0x01
    1c56:	28 2f       	mov	r18, r24
    1c58:	30 e0       	ldi	r19, 0x00	; 0
    1c5a:	c9 01       	movw	r24, r18
    1c5c:	88 0f       	add	r24, r24
    1c5e:	99 1f       	adc	r25, r25
    1c60:	82 0f       	add	r24, r18
    1c62:	93 1f       	adc	r25, r19
    1c64:	fc 01       	movw	r30, r24
    1c66:	ec 53       	subi	r30, 0x3C	; 60
    1c68:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6a:	80 81       	ld	r24, Z
    1c6c:	80 32       	cpi	r24, 0x20	; 32
    1c6e:	08 f5       	brcc	.+66     	; 0x1cb2 <DIO_Write+0x3c4>
			{
				SET_BIT(PORTD_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 24));
    1c70:	a2 e3       	ldi	r26, 0x32	; 50
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	e2 e3       	ldi	r30, 0x32	; 50
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	48 2f       	mov	r20, r24
    1c7c:	89 81       	ldd	r24, Y+1	; 0x01
    1c7e:	28 2f       	mov	r18, r24
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	c9 01       	movw	r24, r18
    1c84:	88 0f       	add	r24, r24
    1c86:	99 1f       	adc	r25, r25
    1c88:	82 0f       	add	r24, r18
    1c8a:	93 1f       	adc	r25, r19
    1c8c:	fc 01       	movw	r30, r24
    1c8e:	ec 53       	subi	r30, 0x3C	; 60
    1c90:	ff 4f       	sbci	r31, 0xFF	; 255
    1c92:	80 81       	ld	r24, Z
    1c94:	88 2f       	mov	r24, r24
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	9c 01       	movw	r18, r24
    1c9a:	28 51       	subi	r18, 0x18	; 24
    1c9c:	30 40       	sbci	r19, 0x00	; 0
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	02 2e       	mov	r0, r18
    1ca4:	02 c0       	rjmp	.+4      	; 0x1caa <DIO_Write+0x3bc>
    1ca6:	88 0f       	add	r24, r24
    1ca8:	99 1f       	adc	r25, r25
    1caa:	0a 94       	dec	r0
    1cac:	e2 f7       	brpl	.-8      	; 0x1ca6 <DIO_Write+0x3b8>
    1cae:	84 2b       	or	r24, r20
    1cb0:	8c 93       	st	X, r24
			}//end else if
	    }//end else if
		return E_OK;
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
}//end DIO_write
    1cb4:	0f 90       	pop	r0
    1cb6:	0f 90       	pop	r0
    1cb8:	cf 91       	pop	r28
    1cba:	df 91       	pop	r29
    1cbc:	08 95       	ret

00001cbe <DIO_Read>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to read a digital value from the selected DIO pin
*************************************************************************************************/
enuErrorStatus_t DIO_Read(uint8_t u8_GroupId, uint8_t* pu8_Data)
{
    1cbe:	df 93       	push	r29
    1cc0:	cf 93       	push	r28
    1cc2:	00 d0       	rcall	.+0      	; 0x1cc4 <DIO_Read+0x6>
    1cc4:	00 d0       	rcall	.+0      	; 0x1cc6 <DIO_Read+0x8>
    1cc6:	cd b7       	in	r28, 0x3d	; 61
    1cc8:	de b7       	in	r29, 0x3e	; 62
    1cca:	89 83       	std	Y+1, r24	; 0x01
    1ccc:	7b 83       	std	Y+3, r23	; 0x03
    1cce:	6a 83       	std	Y+2, r22	; 0x02
	if(pu8_Data == NULL_PTR)		return E_ERROR;
    1cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd2:	9b 81       	ldd	r25, Y+3	; 0x03
    1cd4:	00 97       	sbiw	r24, 0x00	; 0
    1cd6:	11 f4       	brne	.+4      	; 0x1cdc <DIO_Read+0x1e>
    1cd8:	1c 82       	std	Y+4, r1	; 0x04
    1cda:	e8 c0       	rjmp	.+464    	; 0x1eac <DIO_Read+0x1ee>
	else
	{
		if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 0) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 8))	//if porta
    1cdc:	89 81       	ldd	r24, Y+1	; 0x01
    1cde:	28 2f       	mov	r18, r24
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	c9 01       	movw	r24, r18
    1ce4:	88 0f       	add	r24, r24
    1ce6:	99 1f       	adc	r25, r25
    1ce8:	82 0f       	add	r24, r18
    1cea:	93 1f       	adc	r25, r19
    1cec:	fc 01       	movw	r30, r24
    1cee:	ec 53       	subi	r30, 0x3C	; 60
    1cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf2:	80 81       	ld	r24, Z
    1cf4:	88 30       	cpi	r24, 0x08	; 8
    1cf6:	f8 f4       	brcc	.+62     	; 0x1d36 <DIO_Read+0x78>
		{
			*pu8_Data = GET_BIT(PINA_R, astrDIOConfigParameters[u8_GroupId].enuPinNo);
    1cf8:	e9 e3       	ldi	r30, 0x39	; 57
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	80 81       	ld	r24, Z
    1cfe:	48 2f       	mov	r20, r24
    1d00:	89 81       	ldd	r24, Y+1	; 0x01
    1d02:	28 2f       	mov	r18, r24
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	c9 01       	movw	r24, r18
    1d08:	88 0f       	add	r24, r24
    1d0a:	99 1f       	adc	r25, r25
    1d0c:	82 0f       	add	r24, r18
    1d0e:	93 1f       	adc	r25, r19
    1d10:	fc 01       	movw	r30, r24
    1d12:	ec 53       	subi	r30, 0x3C	; 60
    1d14:	ff 4f       	sbci	r31, 0xFF	; 255
    1d16:	80 81       	ld	r24, Z
    1d18:	28 2f       	mov	r18, r24
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	02 2e       	mov	r0, r18
    1d22:	02 c0       	rjmp	.+4      	; 0x1d28 <DIO_Read+0x6a>
    1d24:	88 0f       	add	r24, r24
    1d26:	99 1f       	adc	r25, r25
    1d28:	0a 94       	dec	r0
    1d2a:	e2 f7       	brpl	.-8      	; 0x1d24 <DIO_Read+0x66>
    1d2c:	84 23       	and	r24, r20
    1d2e:	ea 81       	ldd	r30, Y+2	; 0x02
    1d30:	fb 81       	ldd	r31, Y+3	; 0x03
    1d32:	80 83       	st	Z, r24
    1d34:	b9 c0       	rjmp	.+370    	; 0x1ea8 <DIO_Read+0x1ea>
		}//end if
		else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 8) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 16))	//if portb
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	28 2f       	mov	r18, r24
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	c9 01       	movw	r24, r18
    1d3e:	88 0f       	add	r24, r24
    1d40:	99 1f       	adc	r25, r25
    1d42:	82 0f       	add	r24, r18
    1d44:	93 1f       	adc	r25, r19
    1d46:	fc 01       	movw	r30, r24
    1d48:	ec 53       	subi	r30, 0x3C	; 60
    1d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4c:	80 81       	ld	r24, Z
    1d4e:	88 30       	cpi	r24, 0x08	; 8
    1d50:	80 f1       	brcs	.+96     	; 0x1db2 <DIO_Read+0xf4>
    1d52:	89 81       	ldd	r24, Y+1	; 0x01
    1d54:	28 2f       	mov	r18, r24
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	c9 01       	movw	r24, r18
    1d5a:	88 0f       	add	r24, r24
    1d5c:	99 1f       	adc	r25, r25
    1d5e:	82 0f       	add	r24, r18
    1d60:	93 1f       	adc	r25, r19
    1d62:	fc 01       	movw	r30, r24
    1d64:	ec 53       	subi	r30, 0x3C	; 60
    1d66:	ff 4f       	sbci	r31, 0xFF	; 255
    1d68:	80 81       	ld	r24, Z
    1d6a:	80 31       	cpi	r24, 0x10	; 16
    1d6c:	10 f5       	brcc	.+68     	; 0x1db2 <DIO_Read+0xf4>
		{
			*pu8_Data = GET_BIT(PINB_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 8));
    1d6e:	e6 e3       	ldi	r30, 0x36	; 54
    1d70:	f0 e0       	ldi	r31, 0x00	; 0
    1d72:	80 81       	ld	r24, Z
    1d74:	48 2f       	mov	r20, r24
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	28 2f       	mov	r18, r24
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	c9 01       	movw	r24, r18
    1d7e:	88 0f       	add	r24, r24
    1d80:	99 1f       	adc	r25, r25
    1d82:	82 0f       	add	r24, r18
    1d84:	93 1f       	adc	r25, r19
    1d86:	fc 01       	movw	r30, r24
    1d88:	ec 53       	subi	r30, 0x3C	; 60
    1d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8c:	80 81       	ld	r24, Z
    1d8e:	88 2f       	mov	r24, r24
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	9c 01       	movw	r18, r24
    1d94:	28 50       	subi	r18, 0x08	; 8
    1d96:	30 40       	sbci	r19, 0x00	; 0
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	02 2e       	mov	r0, r18
    1d9e:	02 c0       	rjmp	.+4      	; 0x1da4 <DIO_Read+0xe6>
    1da0:	88 0f       	add	r24, r24
    1da2:	99 1f       	adc	r25, r25
    1da4:	0a 94       	dec	r0
    1da6:	e2 f7       	brpl	.-8      	; 0x1da0 <DIO_Read+0xe2>
    1da8:	84 23       	and	r24, r20
    1daa:	ea 81       	ldd	r30, Y+2	; 0x02
    1dac:	fb 81       	ldd	r31, Y+3	; 0x03
    1dae:	80 83       	st	Z, r24
    1db0:	7b c0       	rjmp	.+246    	; 0x1ea8 <DIO_Read+0x1ea>
		}//end else if
		else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 16) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 24))	//if portc
    1db2:	89 81       	ldd	r24, Y+1	; 0x01
    1db4:	28 2f       	mov	r18, r24
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	c9 01       	movw	r24, r18
    1dba:	88 0f       	add	r24, r24
    1dbc:	99 1f       	adc	r25, r25
    1dbe:	82 0f       	add	r24, r18
    1dc0:	93 1f       	adc	r25, r19
    1dc2:	fc 01       	movw	r30, r24
    1dc4:	ec 53       	subi	r30, 0x3C	; 60
    1dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc8:	80 81       	ld	r24, Z
    1dca:	80 31       	cpi	r24, 0x10	; 16
    1dcc:	80 f1       	brcs	.+96     	; 0x1e2e <DIO_Read+0x170>
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	28 2f       	mov	r18, r24
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	c9 01       	movw	r24, r18
    1dd6:	88 0f       	add	r24, r24
    1dd8:	99 1f       	adc	r25, r25
    1dda:	82 0f       	add	r24, r18
    1ddc:	93 1f       	adc	r25, r19
    1dde:	fc 01       	movw	r30, r24
    1de0:	ec 53       	subi	r30, 0x3C	; 60
    1de2:	ff 4f       	sbci	r31, 0xFF	; 255
    1de4:	80 81       	ld	r24, Z
    1de6:	88 31       	cpi	r24, 0x18	; 24
    1de8:	10 f5       	brcc	.+68     	; 0x1e2e <DIO_Read+0x170>
		{
			*pu8_Data = GET_BIT(PINC_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 16));
    1dea:	e3 e3       	ldi	r30, 0x33	; 51
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	80 81       	ld	r24, Z
    1df0:	48 2f       	mov	r20, r24
    1df2:	89 81       	ldd	r24, Y+1	; 0x01
    1df4:	28 2f       	mov	r18, r24
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	c9 01       	movw	r24, r18
    1dfa:	88 0f       	add	r24, r24
    1dfc:	99 1f       	adc	r25, r25
    1dfe:	82 0f       	add	r24, r18
    1e00:	93 1f       	adc	r25, r19
    1e02:	fc 01       	movw	r30, r24
    1e04:	ec 53       	subi	r30, 0x3C	; 60
    1e06:	ff 4f       	sbci	r31, 0xFF	; 255
    1e08:	80 81       	ld	r24, Z
    1e0a:	88 2f       	mov	r24, r24
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	9c 01       	movw	r18, r24
    1e10:	20 51       	subi	r18, 0x10	; 16
    1e12:	30 40       	sbci	r19, 0x00	; 0
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	02 2e       	mov	r0, r18
    1e1a:	02 c0       	rjmp	.+4      	; 0x1e20 <DIO_Read+0x162>
    1e1c:	88 0f       	add	r24, r24
    1e1e:	99 1f       	adc	r25, r25
    1e20:	0a 94       	dec	r0
    1e22:	e2 f7       	brpl	.-8      	; 0x1e1c <DIO_Read+0x15e>
    1e24:	84 23       	and	r24, r20
    1e26:	ea 81       	ldd	r30, Y+2	; 0x02
    1e28:	fb 81       	ldd	r31, Y+3	; 0x03
    1e2a:	80 83       	st	Z, r24
    1e2c:	3d c0       	rjmp	.+122    	; 0x1ea8 <DIO_Read+0x1ea>
		}//end else if
		else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 24) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 32))	//if portd
    1e2e:	89 81       	ldd	r24, Y+1	; 0x01
    1e30:	28 2f       	mov	r18, r24
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	c9 01       	movw	r24, r18
    1e36:	88 0f       	add	r24, r24
    1e38:	99 1f       	adc	r25, r25
    1e3a:	82 0f       	add	r24, r18
    1e3c:	93 1f       	adc	r25, r19
    1e3e:	fc 01       	movw	r30, r24
    1e40:	ec 53       	subi	r30, 0x3C	; 60
    1e42:	ff 4f       	sbci	r31, 0xFF	; 255
    1e44:	80 81       	ld	r24, Z
    1e46:	88 31       	cpi	r24, 0x18	; 24
    1e48:	78 f1       	brcs	.+94     	; 0x1ea8 <DIO_Read+0x1ea>
    1e4a:	89 81       	ldd	r24, Y+1	; 0x01
    1e4c:	28 2f       	mov	r18, r24
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	c9 01       	movw	r24, r18
    1e52:	88 0f       	add	r24, r24
    1e54:	99 1f       	adc	r25, r25
    1e56:	82 0f       	add	r24, r18
    1e58:	93 1f       	adc	r25, r19
    1e5a:	fc 01       	movw	r30, r24
    1e5c:	ec 53       	subi	r30, 0x3C	; 60
    1e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e60:	80 81       	ld	r24, Z
    1e62:	80 32       	cpi	r24, 0x20	; 32
    1e64:	08 f5       	brcc	.+66     	; 0x1ea8 <DIO_Read+0x1ea>
		{
			*pu8_Data = GET_BIT(PIND_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 24));
    1e66:	e0 e3       	ldi	r30, 0x30	; 48
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	48 2f       	mov	r20, r24
    1e6e:	89 81       	ldd	r24, Y+1	; 0x01
    1e70:	28 2f       	mov	r18, r24
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	c9 01       	movw	r24, r18
    1e76:	88 0f       	add	r24, r24
    1e78:	99 1f       	adc	r25, r25
    1e7a:	82 0f       	add	r24, r18
    1e7c:	93 1f       	adc	r25, r19
    1e7e:	fc 01       	movw	r30, r24
    1e80:	ec 53       	subi	r30, 0x3C	; 60
    1e82:	ff 4f       	sbci	r31, 0xFF	; 255
    1e84:	80 81       	ld	r24, Z
    1e86:	88 2f       	mov	r24, r24
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	9c 01       	movw	r18, r24
    1e8c:	28 51       	subi	r18, 0x18	; 24
    1e8e:	30 40       	sbci	r19, 0x00	; 0
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	02 2e       	mov	r0, r18
    1e96:	02 c0       	rjmp	.+4      	; 0x1e9c <DIO_Read+0x1de>
    1e98:	88 0f       	add	r24, r24
    1e9a:	99 1f       	adc	r25, r25
    1e9c:	0a 94       	dec	r0
    1e9e:	e2 f7       	brpl	.-8      	; 0x1e98 <DIO_Read+0x1da>
    1ea0:	84 23       	and	r24, r20
    1ea2:	ea 81       	ldd	r30, Y+2	; 0x02
    1ea4:	fb 81       	ldd	r31, Y+3	; 0x03
    1ea6:	80 83       	st	Z, r24
		}//end else if

		return E_OK;
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	8c 83       	std	Y+4, r24	; 0x04
    1eac:	8c 81       	ldd	r24, Y+4	; 0x04
	}//end else
}//end DIO_Read
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	0f 90       	pop	r0
    1eb4:	0f 90       	pop	r0
    1eb6:	cf 91       	pop	r28
    1eb8:	df 91       	pop	r29
    1eba:	08 95       	ret

00001ebc <DIO_toggle>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to toggle the selected DIO pin
*************************************************************************************************/
enuErrorStatus_t DIO_toggle(uint8_t u8_GroupId)
{
    1ebc:	df 93       	push	r29
    1ebe:	cf 93       	push	r28
    1ec0:	0f 92       	push	r0
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
    1ec6:	89 83       	std	Y+1, r24	; 0x01
	if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 0) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 8))	//if porta
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
    1eca:	28 2f       	mov	r18, r24
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	c9 01       	movw	r24, r18
    1ed0:	88 0f       	add	r24, r24
    1ed2:	99 1f       	adc	r25, r25
    1ed4:	82 0f       	add	r24, r18
    1ed6:	93 1f       	adc	r25, r19
    1ed8:	fc 01       	movw	r30, r24
    1eda:	ec 53       	subi	r30, 0x3C	; 60
    1edc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ede:	80 81       	ld	r24, Z
    1ee0:	88 30       	cpi	r24, 0x08	; 8
    1ee2:	f8 f4       	brcc	.+62     	; 0x1f22 <DIO_toggle+0x66>
	{
		TOGGLE_BIT(PORTA_R, astrDIOConfigParameters[u8_GroupId].enuPinNo);
    1ee4:	ab e3       	ldi	r26, 0x3B	; 59
    1ee6:	b0 e0       	ldi	r27, 0x00	; 0
    1ee8:	eb e3       	ldi	r30, 0x3B	; 59
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 81       	ld	r24, Z
    1eee:	48 2f       	mov	r20, r24
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
    1ef2:	28 2f       	mov	r18, r24
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	c9 01       	movw	r24, r18
    1ef8:	88 0f       	add	r24, r24
    1efa:	99 1f       	adc	r25, r25
    1efc:	82 0f       	add	r24, r18
    1efe:	93 1f       	adc	r25, r19
    1f00:	fc 01       	movw	r30, r24
    1f02:	ec 53       	subi	r30, 0x3C	; 60
    1f04:	ff 4f       	sbci	r31, 0xFF	; 255
    1f06:	80 81       	ld	r24, Z
    1f08:	28 2f       	mov	r18, r24
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	02 2e       	mov	r0, r18
    1f12:	02 c0       	rjmp	.+4      	; 0x1f18 <DIO_toggle+0x5c>
    1f14:	88 0f       	add	r24, r24
    1f16:	99 1f       	adc	r25, r25
    1f18:	0a 94       	dec	r0
    1f1a:	e2 f7       	brpl	.-8      	; 0x1f14 <DIO_toggle+0x58>
    1f1c:	84 27       	eor	r24, r20
    1f1e:	8c 93       	st	X, r24
    1f20:	b9 c0       	rjmp	.+370    	; 0x2094 <DIO_toggle+0x1d8>
	}//end if
	else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 8) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 16))	//if portb
    1f22:	89 81       	ldd	r24, Y+1	; 0x01
    1f24:	28 2f       	mov	r18, r24
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	c9 01       	movw	r24, r18
    1f2a:	88 0f       	add	r24, r24
    1f2c:	99 1f       	adc	r25, r25
    1f2e:	82 0f       	add	r24, r18
    1f30:	93 1f       	adc	r25, r19
    1f32:	fc 01       	movw	r30, r24
    1f34:	ec 53       	subi	r30, 0x3C	; 60
    1f36:	ff 4f       	sbci	r31, 0xFF	; 255
    1f38:	80 81       	ld	r24, Z
    1f3a:	88 30       	cpi	r24, 0x08	; 8
    1f3c:	80 f1       	brcs	.+96     	; 0x1f9e <DIO_toggle+0xe2>
    1f3e:	89 81       	ldd	r24, Y+1	; 0x01
    1f40:	28 2f       	mov	r18, r24
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	c9 01       	movw	r24, r18
    1f46:	88 0f       	add	r24, r24
    1f48:	99 1f       	adc	r25, r25
    1f4a:	82 0f       	add	r24, r18
    1f4c:	93 1f       	adc	r25, r19
    1f4e:	fc 01       	movw	r30, r24
    1f50:	ec 53       	subi	r30, 0x3C	; 60
    1f52:	ff 4f       	sbci	r31, 0xFF	; 255
    1f54:	80 81       	ld	r24, Z
    1f56:	80 31       	cpi	r24, 0x10	; 16
    1f58:	10 f5       	brcc	.+68     	; 0x1f9e <DIO_toggle+0xe2>
	{
		TOGGLE_BIT(PORTB_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 8));
    1f5a:	a8 e3       	ldi	r26, 0x38	; 56
    1f5c:	b0 e0       	ldi	r27, 0x00	; 0
    1f5e:	e8 e3       	ldi	r30, 0x38	; 56
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	80 81       	ld	r24, Z
    1f64:	48 2f       	mov	r20, r24
    1f66:	89 81       	ldd	r24, Y+1	; 0x01
    1f68:	28 2f       	mov	r18, r24
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	c9 01       	movw	r24, r18
    1f6e:	88 0f       	add	r24, r24
    1f70:	99 1f       	adc	r25, r25
    1f72:	82 0f       	add	r24, r18
    1f74:	93 1f       	adc	r25, r19
    1f76:	fc 01       	movw	r30, r24
    1f78:	ec 53       	subi	r30, 0x3C	; 60
    1f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7c:	80 81       	ld	r24, Z
    1f7e:	88 2f       	mov	r24, r24
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	9c 01       	movw	r18, r24
    1f84:	28 50       	subi	r18, 0x08	; 8
    1f86:	30 40       	sbci	r19, 0x00	; 0
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	02 2e       	mov	r0, r18
    1f8e:	02 c0       	rjmp	.+4      	; 0x1f94 <DIO_toggle+0xd8>
    1f90:	88 0f       	add	r24, r24
    1f92:	99 1f       	adc	r25, r25
    1f94:	0a 94       	dec	r0
    1f96:	e2 f7       	brpl	.-8      	; 0x1f90 <DIO_toggle+0xd4>
    1f98:	84 27       	eor	r24, r20
    1f9a:	8c 93       	st	X, r24
    1f9c:	7b c0       	rjmp	.+246    	; 0x2094 <DIO_toggle+0x1d8>
	}//end else if
	else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 16) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 24))	//if portc
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	28 2f       	mov	r18, r24
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	c9 01       	movw	r24, r18
    1fa6:	88 0f       	add	r24, r24
    1fa8:	99 1f       	adc	r25, r25
    1faa:	82 0f       	add	r24, r18
    1fac:	93 1f       	adc	r25, r19
    1fae:	fc 01       	movw	r30, r24
    1fb0:	ec 53       	subi	r30, 0x3C	; 60
    1fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb4:	80 81       	ld	r24, Z
    1fb6:	80 31       	cpi	r24, 0x10	; 16
    1fb8:	80 f1       	brcs	.+96     	; 0x201a <DIO_toggle+0x15e>
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
    1fbc:	28 2f       	mov	r18, r24
    1fbe:	30 e0       	ldi	r19, 0x00	; 0
    1fc0:	c9 01       	movw	r24, r18
    1fc2:	88 0f       	add	r24, r24
    1fc4:	99 1f       	adc	r25, r25
    1fc6:	82 0f       	add	r24, r18
    1fc8:	93 1f       	adc	r25, r19
    1fca:	fc 01       	movw	r30, r24
    1fcc:	ec 53       	subi	r30, 0x3C	; 60
    1fce:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd0:	80 81       	ld	r24, Z
    1fd2:	88 31       	cpi	r24, 0x18	; 24
    1fd4:	10 f5       	brcc	.+68     	; 0x201a <DIO_toggle+0x15e>
	{
		TOGGLE_BIT(PORTC_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 16));
    1fd6:	a5 e3       	ldi	r26, 0x35	; 53
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	e5 e3       	ldi	r30, 0x35	; 53
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	80 81       	ld	r24, Z
    1fe0:	48 2f       	mov	r20, r24
    1fe2:	89 81       	ldd	r24, Y+1	; 0x01
    1fe4:	28 2f       	mov	r18, r24
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	c9 01       	movw	r24, r18
    1fea:	88 0f       	add	r24, r24
    1fec:	99 1f       	adc	r25, r25
    1fee:	82 0f       	add	r24, r18
    1ff0:	93 1f       	adc	r25, r19
    1ff2:	fc 01       	movw	r30, r24
    1ff4:	ec 53       	subi	r30, 0x3C	; 60
    1ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff8:	80 81       	ld	r24, Z
    1ffa:	88 2f       	mov	r24, r24
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	9c 01       	movw	r18, r24
    2000:	20 51       	subi	r18, 0x10	; 16
    2002:	30 40       	sbci	r19, 0x00	; 0
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	02 2e       	mov	r0, r18
    200a:	02 c0       	rjmp	.+4      	; 0x2010 <DIO_toggle+0x154>
    200c:	88 0f       	add	r24, r24
    200e:	99 1f       	adc	r25, r25
    2010:	0a 94       	dec	r0
    2012:	e2 f7       	brpl	.-8      	; 0x200c <DIO_toggle+0x150>
    2014:	84 27       	eor	r24, r20
    2016:	8c 93       	st	X, r24
    2018:	3d c0       	rjmp	.+122    	; 0x2094 <DIO_toggle+0x1d8>
	}//end else if
	else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 24) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 32))	//if portd
    201a:	89 81       	ldd	r24, Y+1	; 0x01
    201c:	28 2f       	mov	r18, r24
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	c9 01       	movw	r24, r18
    2022:	88 0f       	add	r24, r24
    2024:	99 1f       	adc	r25, r25
    2026:	82 0f       	add	r24, r18
    2028:	93 1f       	adc	r25, r19
    202a:	fc 01       	movw	r30, r24
    202c:	ec 53       	subi	r30, 0x3C	; 60
    202e:	ff 4f       	sbci	r31, 0xFF	; 255
    2030:	80 81       	ld	r24, Z
    2032:	88 31       	cpi	r24, 0x18	; 24
    2034:	78 f1       	brcs	.+94     	; 0x2094 <DIO_toggle+0x1d8>
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	28 2f       	mov	r18, r24
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	c9 01       	movw	r24, r18
    203e:	88 0f       	add	r24, r24
    2040:	99 1f       	adc	r25, r25
    2042:	82 0f       	add	r24, r18
    2044:	93 1f       	adc	r25, r19
    2046:	fc 01       	movw	r30, r24
    2048:	ec 53       	subi	r30, 0x3C	; 60
    204a:	ff 4f       	sbci	r31, 0xFF	; 255
    204c:	80 81       	ld	r24, Z
    204e:	80 32       	cpi	r24, 0x20	; 32
    2050:	08 f5       	brcc	.+66     	; 0x2094 <DIO_toggle+0x1d8>
	{
		TOGGLE_BIT(PORTD_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 24));
    2052:	a2 e3       	ldi	r26, 0x32	; 50
    2054:	b0 e0       	ldi	r27, 0x00	; 0
    2056:	e2 e3       	ldi	r30, 0x32	; 50
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	80 81       	ld	r24, Z
    205c:	48 2f       	mov	r20, r24
    205e:	89 81       	ldd	r24, Y+1	; 0x01
    2060:	28 2f       	mov	r18, r24
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	c9 01       	movw	r24, r18
    2066:	88 0f       	add	r24, r24
    2068:	99 1f       	adc	r25, r25
    206a:	82 0f       	add	r24, r18
    206c:	93 1f       	adc	r25, r19
    206e:	fc 01       	movw	r30, r24
    2070:	ec 53       	subi	r30, 0x3C	; 60
    2072:	ff 4f       	sbci	r31, 0xFF	; 255
    2074:	80 81       	ld	r24, Z
    2076:	88 2f       	mov	r24, r24
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	9c 01       	movw	r18, r24
    207c:	28 51       	subi	r18, 0x18	; 24
    207e:	30 40       	sbci	r19, 0x00	; 0
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	02 2e       	mov	r0, r18
    2086:	02 c0       	rjmp	.+4      	; 0x208c <DIO_toggle+0x1d0>
    2088:	88 0f       	add	r24, r24
    208a:	99 1f       	adc	r25, r25
    208c:	0a 94       	dec	r0
    208e:	e2 f7       	brpl	.-8      	; 0x2088 <DIO_toggle+0x1cc>
    2090:	84 27       	eor	r24, r20
    2092:	8c 93       	st	X, r24
	}//end else if

	return E_OK;
    2094:	81 e0       	ldi	r24, 0x01	; 1
}//end DIO_toggle
    2096:	0f 90       	pop	r0
    2098:	cf 91       	pop	r28
    209a:	df 91       	pop	r29
    209c:	08 95       	ret

0000209e <EEPROM_init>:
******************************************************************************/

#include "EEPROM.h"

enuErrorStatus_t EEPROM_init(void)
{
    209e:	df 93       	push	r29
    20a0:	cf 93       	push	r28
    20a2:	0f 92       	push	r0
    20a4:	cd b7       	in	r28, 0x3d	; 61
    20a6:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	if(TWI_initMatser()==E_ERROR && TWI_initSlave()==E_ERROR)
    20a8:	0e 94 59 07 	call	0xeb2	; 0xeb2 <TWI_initMatser>
    20ac:	88 23       	and	r24, r24
    20ae:	31 f4       	brne	.+12     	; 0x20bc <EEPROM_init+0x1e>
    20b0:	0e 94 73 07 	call	0xee6	; 0xee6 <TWI_initSlave>
    20b4:	88 23       	and	r24, r24
    20b6:	11 f4       	brne	.+4      	; 0x20bc <EEPROM_init+0x1e>
	{
		return E_ERROR;
    20b8:	19 82       	std	Y+1, r1	; 0x01
    20ba:	02 c0       	rjmp	.+4      	; 0x20c0 <EEPROM_init+0x22>
	}

	return E_OK;
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	89 83       	std	Y+1, r24	; 0x01
    20c0:	89 81       	ldd	r24, Y+1	; 0x01
}//end EEPROM_init
    20c2:	0f 90       	pop	r0
    20c4:	cf 91       	pop	r28
    20c6:	df 91       	pop	r29
    20c8:	08 95       	ret

000020ca <EEPROM_writeByte>:

enuErrorStatus_t EEPROM_writeByte(uintt16_t u16Address, uint8_t u8Data)
{
    20ca:	df 93       	push	r29
    20cc:	cf 93       	push	r28
    20ce:	00 d0       	rcall	.+0      	; 0x20d0 <EEPROM_writeByte+0x6>
    20d0:	00 d0       	rcall	.+0      	; 0x20d2 <EEPROM_writeByte+0x8>
    20d2:	cd b7       	in	r28, 0x3d	; 61
    20d4:	de b7       	in	r29, 0x3e	; 62
    20d6:	9a 83       	std	Y+2, r25	; 0x02
    20d8:	89 83       	std	Y+1, r24	; 0x01
    20da:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    if(TWI_start()==E_ERROR)
    20dc:	0e 94 7f 07 	call	0xefe	; 0xefe <TWI_start>
    20e0:	88 23       	and	r24, r24
    20e2:	11 f4       	brne	.+4      	; 0x20e8 <EEPROM_writeByte+0x1e>
    {
    	return E_ERROR;
    20e4:	1c 82       	std	Y+4, r1	; 0x04
    20e6:	22 c0       	rjmp	.+68     	; 0x212c <EEPROM_writeByte+0x62>
    }

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    if(TWI_writeData((uint8_t)((0xA0) | ((u16Address & 0x0700)>>7))))
    20e8:	89 81       	ldd	r24, Y+1	; 0x01
    20ea:	9a 81       	ldd	r25, Y+2	; 0x02
    20ec:	80 70       	andi	r24, 0x00	; 0
    20ee:	97 70       	andi	r25, 0x07	; 7
    20f0:	88 0f       	add	r24, r24
    20f2:	89 2f       	mov	r24, r25
    20f4:	88 1f       	adc	r24, r24
    20f6:	99 0b       	sbc	r25, r25
    20f8:	91 95       	neg	r25
    20fa:	80 6a       	ori	r24, 0xA0	; 160
    20fc:	0e 94 c1 07 	call	0xf82	; 0xf82 <TWI_writeData>
    2100:	88 23       	and	r24, r24
    2102:	11 f0       	breq	.+4      	; 0x2108 <EEPROM_writeByte+0x3e>
    {
    	return E_ERROR;
    2104:	1c 82       	std	Y+4, r1	; 0x04
    2106:	12 c0       	rjmp	.+36     	; 0x212c <EEPROM_writeByte+0x62>
    }

    /* Send the required memory location address */
    if(TWI_writeData((uint8_t)(u16Address))==E_ERROR)
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	0e 94 c1 07 	call	0xf82	; 0xf82 <TWI_writeData>
    210e:	88 23       	and	r24, r24
    2110:	11 f4       	brne	.+4      	; 0x2116 <EEPROM_writeByte+0x4c>
    {
    	return E_ERROR;
    2112:	1c 82       	std	Y+4, r1	; 0x04
    2114:	0b c0       	rjmp	.+22     	; 0x212c <EEPROM_writeByte+0x62>
    }

    /* write byte to eeprom */
    if(TWI_writeData(u8Data)==E_ERROR)
    2116:	8b 81       	ldd	r24, Y+3	; 0x03
    2118:	0e 94 c1 07 	call	0xf82	; 0xf82 <TWI_writeData>
    211c:	88 23       	and	r24, r24
    211e:	11 f4       	brne	.+4      	; 0x2124 <EEPROM_writeByte+0x5a>
    {
    	return E_ERROR;
    2120:	1c 82       	std	Y+4, r1	; 0x04
    2122:	04 c0       	rjmp	.+8      	; 0x212c <EEPROM_writeByte+0x62>
    }
    /* Send the Stop Bit */
    TWI_stop();
    2124:	0e 94 b5 07 	call	0xf6a	; 0xf6a <TWI_stop>

    return E_OK;
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	8c 83       	std	Y+4, r24	; 0x04
    212c:	8c 81       	ldd	r24, Y+4	; 0x04
}//end EEPROM_writeByte
    212e:	0f 90       	pop	r0
    2130:	0f 90       	pop	r0
    2132:	0f 90       	pop	r0
    2134:	0f 90       	pop	r0
    2136:	cf 91       	pop	r28
    2138:	df 91       	pop	r29
    213a:	08 95       	ret

0000213c <EEPROM_readByte>:

enuErrorStatus_t EEPROM_readByte(uintt16_t u16Address, uint8_t *pu8Data)
{
    213c:	df 93       	push	r29
    213e:	cf 93       	push	r28
    2140:	00 d0       	rcall	.+0      	; 0x2142 <EEPROM_readByte+0x6>
    2142:	00 d0       	rcall	.+0      	; 0x2144 <EEPROM_readByte+0x8>
    2144:	0f 92       	push	r0
    2146:	cd b7       	in	r28, 0x3d	; 61
    2148:	de b7       	in	r29, 0x3e	; 62
    214a:	9a 83       	std	Y+2, r25	; 0x02
    214c:	89 83       	std	Y+1, r24	; 0x01
    214e:	7c 83       	std	Y+4, r23	; 0x04
    2150:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    if(TWI_start()==E_ERROR)
    2152:	0e 94 7f 07 	call	0xefe	; 0xefe <TWI_start>
    2156:	88 23       	and	r24, r24
    2158:	11 f4       	brne	.+4      	; 0x215e <EEPROM_readByte+0x22>
    {
    	return E_ERROR;
    215a:	1d 82       	std	Y+5, r1	; 0x05
    215c:	39 c0       	rjmp	.+114    	; 0x21d0 <EEPROM_readByte+0x94>
    }

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    if(TWI_writeData((uint8_t)((0xA0) | ((u16Address & 0x0700)>>7))))
    215e:	89 81       	ldd	r24, Y+1	; 0x01
    2160:	9a 81       	ldd	r25, Y+2	; 0x02
    2162:	80 70       	andi	r24, 0x00	; 0
    2164:	97 70       	andi	r25, 0x07	; 7
    2166:	88 0f       	add	r24, r24
    2168:	89 2f       	mov	r24, r25
    216a:	88 1f       	adc	r24, r24
    216c:	99 0b       	sbc	r25, r25
    216e:	91 95       	neg	r25
    2170:	80 6a       	ori	r24, 0xA0	; 160
    2172:	0e 94 c1 07 	call	0xf82	; 0xf82 <TWI_writeData>
    2176:	88 23       	and	r24, r24
    2178:	11 f0       	breq	.+4      	; 0x217e <EEPROM_readByte+0x42>
    {
      	return E_ERROR;
    217a:	1d 82       	std	Y+5, r1	; 0x05
    217c:	29 c0       	rjmp	.+82     	; 0x21d0 <EEPROM_readByte+0x94>
    }
    /* Send the required memory location address */
    if(TWI_writeData((uint8_t)(u16Address))==E_ERROR)
    217e:	89 81       	ldd	r24, Y+1	; 0x01
    2180:	0e 94 c1 07 	call	0xf82	; 0xf82 <TWI_writeData>
    2184:	88 23       	and	r24, r24
    2186:	11 f4       	brne	.+4      	; 0x218c <EEPROM_readByte+0x50>
    {
    	return E_ERROR;
    2188:	1d 82       	std	Y+5, r1	; 0x05
    218a:	22 c0       	rjmp	.+68     	; 0x21d0 <EEPROM_readByte+0x94>
    }

    /* Send the Repeated Start Bit */
    if(TWI_repeatedStart()==E_ERROR)
    218c:	0e 94 9a 07 	call	0xf34	; 0xf34 <TWI_repeatedStart>
    2190:	88 23       	and	r24, r24
    2192:	11 f4       	brne	.+4      	; 0x2198 <EEPROM_readByte+0x5c>
    {
    	return E_ERROR;
    2194:	1d 82       	std	Y+5, r1	; 0x05
    2196:	1c c0       	rjmp	.+56     	; 0x21d0 <EEPROM_readByte+0x94>
    }

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    if(TWI_writeData((uint8_t)((0xA0) | ((u16Address & 0x0700)>>7)| 1)))
    2198:	89 81       	ldd	r24, Y+1	; 0x01
    219a:	9a 81       	ldd	r25, Y+2	; 0x02
    219c:	80 70       	andi	r24, 0x00	; 0
    219e:	97 70       	andi	r25, 0x07	; 7
    21a0:	88 0f       	add	r24, r24
    21a2:	89 2f       	mov	r24, r25
    21a4:	88 1f       	adc	r24, r24
    21a6:	99 0b       	sbc	r25, r25
    21a8:	91 95       	neg	r25
    21aa:	81 6a       	ori	r24, 0xA1	; 161
    21ac:	0e 94 c1 07 	call	0xf82	; 0xf82 <TWI_writeData>
    21b0:	88 23       	and	r24, r24
    21b2:	11 f0       	breq	.+4      	; 0x21b8 <EEPROM_readByte+0x7c>
    {
		return E_ERROR;
    21b4:	1d 82       	std	Y+5, r1	; 0x05
    21b6:	0c c0       	rjmp	.+24     	; 0x21d0 <EEPROM_readByte+0x94>
	}

    /* Read Byte from Memory without send ACK */
    if(TWI_readDataWithNACK(pu8Data)==E_ERROR)
    21b8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ba:	9c 81       	ldd	r25, Y+4	; 0x04
    21bc:	0e 94 30 08 	call	0x1060	; 0x1060 <TWI_readDataWithNACK>
    21c0:	88 23       	and	r24, r24
    21c2:	11 f4       	brne	.+4      	; 0x21c8 <EEPROM_readByte+0x8c>
    {
    	return E_ERROR;
    21c4:	1d 82       	std	Y+5, r1	; 0x05
    21c6:	04 c0       	rjmp	.+8      	; 0x21d0 <EEPROM_readByte+0x94>
    }

    /* Send the Stop Bit */
    TWI_stop();
    21c8:	0e 94 b5 07 	call	0xf6a	; 0xf6a <TWI_stop>

    return E_OK;
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	8d 83       	std	Y+5, r24	; 0x05
    21d0:	8d 81       	ldd	r24, Y+5	; 0x05
}//end EEPROM_readByte
    21d2:	0f 90       	pop	r0
    21d4:	0f 90       	pop	r0
    21d6:	0f 90       	pop	r0
    21d8:	0f 90       	pop	r0
    21da:	0f 90       	pop	r0
    21dc:	cf 91       	pop	r28
    21de:	df 91       	pop	r29
    21e0:	08 95       	ret

000021e2 <App_Init>:
* Parameters (out): None
* Return Value    : void
* Description     : A function to initialize the application
*************************************************************************************************/
void App_Init(void)
{
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	cd b7       	in	r28, 0x3d	; 61
    21e8:	de b7       	in	r29, 0x3e	; 62
	DIO_Init();
    21ea:	0e 94 65 08 	call	0x10ca	; 0x10ca <DIO_Init>
	UART_Init();
    21ee:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_Init>
	EEPROM_init();
    21f2:	0e 94 4f 10 	call	0x209e	; 0x209e <EEPROM_init>
}//END App_Init
    21f6:	cf 91       	pop	r28
    21f8:	df 91       	pop	r29
    21fa:	08 95       	ret

000021fc <App_Update>:
* Parameters (out): None
* Return Value    : void
* Description     : A function to update the application
*************************************************************************************************/
void App_Update(void)
{
    21fc:	df 93       	push	r29
    21fe:	cf 93       	push	r28
    2200:	cd b7       	in	r28, 0x3d	; 61
    2202:	de b7       	in	r29, 0x3e	; 62
    2204:	c2 52       	subi	r28, 0x22	; 34
    2206:	d1 40       	sbci	r29, 0x01	; 1
    2208:	0f b6       	in	r0, 0x3f	; 63
    220a:	f8 94       	cli
    220c:	de bf       	out	0x3e, r29	; 62
    220e:	0f be       	out	0x3f, r0	; 63
    2210:	cd bf       	out	0x3d, r28	; 61
	uint8_t pu8AddString[16];
	uint8_t pu8DataString[2];
	uintt16_t u16Address;
	uint8_t u8Data;

	UART_SendString((uint8_t*)"Enter a command: ");
    2212:	86 e6       	ldi	r24, 0x66	; 102
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	0e 94 8b 06 	call	0xd16	; 0xd16 <UART_SendString>
	UART_ReceiveString(pu8String);
    221a:	ce 01       	movw	r24, r28
    221c:	41 96       	adiw	r24, 0x11	; 17
    221e:	0e 94 cc 06 	call	0xd98	; 0xd98 <UART_ReceiveString>

	if(strcmp(pu8String, (uint8_t*)"WRITE")==0)
    2222:	ce 01       	movw	r24, r28
    2224:	41 96       	adiw	r24, 0x11	; 17
    2226:	28 e7       	ldi	r18, 0x78	; 120
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	b9 01       	movw	r22, r18
    222c:	0e 94 63 12 	call	0x24c6	; 0x24c6 <strcmp>
    2230:	00 97       	sbiw	r24, 0x00	; 0
    2232:	a1 f5       	brne	.+104    	; 0x229c <App_Update+0xa0>
	{
		UART_SendString((uint8_t*)"Enter Address: ");
    2234:	8e e7       	ldi	r24, 0x7E	; 126
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	0e 94 8b 06 	call	0xd16	; 0xd16 <UART_SendString>
		UART_ReceiveString(pu8AddString);
    223c:	ce 01       	movw	r24, r28
    223e:	80 5f       	subi	r24, 0xF0	; 240
    2240:	9e 4f       	sbci	r25, 0xFE	; 254
    2242:	0e 94 cc 06 	call	0xd98	; 0xd98 <UART_ReceiveString>
		u16Address = atoi(pu8AddString);
    2246:	ce 01       	movw	r24, r28
    2248:	80 5f       	subi	r24, 0xF0	; 240
    224a:	9e 4f       	sbci	r25, 0xFE	; 254
    224c:	0e 94 45 12 	call	0x248a	; 0x248a <atoi>
    2250:	98 8b       	std	Y+16, r25	; 0x10
    2252:	8f 87       	std	Y+15, r24	; 0x0f
		UART_SendString((uint8_t*)"OK");
    2254:	8e e8       	ldi	r24, 0x8E	; 142
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	0e 94 8b 06 	call	0xd16	; 0xd16 <UART_SendString>
		UART_SendString((uint8_t*)"Enter Data: ");
    225c:	81 e9       	ldi	r24, 0x91	; 145
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	0e 94 8b 06 	call	0xd16	; 0xd16 <UART_SendString>
		UART_ReceiveData(&u8Data);
    2264:	ce 01       	movw	r24, r28
    2266:	8e 5d       	subi	r24, 0xDE	; 222
    2268:	9e 4f       	sbci	r25, 0xFE	; 254
    226a:	0e 94 1d 06 	call	0xc3a	; 0xc3a <UART_ReceiveData>
		u8Data=u8Data-'0';
    226e:	fe 01       	movw	r30, r28
    2270:	ee 5d       	subi	r30, 0xDE	; 222
    2272:	fe 4f       	sbci	r31, 0xFE	; 254
    2274:	80 81       	ld	r24, Z
    2276:	80 53       	subi	r24, 0x30	; 48
    2278:	fe 01       	movw	r30, r28
    227a:	ee 5d       	subi	r30, 0xDE	; 222
    227c:	fe 4f       	sbci	r31, 0xFE	; 254
    227e:	80 83       	st	Z, r24
		UART_SendString((uint8_t*)"\rOK");
    2280:	8e e9       	ldi	r24, 0x9E	; 158
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	0e 94 8b 06 	call	0xd16	; 0xd16 <UART_SendString>
		EEPROM_writeByte(u16Address, u8Data);
    2288:	fe 01       	movw	r30, r28
    228a:	ee 5d       	subi	r30, 0xDE	; 222
    228c:	fe 4f       	sbci	r31, 0xFE	; 254
    228e:	20 81       	ld	r18, Z
    2290:	8f 85       	ldd	r24, Y+15	; 0x0f
    2292:	98 89       	ldd	r25, Y+16	; 0x10
    2294:	62 2f       	mov	r22, r18
    2296:	0e 94 65 10 	call	0x20ca	; 0x20ca <EEPROM_writeByte>
    229a:	ad c0       	rjmp	.+346    	; 0x23f6 <App_Update+0x1fa>
	}//end if
	else if(strcmp(pu8String, (uint8_t*)"READ")==0)
    229c:	ce 01       	movw	r24, r28
    229e:	41 96       	adiw	r24, 0x11	; 17
    22a0:	22 ea       	ldi	r18, 0xA2	; 162
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	b9 01       	movw	r22, r18
    22a6:	0e 94 63 12 	call	0x24c6	; 0x24c6 <strcmp>
    22aa:	00 97       	sbiw	r24, 0x00	; 0
    22ac:	09 f0       	breq	.+2      	; 0x22b0 <App_Update+0xb4>
    22ae:	a3 c0       	rjmp	.+326    	; 0x23f6 <App_Update+0x1fa>
	{
		UART_SendString((uint8_t*)"Enter Address: ");
    22b0:	8e e7       	ldi	r24, 0x7E	; 126
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	0e 94 8b 06 	call	0xd16	; 0xd16 <UART_SendString>
		UART_ReceiveString(pu8AddString);
    22b8:	ce 01       	movw	r24, r28
    22ba:	80 5f       	subi	r24, 0xF0	; 240
    22bc:	9e 4f       	sbci	r25, 0xFE	; 254
    22be:	0e 94 cc 06 	call	0xd98	; 0xd98 <UART_ReceiveString>
		u16Address = atoi(pu8AddString);
    22c2:	ce 01       	movw	r24, r28
    22c4:	80 5f       	subi	r24, 0xF0	; 240
    22c6:	9e 4f       	sbci	r25, 0xFE	; 254
    22c8:	0e 94 45 12 	call	0x248a	; 0x248a <atoi>
    22cc:	98 8b       	std	Y+16, r25	; 0x10
    22ce:	8f 87       	std	Y+15, r24	; 0x0f
		UART_SendString((uint8_t*)"OK");
    22d0:	8e e8       	ldi	r24, 0x8E	; 142
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	0e 94 8b 06 	call	0xd16	; 0xd16 <UART_SendString>
    22d8:	80 e0       	ldi	r24, 0x00	; 0
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	a0 e2       	ldi	r26, 0x20	; 32
    22de:	b1 e4       	ldi	r27, 0x41	; 65
    22e0:	8b 87       	std	Y+11, r24	; 0x0b
    22e2:	9c 87       	std	Y+12, r25	; 0x0c
    22e4:	ad 87       	std	Y+13, r26	; 0x0d
    22e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    22ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	4a ef       	ldi	r20, 0xFA	; 250
    22f6:	54 e4       	ldi	r21, 0x44	; 68
    22f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22fc:	dc 01       	movw	r26, r24
    22fe:	cb 01       	movw	r24, r22
    2300:	8f 83       	std	Y+7, r24	; 0x07
    2302:	98 87       	std	Y+8, r25	; 0x08
    2304:	a9 87       	std	Y+9, r26	; 0x09
    2306:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2308:	6f 81       	ldd	r22, Y+7	; 0x07
    230a:	78 85       	ldd	r23, Y+8	; 0x08
    230c:	89 85       	ldd	r24, Y+9	; 0x09
    230e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2310:	20 e0       	ldi	r18, 0x00	; 0
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	40 e8       	ldi	r20, 0x80	; 128
    2316:	5f e3       	ldi	r21, 0x3F	; 63
    2318:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    231c:	88 23       	and	r24, r24
    231e:	2c f4       	brge	.+10     	; 0x232a <App_Update+0x12e>
		__ticks = 1;
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	9e 83       	std	Y+6, r25	; 0x06
    2326:	8d 83       	std	Y+5, r24	; 0x05
    2328:	3f c0       	rjmp	.+126    	; 0x23a8 <App_Update+0x1ac>
	else if (__tmp > 65535)
    232a:	6f 81       	ldd	r22, Y+7	; 0x07
    232c:	78 85       	ldd	r23, Y+8	; 0x08
    232e:	89 85       	ldd	r24, Y+9	; 0x09
    2330:	9a 85       	ldd	r25, Y+10	; 0x0a
    2332:	20 e0       	ldi	r18, 0x00	; 0
    2334:	3f ef       	ldi	r19, 0xFF	; 255
    2336:	4f e7       	ldi	r20, 0x7F	; 127
    2338:	57 e4       	ldi	r21, 0x47	; 71
    233a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    233e:	18 16       	cp	r1, r24
    2340:	4c f5       	brge	.+82     	; 0x2394 <App_Update+0x198>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2342:	6b 85       	ldd	r22, Y+11	; 0x0b
    2344:	7c 85       	ldd	r23, Y+12	; 0x0c
    2346:	8d 85       	ldd	r24, Y+13	; 0x0d
    2348:	9e 85       	ldd	r25, Y+14	; 0x0e
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	40 e2       	ldi	r20, 0x20	; 32
    2350:	51 e4       	ldi	r21, 0x41	; 65
    2352:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	bc 01       	movw	r22, r24
    235c:	cd 01       	movw	r24, r26
    235e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	9e 83       	std	Y+6, r25	; 0x06
    2368:	8d 83       	std	Y+5, r24	; 0x05
    236a:	0f c0       	rjmp	.+30     	; 0x238a <App_Update+0x18e>
    236c:	88 ec       	ldi	r24, 0xC8	; 200
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	9c 83       	std	Y+4, r25	; 0x04
    2372:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2374:	8b 81       	ldd	r24, Y+3	; 0x03
    2376:	9c 81       	ldd	r25, Y+4	; 0x04
    2378:	01 97       	sbiw	r24, 0x01	; 1
    237a:	f1 f7       	brne	.-4      	; 0x2378 <App_Update+0x17c>
    237c:	9c 83       	std	Y+4, r25	; 0x04
    237e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2380:	8d 81       	ldd	r24, Y+5	; 0x05
    2382:	9e 81       	ldd	r25, Y+6	; 0x06
    2384:	01 97       	sbiw	r24, 0x01	; 1
    2386:	9e 83       	std	Y+6, r25	; 0x06
    2388:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    238a:	8d 81       	ldd	r24, Y+5	; 0x05
    238c:	9e 81       	ldd	r25, Y+6	; 0x06
    238e:	00 97       	sbiw	r24, 0x00	; 0
    2390:	69 f7       	brne	.-38     	; 0x236c <App_Update+0x170>
    2392:	14 c0       	rjmp	.+40     	; 0x23bc <App_Update+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2394:	6f 81       	ldd	r22, Y+7	; 0x07
    2396:	78 85       	ldd	r23, Y+8	; 0x08
    2398:	89 85       	ldd	r24, Y+9	; 0x09
    239a:	9a 85       	ldd	r25, Y+10	; 0x0a
    239c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a0:	dc 01       	movw	r26, r24
    23a2:	cb 01       	movw	r24, r22
    23a4:	9e 83       	std	Y+6, r25	; 0x06
    23a6:	8d 83       	std	Y+5, r24	; 0x05
    23a8:	8d 81       	ldd	r24, Y+5	; 0x05
    23aa:	9e 81       	ldd	r25, Y+6	; 0x06
    23ac:	9a 83       	std	Y+2, r25	; 0x02
    23ae:	89 83       	std	Y+1, r24	; 0x01
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	9a 81       	ldd	r25, Y+2	; 0x02
    23b4:	01 97       	sbiw	r24, 0x01	; 1
    23b6:	f1 f7       	brne	.-4      	; 0x23b4 <App_Update+0x1b8>
    23b8:	9a 83       	std	Y+2, r25	; 0x02
    23ba:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		EEPROM_readByte(u16Address, &u8Data);
    23bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    23be:	98 89       	ldd	r25, Y+16	; 0x10
    23c0:	9e 01       	movw	r18, r28
    23c2:	2e 5d       	subi	r18, 0xDE	; 222
    23c4:	3e 4f       	sbci	r19, 0xFE	; 254
    23c6:	b9 01       	movw	r22, r18
    23c8:	0e 94 9e 10 	call	0x213c	; 0x213c <EEPROM_readByte>
		UART_SendString((uint8_t*)"The data stored is: ");
    23cc:	87 ea       	ldi	r24, 0xA7	; 167
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	0e 94 8b 06 	call	0xd16	; 0xd16 <UART_SendString>
		UART_SendData(u8Data+'0');
    23d4:	fe 01       	movw	r30, r28
    23d6:	ee 5d       	subi	r30, 0xDE	; 222
    23d8:	fe 4f       	sbci	r31, 0xFE	; 254
    23da:	80 81       	ld	r24, Z
    23dc:	80 5d       	subi	r24, 0xD0	; 208
    23de:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <UART_SendData>
		UART_SendData('\r');
    23e2:	8d e0       	ldi	r24, 0x0D	; 13
    23e4:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <UART_SendData>
		PORTB_R = u8Data;
    23e8:	a8 e3       	ldi	r26, 0x38	; 56
    23ea:	b0 e0       	ldi	r27, 0x00	; 0
    23ec:	fe 01       	movw	r30, r28
    23ee:	ee 5d       	subi	r30, 0xDE	; 222
    23f0:	fe 4f       	sbci	r31, 0xFE	; 254
    23f2:	80 81       	ld	r24, Z
    23f4:	8c 93       	st	X, r24
	}//end else if
}//END App_Update
    23f6:	ce 5d       	subi	r28, 0xDE	; 222
    23f8:	de 4f       	sbci	r29, 0xFE	; 254
    23fa:	0f b6       	in	r0, 0x3f	; 63
    23fc:	f8 94       	cli
    23fe:	de bf       	out	0x3e, r29	; 62
    2400:	0f be       	out	0x3f, r0	; 63
    2402:	cd bf       	out	0x3d, r28	; 61
    2404:	cf 91       	pop	r28
    2406:	df 91       	pop	r29
    2408:	08 95       	ret

0000240a <main>:
#include "EEPROM_task/EEPROM_task.h"


/*- MAIN FUNCTION---------------------------------------------*/
int main(void)
{
    240a:	df 93       	push	r29
    240c:	cf 93       	push	r28
    240e:	cd b7       	in	r28, 0x3d	; 61
    2410:	de b7       	in	r29, 0x3e	; 62
	App_Init();
    2412:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <App_Init>
	while(1)
	{
		App_Update();
    2416:	0e 94 fe 10 	call	0x21fc	; 0x21fc <App_Update>
    241a:	fd cf       	rjmp	.-6      	; 0x2416 <main+0xc>

0000241c <__prologue_saves__>:
    241c:	2f 92       	push	r2
    241e:	3f 92       	push	r3
    2420:	4f 92       	push	r4
    2422:	5f 92       	push	r5
    2424:	6f 92       	push	r6
    2426:	7f 92       	push	r7
    2428:	8f 92       	push	r8
    242a:	9f 92       	push	r9
    242c:	af 92       	push	r10
    242e:	bf 92       	push	r11
    2430:	cf 92       	push	r12
    2432:	df 92       	push	r13
    2434:	ef 92       	push	r14
    2436:	ff 92       	push	r15
    2438:	0f 93       	push	r16
    243a:	1f 93       	push	r17
    243c:	cf 93       	push	r28
    243e:	df 93       	push	r29
    2440:	cd b7       	in	r28, 0x3d	; 61
    2442:	de b7       	in	r29, 0x3e	; 62
    2444:	ca 1b       	sub	r28, r26
    2446:	db 0b       	sbc	r29, r27
    2448:	0f b6       	in	r0, 0x3f	; 63
    244a:	f8 94       	cli
    244c:	de bf       	out	0x3e, r29	; 62
    244e:	0f be       	out	0x3f, r0	; 63
    2450:	cd bf       	out	0x3d, r28	; 61
    2452:	09 94       	ijmp

00002454 <__epilogue_restores__>:
    2454:	2a 88       	ldd	r2, Y+18	; 0x12
    2456:	39 88       	ldd	r3, Y+17	; 0x11
    2458:	48 88       	ldd	r4, Y+16	; 0x10
    245a:	5f 84       	ldd	r5, Y+15	; 0x0f
    245c:	6e 84       	ldd	r6, Y+14	; 0x0e
    245e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2460:	8c 84       	ldd	r8, Y+12	; 0x0c
    2462:	9b 84       	ldd	r9, Y+11	; 0x0b
    2464:	aa 84       	ldd	r10, Y+10	; 0x0a
    2466:	b9 84       	ldd	r11, Y+9	; 0x09
    2468:	c8 84       	ldd	r12, Y+8	; 0x08
    246a:	df 80       	ldd	r13, Y+7	; 0x07
    246c:	ee 80       	ldd	r14, Y+6	; 0x06
    246e:	fd 80       	ldd	r15, Y+5	; 0x05
    2470:	0c 81       	ldd	r16, Y+4	; 0x04
    2472:	1b 81       	ldd	r17, Y+3	; 0x03
    2474:	aa 81       	ldd	r26, Y+2	; 0x02
    2476:	b9 81       	ldd	r27, Y+1	; 0x01
    2478:	ce 0f       	add	r28, r30
    247a:	d1 1d       	adc	r29, r1
    247c:	0f b6       	in	r0, 0x3f	; 63
    247e:	f8 94       	cli
    2480:	de bf       	out	0x3e, r29	; 62
    2482:	0f be       	out	0x3f, r0	; 63
    2484:	cd bf       	out	0x3d, r28	; 61
    2486:	ed 01       	movw	r28, r26
    2488:	08 95       	ret

0000248a <atoi>:
    248a:	fc 01       	movw	r30, r24
    248c:	88 27       	eor	r24, r24
    248e:	99 27       	eor	r25, r25
    2490:	e8 94       	clt
    2492:	21 91       	ld	r18, Z+
    2494:	20 32       	cpi	r18, 0x20	; 32
    2496:	e9 f3       	breq	.-6      	; 0x2492 <atoi+0x8>
    2498:	29 30       	cpi	r18, 0x09	; 9
    249a:	10 f0       	brcs	.+4      	; 0x24a0 <atoi+0x16>
    249c:	2e 30       	cpi	r18, 0x0E	; 14
    249e:	c8 f3       	brcs	.-14     	; 0x2492 <atoi+0x8>
    24a0:	2b 32       	cpi	r18, 0x2B	; 43
    24a2:	41 f0       	breq	.+16     	; 0x24b4 <atoi+0x2a>
    24a4:	2d 32       	cpi	r18, 0x2D	; 45
    24a6:	39 f4       	brne	.+14     	; 0x24b6 <atoi+0x2c>
    24a8:	68 94       	set
    24aa:	04 c0       	rjmp	.+8      	; 0x24b4 <atoi+0x2a>
    24ac:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <__mulhi_const_10>
    24b0:	82 0f       	add	r24, r18
    24b2:	91 1d       	adc	r25, r1
    24b4:	21 91       	ld	r18, Z+
    24b6:	20 53       	subi	r18, 0x30	; 48
    24b8:	2a 30       	cpi	r18, 0x0A	; 10
    24ba:	c0 f3       	brcs	.-16     	; 0x24ac <atoi+0x22>
    24bc:	1e f4       	brtc	.+6      	; 0x24c4 <atoi+0x3a>
    24be:	90 95       	com	r25
    24c0:	81 95       	neg	r24
    24c2:	9f 4f       	sbci	r25, 0xFF	; 255
    24c4:	08 95       	ret

000024c6 <strcmp>:
    24c6:	fb 01       	movw	r30, r22
    24c8:	dc 01       	movw	r26, r24
    24ca:	8d 91       	ld	r24, X+
    24cc:	01 90       	ld	r0, Z+
    24ce:	80 19       	sub	r24, r0
    24d0:	01 10       	cpse	r0, r1
    24d2:	d9 f3       	breq	.-10     	; 0x24ca <strcmp+0x4>
    24d4:	99 0b       	sbc	r25, r25
    24d6:	08 95       	ret

000024d8 <__mulhi_const_10>:
    24d8:	7a e0       	ldi	r23, 0x0A	; 10
    24da:	97 9f       	mul	r25, r23
    24dc:	90 2d       	mov	r25, r0
    24de:	87 9f       	mul	r24, r23
    24e0:	80 2d       	mov	r24, r0
    24e2:	91 0d       	add	r25, r1
    24e4:	11 24       	eor	r1, r1
    24e6:	08 95       	ret

000024e8 <_exit>:
    24e8:	f8 94       	cli

000024ea <__stop_program>:
    24ea:	ff cf       	rjmp	.-2      	; 0x24ea <__stop_program>
