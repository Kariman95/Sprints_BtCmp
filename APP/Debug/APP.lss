
APP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000210a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  0000210a  0000217e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001518  00000000  00000000  0000219c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000014bb  00000000  00000000  000036b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00004b6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00004ccf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  00004e5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00006ea3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00007fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00008f28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  000090a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  0000936a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009bf8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e0       	ldi	r30, 0x0A	; 10
      68:	f1 e2       	ldi	r31, 0x21	; 33
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 28 10 	call	0x2050	; 0x2050 <main>
      7a:	0c 94 83 10 	jmp	0x2106	; 0x2106 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 4c 10 	jmp	0x2098	; 0x2098 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 68 10 	jmp	0x20d0	; 0x20d0 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 74 10 	jmp	0x20e8	; 0x20e8 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 74 10 	jmp	0x20e8	; 0x20e8 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 4c 10 	jmp	0x2098	; 0x2098 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 68 10 	jmp	0x20d0	; 0x20d0 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 54 10 	jmp	0x20a8	; 0x20a8 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 70 10 	jmp	0x20e0	; 0x20e0 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 74 10 	jmp	0x20e8	; 0x20e8 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 74 10 	jmp	0x20e8	; 0x20e8 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 58 10 	jmp	0x20b0	; 0x20b0 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 74 10 	jmp	0x20e8	; 0x20e8 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 5c 10 	jmp	0x20b8	; 0x20b8 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 78 10 	jmp	0x20f0	; 0x20f0 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <DIO_Init>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to initialize all the DIO groups according to the configuration
*************************************************************************************************/
enuErrorStatus_t DIO_Init(void)
{
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	0f 92       	push	r0
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_i;

	for(u8_i=0; u8_i<DIO_GROUPS_NO; u8_i++)
     c98:	19 82       	std	Y+1, r1	; 0x01
     c9a:	02 c4       	rjmp	.+2052   	; 0x14a0 <DIO_Init+0x812>
	{
		//set the pin direction (input, output)
		if(astrDIOConfigParameters[u8_i].enuPinDir == INPUT)
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	28 2f       	mov	r18, r24
     ca0:	30 e0       	ldi	r19, 0x00	; 0
     ca2:	c9 01       	movw	r24, r18
     ca4:	88 0f       	add	r24, r24
     ca6:	99 1f       	adc	r25, r25
     ca8:	82 0f       	add	r24, r18
     caa:	93 1f       	adc	r25, r19
     cac:	fc 01       	movw	r30, r24
     cae:	e7 59       	subi	r30, 0x97	; 151
     cb0:	ff 4f       	sbci	r31, 0xFF	; 255
     cb2:	80 81       	ld	r24, Z
     cb4:	88 23       	and	r24, r24
     cb6:	09 f0       	breq	.+2      	; 0xcba <DIO_Init+0x2c>
     cb8:	ed c0       	rjmp	.+474    	; 0xe94 <DIO_Init+0x206>
		{
			//if PORTA
			if((astrDIOConfigParameters[u8_i].enuPinNo >= 0) && (astrDIOConfigParameters[u8_i].enuPinNo < 8))
     cba:	89 81       	ldd	r24, Y+1	; 0x01
     cbc:	28 2f       	mov	r18, r24
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	c9 01       	movw	r24, r18
     cc2:	88 0f       	add	r24, r24
     cc4:	99 1f       	adc	r25, r25
     cc6:	82 0f       	add	r24, r18
     cc8:	93 1f       	adc	r25, r19
     cca:	fc 01       	movw	r30, r24
     ccc:	e8 59       	subi	r30, 0x98	; 152
     cce:	ff 4f       	sbci	r31, 0xFF	; 255
     cd0:	80 81       	ld	r24, Z
     cd2:	88 30       	cpi	r24, 0x08	; 8
     cd4:	00 f5       	brcc	.+64     	; 0xd16 <DIO_Init+0x88>
			{
				CLR_BIT(DDRA_R, astrDIOConfigParameters[u8_i].enuPinNo);
     cd6:	aa e3       	ldi	r26, 0x3A	; 58
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	ea e3       	ldi	r30, 0x3A	; 58
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	48 2f       	mov	r20, r24
     ce2:	89 81       	ldd	r24, Y+1	; 0x01
     ce4:	28 2f       	mov	r18, r24
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	c9 01       	movw	r24, r18
     cea:	88 0f       	add	r24, r24
     cec:	99 1f       	adc	r25, r25
     cee:	82 0f       	add	r24, r18
     cf0:	93 1f       	adc	r25, r19
     cf2:	fc 01       	movw	r30, r24
     cf4:	e8 59       	subi	r30, 0x98	; 152
     cf6:	ff 4f       	sbci	r31, 0xFF	; 255
     cf8:	80 81       	ld	r24, Z
     cfa:	28 2f       	mov	r18, r24
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	02 2e       	mov	r0, r18
     d04:	02 c0       	rjmp	.+4      	; 0xd0a <DIO_Init+0x7c>
     d06:	88 0f       	add	r24, r24
     d08:	99 1f       	adc	r25, r25
     d0a:	0a 94       	dec	r0
     d0c:	e2 f7       	brpl	.-8      	; 0xd06 <DIO_Init+0x78>
     d0e:	80 95       	com	r24
     d10:	84 23       	and	r24, r20
     d12:	8c 93       	st	X, r24
     d14:	b3 c1       	rjmp	.+870    	; 0x107c <DIO_Init+0x3ee>
			}//end if

			//if PORTB
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 8) && (astrDIOConfigParameters[u8_i].enuPinNo < 16))
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	28 2f       	mov	r18, r24
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	c9 01       	movw	r24, r18
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	82 0f       	add	r24, r18
     d24:	93 1f       	adc	r25, r19
     d26:	fc 01       	movw	r30, r24
     d28:	e8 59       	subi	r30, 0x98	; 152
     d2a:	ff 4f       	sbci	r31, 0xFF	; 255
     d2c:	80 81       	ld	r24, Z
     d2e:	88 30       	cpi	r24, 0x08	; 8
     d30:	88 f1       	brcs	.+98     	; 0xd94 <DIO_Init+0x106>
     d32:	89 81       	ldd	r24, Y+1	; 0x01
     d34:	28 2f       	mov	r18, r24
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	c9 01       	movw	r24, r18
     d3a:	88 0f       	add	r24, r24
     d3c:	99 1f       	adc	r25, r25
     d3e:	82 0f       	add	r24, r18
     d40:	93 1f       	adc	r25, r19
     d42:	fc 01       	movw	r30, r24
     d44:	e8 59       	subi	r30, 0x98	; 152
     d46:	ff 4f       	sbci	r31, 0xFF	; 255
     d48:	80 81       	ld	r24, Z
     d4a:	80 31       	cpi	r24, 0x10	; 16
     d4c:	18 f5       	brcc	.+70     	; 0xd94 <DIO_Init+0x106>
			{
				CLR_BIT(DDRB_R,(astrDIOConfigParameters[u8_i].enuPinNo - 8));
     d4e:	a7 e3       	ldi	r26, 0x37	; 55
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e7 e3       	ldi	r30, 0x37	; 55
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	48 2f       	mov	r20, r24
     d5a:	89 81       	ldd	r24, Y+1	; 0x01
     d5c:	28 2f       	mov	r18, r24
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	c9 01       	movw	r24, r18
     d62:	88 0f       	add	r24, r24
     d64:	99 1f       	adc	r25, r25
     d66:	82 0f       	add	r24, r18
     d68:	93 1f       	adc	r25, r19
     d6a:	fc 01       	movw	r30, r24
     d6c:	e8 59       	subi	r30, 0x98	; 152
     d6e:	ff 4f       	sbci	r31, 0xFF	; 255
     d70:	80 81       	ld	r24, Z
     d72:	88 2f       	mov	r24, r24
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	9c 01       	movw	r18, r24
     d78:	28 50       	subi	r18, 0x08	; 8
     d7a:	30 40       	sbci	r19, 0x00	; 0
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	02 2e       	mov	r0, r18
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <DIO_Init+0xfa>
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	0a 94       	dec	r0
     d8a:	e2 f7       	brpl	.-8      	; 0xd84 <DIO_Init+0xf6>
     d8c:	80 95       	com	r24
     d8e:	84 23       	and	r24, r20
     d90:	8c 93       	st	X, r24
     d92:	74 c1       	rjmp	.+744    	; 0x107c <DIO_Init+0x3ee>
			}//end else if

			//if PORTC
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 16) && (astrDIOConfigParameters[u8_i].enuPinNo < 24))
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	28 2f       	mov	r18, r24
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	c9 01       	movw	r24, r18
     d9c:	88 0f       	add	r24, r24
     d9e:	99 1f       	adc	r25, r25
     da0:	82 0f       	add	r24, r18
     da2:	93 1f       	adc	r25, r19
     da4:	fc 01       	movw	r30, r24
     da6:	e8 59       	subi	r30, 0x98	; 152
     da8:	ff 4f       	sbci	r31, 0xFF	; 255
     daa:	80 81       	ld	r24, Z
     dac:	80 31       	cpi	r24, 0x10	; 16
     dae:	88 f1       	brcs	.+98     	; 0xe12 <DIO_Init+0x184>
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	28 2f       	mov	r18, r24
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	c9 01       	movw	r24, r18
     db8:	88 0f       	add	r24, r24
     dba:	99 1f       	adc	r25, r25
     dbc:	82 0f       	add	r24, r18
     dbe:	93 1f       	adc	r25, r19
     dc0:	fc 01       	movw	r30, r24
     dc2:	e8 59       	subi	r30, 0x98	; 152
     dc4:	ff 4f       	sbci	r31, 0xFF	; 255
     dc6:	80 81       	ld	r24, Z
     dc8:	88 31       	cpi	r24, 0x18	; 24
     dca:	18 f5       	brcc	.+70     	; 0xe12 <DIO_Init+0x184>
			{
				CLR_BIT(DDRC_R,(astrDIOConfigParameters[u8_i].enuPinNo - 16));
     dcc:	a4 e3       	ldi	r26, 0x34	; 52
     dce:	b0 e0       	ldi	r27, 0x00	; 0
     dd0:	e4 e3       	ldi	r30, 0x34	; 52
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	80 81       	ld	r24, Z
     dd6:	48 2f       	mov	r20, r24
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	28 2f       	mov	r18, r24
     ddc:	30 e0       	ldi	r19, 0x00	; 0
     dde:	c9 01       	movw	r24, r18
     de0:	88 0f       	add	r24, r24
     de2:	99 1f       	adc	r25, r25
     de4:	82 0f       	add	r24, r18
     de6:	93 1f       	adc	r25, r19
     de8:	fc 01       	movw	r30, r24
     dea:	e8 59       	subi	r30, 0x98	; 152
     dec:	ff 4f       	sbci	r31, 0xFF	; 255
     dee:	80 81       	ld	r24, Z
     df0:	88 2f       	mov	r24, r24
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	9c 01       	movw	r18, r24
     df6:	20 51       	subi	r18, 0x10	; 16
     df8:	30 40       	sbci	r19, 0x00	; 0
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	02 2e       	mov	r0, r18
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <DIO_Init+0x178>
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	0a 94       	dec	r0
     e08:	e2 f7       	brpl	.-8      	; 0xe02 <DIO_Init+0x174>
     e0a:	80 95       	com	r24
     e0c:	84 23       	and	r24, r20
     e0e:	8c 93       	st	X, r24
     e10:	35 c1       	rjmp	.+618    	; 0x107c <DIO_Init+0x3ee>
			}//end else if

			//if PORTD
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 24) && (astrDIOConfigParameters[u8_i].enuPinNo < 32))
     e12:	89 81       	ldd	r24, Y+1	; 0x01
     e14:	28 2f       	mov	r18, r24
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	c9 01       	movw	r24, r18
     e1a:	88 0f       	add	r24, r24
     e1c:	99 1f       	adc	r25, r25
     e1e:	82 0f       	add	r24, r18
     e20:	93 1f       	adc	r25, r19
     e22:	fc 01       	movw	r30, r24
     e24:	e8 59       	subi	r30, 0x98	; 152
     e26:	ff 4f       	sbci	r31, 0xFF	; 255
     e28:	80 81       	ld	r24, Z
     e2a:	88 31       	cpi	r24, 0x18	; 24
     e2c:	08 f4       	brcc	.+2      	; 0xe30 <DIO_Init+0x1a2>
     e2e:	26 c1       	rjmp	.+588    	; 0x107c <DIO_Init+0x3ee>
     e30:	89 81       	ldd	r24, Y+1	; 0x01
     e32:	28 2f       	mov	r18, r24
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	c9 01       	movw	r24, r18
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	82 0f       	add	r24, r18
     e3e:	93 1f       	adc	r25, r19
     e40:	fc 01       	movw	r30, r24
     e42:	e8 59       	subi	r30, 0x98	; 152
     e44:	ff 4f       	sbci	r31, 0xFF	; 255
     e46:	80 81       	ld	r24, Z
     e48:	80 32       	cpi	r24, 0x20	; 32
     e4a:	08 f0       	brcs	.+2      	; 0xe4e <DIO_Init+0x1c0>
     e4c:	17 c1       	rjmp	.+558    	; 0x107c <DIO_Init+0x3ee>
			{
				CLR_BIT(DDRD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
     e4e:	a1 e3       	ldi	r26, 0x31	; 49
     e50:	b0 e0       	ldi	r27, 0x00	; 0
     e52:	e1 e3       	ldi	r30, 0x31	; 49
     e54:	f0 e0       	ldi	r31, 0x00	; 0
     e56:	80 81       	ld	r24, Z
     e58:	48 2f       	mov	r20, r24
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	28 2f       	mov	r18, r24
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	c9 01       	movw	r24, r18
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	82 0f       	add	r24, r18
     e68:	93 1f       	adc	r25, r19
     e6a:	fc 01       	movw	r30, r24
     e6c:	e8 59       	subi	r30, 0x98	; 152
     e6e:	ff 4f       	sbci	r31, 0xFF	; 255
     e70:	80 81       	ld	r24, Z
     e72:	88 2f       	mov	r24, r24
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	9c 01       	movw	r18, r24
     e78:	28 51       	subi	r18, 0x18	; 24
     e7a:	30 40       	sbci	r19, 0x00	; 0
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	02 2e       	mov	r0, r18
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <DIO_Init+0x1fa>
     e84:	88 0f       	add	r24, r24
     e86:	99 1f       	adc	r25, r25
     e88:	0a 94       	dec	r0
     e8a:	e2 f7       	brpl	.-8      	; 0xe84 <DIO_Init+0x1f6>
     e8c:	80 95       	com	r24
     e8e:	84 23       	and	r24, r20
     e90:	8c 93       	st	X, r24
     e92:	f4 c0       	rjmp	.+488    	; 0x107c <DIO_Init+0x3ee>
			}//end else if
		}//end if

		else if(astrDIOConfigParameters[u8_i].enuPinDir == OUTPUT)
     e94:	89 81       	ldd	r24, Y+1	; 0x01
     e96:	28 2f       	mov	r18, r24
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	c9 01       	movw	r24, r18
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	82 0f       	add	r24, r18
     ea2:	93 1f       	adc	r25, r19
     ea4:	fc 01       	movw	r30, r24
     ea6:	e7 59       	subi	r30, 0x97	; 151
     ea8:	ff 4f       	sbci	r31, 0xFF	; 255
     eaa:	80 81       	ld	r24, Z
     eac:	81 30       	cpi	r24, 0x01	; 1
     eae:	09 f0       	breq	.+2      	; 0xeb2 <DIO_Init+0x224>
     eb0:	e5 c0       	rjmp	.+458    	; 0x107c <DIO_Init+0x3ee>
		{
			if((astrDIOConfigParameters[u8_i].enuPinNo >= 0) && (astrDIOConfigParameters[u8_i].enuPinNo < 8))	//if porta
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	28 2f       	mov	r18, r24
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	c9 01       	movw	r24, r18
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	82 0f       	add	r24, r18
     ec0:	93 1f       	adc	r25, r19
     ec2:	fc 01       	movw	r30, r24
     ec4:	e8 59       	subi	r30, 0x98	; 152
     ec6:	ff 4f       	sbci	r31, 0xFF	; 255
     ec8:	80 81       	ld	r24, Z
     eca:	88 30       	cpi	r24, 0x08	; 8
     ecc:	f8 f4       	brcc	.+62     	; 0xf0c <DIO_Init+0x27e>
			{
				SET_BIT(DDRA_R, astrDIOConfigParameters[u8_i].enuPinNo);
     ece:	aa e3       	ldi	r26, 0x3A	; 58
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	ea e3       	ldi	r30, 0x3A	; 58
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	48 2f       	mov	r20, r24
     eda:	89 81       	ldd	r24, Y+1	; 0x01
     edc:	28 2f       	mov	r18, r24
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	c9 01       	movw	r24, r18
     ee2:	88 0f       	add	r24, r24
     ee4:	99 1f       	adc	r25, r25
     ee6:	82 0f       	add	r24, r18
     ee8:	93 1f       	adc	r25, r19
     eea:	fc 01       	movw	r30, r24
     eec:	e8 59       	subi	r30, 0x98	; 152
     eee:	ff 4f       	sbci	r31, 0xFF	; 255
     ef0:	80 81       	ld	r24, Z
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	02 2e       	mov	r0, r18
     efc:	02 c0       	rjmp	.+4      	; 0xf02 <DIO_Init+0x274>
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	0a 94       	dec	r0
     f04:	e2 f7       	brpl	.-8      	; 0xefe <DIO_Init+0x270>
     f06:	84 2b       	or	r24, r20
     f08:	8c 93       	st	X, r24
     f0a:	b8 c0       	rjmp	.+368    	; 0x107c <DIO_Init+0x3ee>
			}//end if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 8) && (astrDIOConfigParameters[u8_i].enuPinNo < 16))	//if portb
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	c9 01       	movw	r24, r18
     f14:	88 0f       	add	r24, r24
     f16:	99 1f       	adc	r25, r25
     f18:	82 0f       	add	r24, r18
     f1a:	93 1f       	adc	r25, r19
     f1c:	fc 01       	movw	r30, r24
     f1e:	e8 59       	subi	r30, 0x98	; 152
     f20:	ff 4f       	sbci	r31, 0xFF	; 255
     f22:	80 81       	ld	r24, Z
     f24:	88 30       	cpi	r24, 0x08	; 8
     f26:	80 f1       	brcs	.+96     	; 0xf88 <DIO_Init+0x2fa>
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	c9 01       	movw	r24, r18
     f30:	88 0f       	add	r24, r24
     f32:	99 1f       	adc	r25, r25
     f34:	82 0f       	add	r24, r18
     f36:	93 1f       	adc	r25, r19
     f38:	fc 01       	movw	r30, r24
     f3a:	e8 59       	subi	r30, 0x98	; 152
     f3c:	ff 4f       	sbci	r31, 0xFF	; 255
     f3e:	80 81       	ld	r24, Z
     f40:	80 31       	cpi	r24, 0x10	; 16
     f42:	10 f5       	brcc	.+68     	; 0xf88 <DIO_Init+0x2fa>
			{
				SET_BIT(DDRB_R,(astrDIOConfigParameters[u8_i].enuPinNo - 8));
     f44:	a7 e3       	ldi	r26, 0x37	; 55
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e7 e3       	ldi	r30, 0x37	; 55
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	48 2f       	mov	r20, r24
     f50:	89 81       	ldd	r24, Y+1	; 0x01
     f52:	28 2f       	mov	r18, r24
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	c9 01       	movw	r24, r18
     f58:	88 0f       	add	r24, r24
     f5a:	99 1f       	adc	r25, r25
     f5c:	82 0f       	add	r24, r18
     f5e:	93 1f       	adc	r25, r19
     f60:	fc 01       	movw	r30, r24
     f62:	e8 59       	subi	r30, 0x98	; 152
     f64:	ff 4f       	sbci	r31, 0xFF	; 255
     f66:	80 81       	ld	r24, Z
     f68:	88 2f       	mov	r24, r24
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	9c 01       	movw	r18, r24
     f6e:	28 50       	subi	r18, 0x08	; 8
     f70:	30 40       	sbci	r19, 0x00	; 0
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	02 2e       	mov	r0, r18
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <DIO_Init+0x2f0>
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	0a 94       	dec	r0
     f80:	e2 f7       	brpl	.-8      	; 0xf7a <DIO_Init+0x2ec>
     f82:	84 2b       	or	r24, r20
     f84:	8c 93       	st	X, r24
     f86:	7a c0       	rjmp	.+244    	; 0x107c <DIO_Init+0x3ee>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 16) && (astrDIOConfigParameters[u8_i].enuPinNo < 24))	//if portc
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	28 2f       	mov	r18, r24
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	c9 01       	movw	r24, r18
     f90:	88 0f       	add	r24, r24
     f92:	99 1f       	adc	r25, r25
     f94:	82 0f       	add	r24, r18
     f96:	93 1f       	adc	r25, r19
     f98:	fc 01       	movw	r30, r24
     f9a:	e8 59       	subi	r30, 0x98	; 152
     f9c:	ff 4f       	sbci	r31, 0xFF	; 255
     f9e:	80 81       	ld	r24, Z
     fa0:	80 31       	cpi	r24, 0x10	; 16
     fa2:	80 f1       	brcs	.+96     	; 0x1004 <DIO_Init+0x376>
     fa4:	89 81       	ldd	r24, Y+1	; 0x01
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	c9 01       	movw	r24, r18
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	82 0f       	add	r24, r18
     fb2:	93 1f       	adc	r25, r19
     fb4:	fc 01       	movw	r30, r24
     fb6:	e8 59       	subi	r30, 0x98	; 152
     fb8:	ff 4f       	sbci	r31, 0xFF	; 255
     fba:	80 81       	ld	r24, Z
     fbc:	88 31       	cpi	r24, 0x18	; 24
     fbe:	10 f5       	brcc	.+68     	; 0x1004 <DIO_Init+0x376>
			{
				SET_BIT(DDRC_R,(astrDIOConfigParameters[u8_i].enuPinNo - 16));
     fc0:	a4 e3       	ldi	r26, 0x34	; 52
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e4 e3       	ldi	r30, 0x34	; 52
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	48 2f       	mov	r20, r24
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	c9 01       	movw	r24, r18
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	82 0f       	add	r24, r18
     fda:	93 1f       	adc	r25, r19
     fdc:	fc 01       	movw	r30, r24
     fde:	e8 59       	subi	r30, 0x98	; 152
     fe0:	ff 4f       	sbci	r31, 0xFF	; 255
     fe2:	80 81       	ld	r24, Z
     fe4:	88 2f       	mov	r24, r24
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	9c 01       	movw	r18, r24
     fea:	20 51       	subi	r18, 0x10	; 16
     fec:	30 40       	sbci	r19, 0x00	; 0
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	02 2e       	mov	r0, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <DIO_Init+0x36c>
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	0a 94       	dec	r0
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <DIO_Init+0x368>
     ffe:	84 2b       	or	r24, r20
    1000:	8c 93       	st	X, r24
    1002:	3c c0       	rjmp	.+120    	; 0x107c <DIO_Init+0x3ee>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 24) && (astrDIOConfigParameters[u8_i].enuPinNo < 32))	//if portd
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	c9 01       	movw	r24, r18
    100c:	88 0f       	add	r24, r24
    100e:	99 1f       	adc	r25, r25
    1010:	82 0f       	add	r24, r18
    1012:	93 1f       	adc	r25, r19
    1014:	fc 01       	movw	r30, r24
    1016:	e8 59       	subi	r30, 0x98	; 152
    1018:	ff 4f       	sbci	r31, 0xFF	; 255
    101a:	80 81       	ld	r24, Z
    101c:	88 31       	cpi	r24, 0x18	; 24
    101e:	70 f1       	brcs	.+92     	; 0x107c <DIO_Init+0x3ee>
    1020:	89 81       	ldd	r24, Y+1	; 0x01
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	c9 01       	movw	r24, r18
    1028:	88 0f       	add	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	82 0f       	add	r24, r18
    102e:	93 1f       	adc	r25, r19
    1030:	fc 01       	movw	r30, r24
    1032:	e8 59       	subi	r30, 0x98	; 152
    1034:	ff 4f       	sbci	r31, 0xFF	; 255
    1036:	80 81       	ld	r24, Z
    1038:	80 32       	cpi	r24, 0x20	; 32
    103a:	00 f5       	brcc	.+64     	; 0x107c <DIO_Init+0x3ee>
			{
				SET_BIT(DDRD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
    103c:	a1 e3       	ldi	r26, 0x31	; 49
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e1 e3       	ldi	r30, 0x31	; 49
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	48 2f       	mov	r20, r24
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	28 2f       	mov	r18, r24
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	c9 01       	movw	r24, r18
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	82 0f       	add	r24, r18
    1056:	93 1f       	adc	r25, r19
    1058:	fc 01       	movw	r30, r24
    105a:	e8 59       	subi	r30, 0x98	; 152
    105c:	ff 4f       	sbci	r31, 0xFF	; 255
    105e:	80 81       	ld	r24, Z
    1060:	88 2f       	mov	r24, r24
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	9c 01       	movw	r18, r24
    1066:	28 51       	subi	r18, 0x18	; 24
    1068:	30 40       	sbci	r19, 0x00	; 0
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	02 c0       	rjmp	.+4      	; 0x1074 <DIO_Init+0x3e6>
    1070:	88 0f       	add	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	2a 95       	dec	r18
    1076:	e2 f7       	brpl	.-8      	; 0x1070 <DIO_Init+0x3e2>
    1078:	84 2b       	or	r24, r20
    107a:	8c 93       	st	X, r24
			}//end else if
		}//end else if

		//enable or disable pull-up resistor
		if(astrDIOConfigParameters[u8_i].enuPinDir == INPUT &&
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	c9 01       	movw	r24, r18
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	82 0f       	add	r24, r18
    108a:	93 1f       	adc	r25, r19
    108c:	fc 01       	movw	r30, r24
    108e:	e7 59       	subi	r30, 0x97	; 151
    1090:	ff 4f       	sbci	r31, 0xFF	; 255
    1092:	80 81       	ld	r24, Z
    1094:	88 23       	and	r24, r24
    1096:	09 f0       	breq	.+2      	; 0x109a <DIO_Init+0x40c>
    1098:	fc c0       	rjmp	.+504    	; 0x1292 <DIO_Init+0x604>
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	c9 01       	movw	r24, r18
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	82 0f       	add	r24, r18
    10a8:	93 1f       	adc	r25, r19
    10aa:	fc 01       	movw	r30, r24
    10ac:	e6 59       	subi	r30, 0x96	; 150
    10ae:	ff 4f       	sbci	r31, 0xFF	; 255
    10b0:	80 81       	ld	r24, Z
    10b2:	88 23       	and	r24, r24
    10b4:	09 f0       	breq	.+2      	; 0x10b8 <DIO_Init+0x42a>
    10b6:	ed c0       	rjmp	.+474    	; 0x1292 <DIO_Init+0x604>
		   astrDIOConfigParameters[u8_i].enuPullupResEn == NO_CONNECTION)
		{
			if((astrDIOConfigParameters[u8_i].enuPinNo >= 0) && (astrDIOConfigParameters[u8_i].enuPinNo < 8))	//if porta
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	c9 01       	movw	r24, r18
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	82 0f       	add	r24, r18
    10c6:	93 1f       	adc	r25, r19
    10c8:	fc 01       	movw	r30, r24
    10ca:	e8 59       	subi	r30, 0x98	; 152
    10cc:	ff 4f       	sbci	r31, 0xFF	; 255
    10ce:	80 81       	ld	r24, Z
    10d0:	88 30       	cpi	r24, 0x08	; 8
    10d2:	00 f5       	brcc	.+64     	; 0x1114 <DIO_Init+0x486>
			{
				CLR_BIT(PORTA_R, astrDIOConfigParameters[u8_i].enuPinNo);
    10d4:	ab e3       	ldi	r26, 0x3B	; 59
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	eb e3       	ldi	r30, 0x3B	; 59
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	48 2f       	mov	r20, r24
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	c9 01       	movw	r24, r18
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	82 0f       	add	r24, r18
    10ee:	93 1f       	adc	r25, r19
    10f0:	fc 01       	movw	r30, r24
    10f2:	e8 59       	subi	r30, 0x98	; 152
    10f4:	ff 4f       	sbci	r31, 0xFF	; 255
    10f6:	80 81       	ld	r24, Z
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	02 2e       	mov	r0, r18
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <DIO_Init+0x47a>
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	0a 94       	dec	r0
    110a:	e2 f7       	brpl	.-8      	; 0x1104 <DIO_Init+0x476>
    110c:	80 95       	com	r24
    110e:	84 23       	and	r24, r20
    1110:	8c 93       	st	X, r24
    1112:	c3 c1       	rjmp	.+902    	; 0x149a <DIO_Init+0x80c>
			}//end if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 8) && (astrDIOConfigParameters[u8_i].enuPinNo < 16))	//if portb
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	28 2f       	mov	r18, r24
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	c9 01       	movw	r24, r18
    111c:	88 0f       	add	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	82 0f       	add	r24, r18
    1122:	93 1f       	adc	r25, r19
    1124:	fc 01       	movw	r30, r24
    1126:	e8 59       	subi	r30, 0x98	; 152
    1128:	ff 4f       	sbci	r31, 0xFF	; 255
    112a:	80 81       	ld	r24, Z
    112c:	88 30       	cpi	r24, 0x08	; 8
    112e:	88 f1       	brcs	.+98     	; 0x1192 <DIO_Init+0x504>
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	c9 01       	movw	r24, r18
    1138:	88 0f       	add	r24, r24
    113a:	99 1f       	adc	r25, r25
    113c:	82 0f       	add	r24, r18
    113e:	93 1f       	adc	r25, r19
    1140:	fc 01       	movw	r30, r24
    1142:	e8 59       	subi	r30, 0x98	; 152
    1144:	ff 4f       	sbci	r31, 0xFF	; 255
    1146:	80 81       	ld	r24, Z
    1148:	80 31       	cpi	r24, 0x10	; 16
    114a:	18 f5       	brcc	.+70     	; 0x1192 <DIO_Init+0x504>
			{
				CLR_BIT(PORTB_R,(astrDIOConfigParameters[u8_i].enuPinNo - 8));
    114c:	a8 e3       	ldi	r26, 0x38	; 56
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	e8 e3       	ldi	r30, 0x38	; 56
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	48 2f       	mov	r20, r24
    1158:	89 81       	ldd	r24, Y+1	; 0x01
    115a:	28 2f       	mov	r18, r24
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	c9 01       	movw	r24, r18
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	82 0f       	add	r24, r18
    1166:	93 1f       	adc	r25, r19
    1168:	fc 01       	movw	r30, r24
    116a:	e8 59       	subi	r30, 0x98	; 152
    116c:	ff 4f       	sbci	r31, 0xFF	; 255
    116e:	80 81       	ld	r24, Z
    1170:	88 2f       	mov	r24, r24
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	9c 01       	movw	r18, r24
    1176:	28 50       	subi	r18, 0x08	; 8
    1178:	30 40       	sbci	r19, 0x00	; 0
    117a:	81 e0       	ldi	r24, 0x01	; 1
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	02 2e       	mov	r0, r18
    1180:	02 c0       	rjmp	.+4      	; 0x1186 <DIO_Init+0x4f8>
    1182:	88 0f       	add	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	0a 94       	dec	r0
    1188:	e2 f7       	brpl	.-8      	; 0x1182 <DIO_Init+0x4f4>
    118a:	80 95       	com	r24
    118c:	84 23       	and	r24, r20
    118e:	8c 93       	st	X, r24
    1190:	84 c1       	rjmp	.+776    	; 0x149a <DIO_Init+0x80c>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 16) && (astrDIOConfigParameters[u8_i].enuPinNo < 24))	//if portc
    1192:	89 81       	ldd	r24, Y+1	; 0x01
    1194:	28 2f       	mov	r18, r24
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	c9 01       	movw	r24, r18
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	82 0f       	add	r24, r18
    11a0:	93 1f       	adc	r25, r19
    11a2:	fc 01       	movw	r30, r24
    11a4:	e8 59       	subi	r30, 0x98	; 152
    11a6:	ff 4f       	sbci	r31, 0xFF	; 255
    11a8:	80 81       	ld	r24, Z
    11aa:	80 31       	cpi	r24, 0x10	; 16
    11ac:	88 f1       	brcs	.+98     	; 0x1210 <DIO_Init+0x582>
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
    11b0:	28 2f       	mov	r18, r24
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	c9 01       	movw	r24, r18
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	82 0f       	add	r24, r18
    11bc:	93 1f       	adc	r25, r19
    11be:	fc 01       	movw	r30, r24
    11c0:	e8 59       	subi	r30, 0x98	; 152
    11c2:	ff 4f       	sbci	r31, 0xFF	; 255
    11c4:	80 81       	ld	r24, Z
    11c6:	88 31       	cpi	r24, 0x18	; 24
    11c8:	18 f5       	brcc	.+70     	; 0x1210 <DIO_Init+0x582>
			{
				CLR_BIT(PORTC_R,(astrDIOConfigParameters[u8_i].enuPinNo - 16));
    11ca:	a5 e3       	ldi	r26, 0x35	; 53
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e5 e3       	ldi	r30, 0x35	; 53
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	48 2f       	mov	r20, r24
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	c9 01       	movw	r24, r18
    11de:	88 0f       	add	r24, r24
    11e0:	99 1f       	adc	r25, r25
    11e2:	82 0f       	add	r24, r18
    11e4:	93 1f       	adc	r25, r19
    11e6:	fc 01       	movw	r30, r24
    11e8:	e8 59       	subi	r30, 0x98	; 152
    11ea:	ff 4f       	sbci	r31, 0xFF	; 255
    11ec:	80 81       	ld	r24, Z
    11ee:	88 2f       	mov	r24, r24
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	9c 01       	movw	r18, r24
    11f4:	20 51       	subi	r18, 0x10	; 16
    11f6:	30 40       	sbci	r19, 0x00	; 0
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	02 2e       	mov	r0, r18
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <DIO_Init+0x576>
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	0a 94       	dec	r0
    1206:	e2 f7       	brpl	.-8      	; 0x1200 <DIO_Init+0x572>
    1208:	80 95       	com	r24
    120a:	84 23       	and	r24, r20
    120c:	8c 93       	st	X, r24
    120e:	45 c1       	rjmp	.+650    	; 0x149a <DIO_Init+0x80c>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 24) && (astrDIOConfigParameters[u8_i].enuPinNo < 32))	//if portd
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	c9 01       	movw	r24, r18
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	82 0f       	add	r24, r18
    121e:	93 1f       	adc	r25, r19
    1220:	fc 01       	movw	r30, r24
    1222:	e8 59       	subi	r30, 0x98	; 152
    1224:	ff 4f       	sbci	r31, 0xFF	; 255
    1226:	80 81       	ld	r24, Z
    1228:	88 31       	cpi	r24, 0x18	; 24
    122a:	08 f4       	brcc	.+2      	; 0x122e <DIO_Init+0x5a0>
    122c:	36 c1       	rjmp	.+620    	; 0x149a <DIO_Init+0x80c>
    122e:	89 81       	ldd	r24, Y+1	; 0x01
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	c9 01       	movw	r24, r18
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	82 0f       	add	r24, r18
    123c:	93 1f       	adc	r25, r19
    123e:	fc 01       	movw	r30, r24
    1240:	e8 59       	subi	r30, 0x98	; 152
    1242:	ff 4f       	sbci	r31, 0xFF	; 255
    1244:	80 81       	ld	r24, Z
    1246:	80 32       	cpi	r24, 0x20	; 32
    1248:	08 f0       	brcs	.+2      	; 0x124c <DIO_Init+0x5be>
    124a:	27 c1       	rjmp	.+590    	; 0x149a <DIO_Init+0x80c>
			{
				CLR_BIT(PORTD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
    124c:	a2 e3       	ldi	r26, 0x32	; 50
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e2 e3       	ldi	r30, 0x32	; 50
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	48 2f       	mov	r20, r24
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	c9 01       	movw	r24, r18
    1260:	88 0f       	add	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	82 0f       	add	r24, r18
    1266:	93 1f       	adc	r25, r19
    1268:	fc 01       	movw	r30, r24
    126a:	e8 59       	subi	r30, 0x98	; 152
    126c:	ff 4f       	sbci	r31, 0xFF	; 255
    126e:	80 81       	ld	r24, Z
    1270:	88 2f       	mov	r24, r24
    1272:	90 e0       	ldi	r25, 0x00	; 0
    1274:	9c 01       	movw	r18, r24
    1276:	28 51       	subi	r18, 0x18	; 24
    1278:	30 40       	sbci	r19, 0x00	; 0
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	02 2e       	mov	r0, r18
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <DIO_Init+0x5f8>
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	0a 94       	dec	r0
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <DIO_Init+0x5f4>
    128a:	80 95       	com	r24
    128c:	84 23       	and	r24, r20
    128e:	8c 93       	st	X, r24
    1290:	04 c1       	rjmp	.+520    	; 0x149a <DIO_Init+0x80c>
			}//end else if
		}//end if

		else if(astrDIOConfigParameters[u8_i].enuPinDir == INPUT &&
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	c9 01       	movw	r24, r18
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	82 0f       	add	r24, r18
    12a0:	93 1f       	adc	r25, r19
    12a2:	fc 01       	movw	r30, r24
    12a4:	e7 59       	subi	r30, 0x97	; 151
    12a6:	ff 4f       	sbci	r31, 0xFF	; 255
    12a8:	80 81       	ld	r24, Z
    12aa:	88 23       	and	r24, r24
    12ac:	09 f0       	breq	.+2      	; 0x12b0 <DIO_Init+0x622>
    12ae:	f5 c0       	rjmp	.+490    	; 0x149a <DIO_Init+0x80c>
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	c9 01       	movw	r24, r18
    12b8:	88 0f       	add	r24, r24
    12ba:	99 1f       	adc	r25, r25
    12bc:	82 0f       	add	r24, r18
    12be:	93 1f       	adc	r25, r19
    12c0:	fc 01       	movw	r30, r24
    12c2:	e6 59       	subi	r30, 0x96	; 150
    12c4:	ff 4f       	sbci	r31, 0xFF	; 255
    12c6:	80 81       	ld	r24, Z
    12c8:	81 30       	cpi	r24, 0x01	; 1
    12ca:	09 f0       	breq	.+2      	; 0x12ce <DIO_Init+0x640>
    12cc:	e6 c0       	rjmp	.+460    	; 0x149a <DIO_Init+0x80c>
				astrDIOConfigParameters[u8_i].enuPullupResEn == PULL_UP_ENABLE)
		{
			if((astrDIOConfigParameters[u8_i].enuPinNo >= 0) && (astrDIOConfigParameters[u8_i].enuPinNo < 8))	//if porta
    12ce:	89 81       	ldd	r24, Y+1	; 0x01
    12d0:	28 2f       	mov	r18, r24
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	c9 01       	movw	r24, r18
    12d6:	88 0f       	add	r24, r24
    12d8:	99 1f       	adc	r25, r25
    12da:	82 0f       	add	r24, r18
    12dc:	93 1f       	adc	r25, r19
    12de:	fc 01       	movw	r30, r24
    12e0:	e8 59       	subi	r30, 0x98	; 152
    12e2:	ff 4f       	sbci	r31, 0xFF	; 255
    12e4:	80 81       	ld	r24, Z
    12e6:	88 30       	cpi	r24, 0x08	; 8
    12e8:	f8 f4       	brcc	.+62     	; 0x1328 <DIO_Init+0x69a>
			{
				SET_BIT(PORTA_R, astrDIOConfigParameters[u8_i].enuPinNo);
    12ea:	ab e3       	ldi	r26, 0x3B	; 59
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	eb e3       	ldi	r30, 0x3B	; 59
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	48 2f       	mov	r20, r24
    12f6:	89 81       	ldd	r24, Y+1	; 0x01
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	c9 01       	movw	r24, r18
    12fe:	88 0f       	add	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	82 0f       	add	r24, r18
    1304:	93 1f       	adc	r25, r19
    1306:	fc 01       	movw	r30, r24
    1308:	e8 59       	subi	r30, 0x98	; 152
    130a:	ff 4f       	sbci	r31, 0xFF	; 255
    130c:	80 81       	ld	r24, Z
    130e:	28 2f       	mov	r18, r24
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	02 2e       	mov	r0, r18
    1318:	02 c0       	rjmp	.+4      	; 0x131e <DIO_Init+0x690>
    131a:	88 0f       	add	r24, r24
    131c:	99 1f       	adc	r25, r25
    131e:	0a 94       	dec	r0
    1320:	e2 f7       	brpl	.-8      	; 0x131a <DIO_Init+0x68c>
    1322:	84 2b       	or	r24, r20
    1324:	8c 93       	st	X, r24
    1326:	b9 c0       	rjmp	.+370    	; 0x149a <DIO_Init+0x80c>
			}//end if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 8) && (astrDIOConfigParameters[u8_i].enuPinNo < 16))	//if portb
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	c9 01       	movw	r24, r18
    1330:	88 0f       	add	r24, r24
    1332:	99 1f       	adc	r25, r25
    1334:	82 0f       	add	r24, r18
    1336:	93 1f       	adc	r25, r19
    1338:	fc 01       	movw	r30, r24
    133a:	e8 59       	subi	r30, 0x98	; 152
    133c:	ff 4f       	sbci	r31, 0xFF	; 255
    133e:	80 81       	ld	r24, Z
    1340:	88 30       	cpi	r24, 0x08	; 8
    1342:	80 f1       	brcs	.+96     	; 0x13a4 <DIO_Init+0x716>
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	c9 01       	movw	r24, r18
    134c:	88 0f       	add	r24, r24
    134e:	99 1f       	adc	r25, r25
    1350:	82 0f       	add	r24, r18
    1352:	93 1f       	adc	r25, r19
    1354:	fc 01       	movw	r30, r24
    1356:	e8 59       	subi	r30, 0x98	; 152
    1358:	ff 4f       	sbci	r31, 0xFF	; 255
    135a:	80 81       	ld	r24, Z
    135c:	80 31       	cpi	r24, 0x10	; 16
    135e:	10 f5       	brcc	.+68     	; 0x13a4 <DIO_Init+0x716>
			{
				SET_BIT(PORTB_R,(astrDIOConfigParameters[u8_i].enuPinNo - 8));
    1360:	a8 e3       	ldi	r26, 0x38	; 56
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	e8 e3       	ldi	r30, 0x38	; 56
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	48 2f       	mov	r20, r24
    136c:	89 81       	ldd	r24, Y+1	; 0x01
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	c9 01       	movw	r24, r18
    1374:	88 0f       	add	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	82 0f       	add	r24, r18
    137a:	93 1f       	adc	r25, r19
    137c:	fc 01       	movw	r30, r24
    137e:	e8 59       	subi	r30, 0x98	; 152
    1380:	ff 4f       	sbci	r31, 0xFF	; 255
    1382:	80 81       	ld	r24, Z
    1384:	88 2f       	mov	r24, r24
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	9c 01       	movw	r18, r24
    138a:	28 50       	subi	r18, 0x08	; 8
    138c:	30 40       	sbci	r19, 0x00	; 0
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	02 2e       	mov	r0, r18
    1394:	02 c0       	rjmp	.+4      	; 0x139a <DIO_Init+0x70c>
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	0a 94       	dec	r0
    139c:	e2 f7       	brpl	.-8      	; 0x1396 <DIO_Init+0x708>
    139e:	84 2b       	or	r24, r20
    13a0:	8c 93       	st	X, r24
    13a2:	7b c0       	rjmp	.+246    	; 0x149a <DIO_Init+0x80c>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 16) && (astrDIOConfigParameters[u8_i].enuPinNo < 24))	//if portc
    13a4:	89 81       	ldd	r24, Y+1	; 0x01
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	c9 01       	movw	r24, r18
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	82 0f       	add	r24, r18
    13b2:	93 1f       	adc	r25, r19
    13b4:	fc 01       	movw	r30, r24
    13b6:	e8 59       	subi	r30, 0x98	; 152
    13b8:	ff 4f       	sbci	r31, 0xFF	; 255
    13ba:	80 81       	ld	r24, Z
    13bc:	80 31       	cpi	r24, 0x10	; 16
    13be:	80 f1       	brcs	.+96     	; 0x1420 <DIO_Init+0x792>
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	c9 01       	movw	r24, r18
    13c8:	88 0f       	add	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	82 0f       	add	r24, r18
    13ce:	93 1f       	adc	r25, r19
    13d0:	fc 01       	movw	r30, r24
    13d2:	e8 59       	subi	r30, 0x98	; 152
    13d4:	ff 4f       	sbci	r31, 0xFF	; 255
    13d6:	80 81       	ld	r24, Z
    13d8:	88 31       	cpi	r24, 0x18	; 24
    13da:	10 f5       	brcc	.+68     	; 0x1420 <DIO_Init+0x792>
			{
				SET_BIT(PORTC_R,(astrDIOConfigParameters[u8_i].enuPinNo - 16));
    13dc:	a5 e3       	ldi	r26, 0x35	; 53
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e5 e3       	ldi	r30, 0x35	; 53
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	48 2f       	mov	r20, r24
    13e8:	89 81       	ldd	r24, Y+1	; 0x01
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	c9 01       	movw	r24, r18
    13f0:	88 0f       	add	r24, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	82 0f       	add	r24, r18
    13f6:	93 1f       	adc	r25, r19
    13f8:	fc 01       	movw	r30, r24
    13fa:	e8 59       	subi	r30, 0x98	; 152
    13fc:	ff 4f       	sbci	r31, 0xFF	; 255
    13fe:	80 81       	ld	r24, Z
    1400:	88 2f       	mov	r24, r24
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	9c 01       	movw	r18, r24
    1406:	20 51       	subi	r18, 0x10	; 16
    1408:	30 40       	sbci	r19, 0x00	; 0
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	02 2e       	mov	r0, r18
    1410:	02 c0       	rjmp	.+4      	; 0x1416 <DIO_Init+0x788>
    1412:	88 0f       	add	r24, r24
    1414:	99 1f       	adc	r25, r25
    1416:	0a 94       	dec	r0
    1418:	e2 f7       	brpl	.-8      	; 0x1412 <DIO_Init+0x784>
    141a:	84 2b       	or	r24, r20
    141c:	8c 93       	st	X, r24
    141e:	3d c0       	rjmp	.+122    	; 0x149a <DIO_Init+0x80c>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 24) && (astrDIOConfigParameters[u8_i].enuPinNo < 32))	//if portd
    1420:	89 81       	ldd	r24, Y+1	; 0x01
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	c9 01       	movw	r24, r18
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	82 0f       	add	r24, r18
    142e:	93 1f       	adc	r25, r19
    1430:	fc 01       	movw	r30, r24
    1432:	e8 59       	subi	r30, 0x98	; 152
    1434:	ff 4f       	sbci	r31, 0xFF	; 255
    1436:	80 81       	ld	r24, Z
    1438:	88 31       	cpi	r24, 0x18	; 24
    143a:	78 f1       	brcs	.+94     	; 0x149a <DIO_Init+0x80c>
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	c9 01       	movw	r24, r18
    1444:	88 0f       	add	r24, r24
    1446:	99 1f       	adc	r25, r25
    1448:	82 0f       	add	r24, r18
    144a:	93 1f       	adc	r25, r19
    144c:	fc 01       	movw	r30, r24
    144e:	e8 59       	subi	r30, 0x98	; 152
    1450:	ff 4f       	sbci	r31, 0xFF	; 255
    1452:	80 81       	ld	r24, Z
    1454:	80 32       	cpi	r24, 0x20	; 32
    1456:	08 f5       	brcc	.+66     	; 0x149a <DIO_Init+0x80c>
			{
				SET_BIT(PORTD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
    1458:	a2 e3       	ldi	r26, 0x32	; 50
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	e2 e3       	ldi	r30, 0x32	; 50
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	48 2f       	mov	r20, r24
    1464:	89 81       	ldd	r24, Y+1	; 0x01
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	c9 01       	movw	r24, r18
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	82 0f       	add	r24, r18
    1472:	93 1f       	adc	r25, r19
    1474:	fc 01       	movw	r30, r24
    1476:	e8 59       	subi	r30, 0x98	; 152
    1478:	ff 4f       	sbci	r31, 0xFF	; 255
    147a:	80 81       	ld	r24, Z
    147c:	88 2f       	mov	r24, r24
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	9c 01       	movw	r18, r24
    1482:	28 51       	subi	r18, 0x18	; 24
    1484:	30 40       	sbci	r19, 0x00	; 0
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	02 2e       	mov	r0, r18
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <DIO_Init+0x804>
    148e:	88 0f       	add	r24, r24
    1490:	99 1f       	adc	r25, r25
    1492:	0a 94       	dec	r0
    1494:	e2 f7       	brpl	.-8      	; 0x148e <DIO_Init+0x800>
    1496:	84 2b       	or	r24, r20
    1498:	8c 93       	st	X, r24
*************************************************************************************************/
enuErrorStatus_t DIO_Init(void)
{
	uint8_t u8_i;

	for(u8_i=0; u8_i<DIO_GROUPS_NO; u8_i++)
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	8f 5f       	subi	r24, 0xFF	; 255
    149e:	89 83       	std	Y+1, r24	; 0x01
    14a0:	89 81       	ldd	r24, Y+1	; 0x01
    14a2:	87 30       	cpi	r24, 0x07	; 7
    14a4:	08 f4       	brcc	.+2      	; 0x14a8 <DIO_Init+0x81a>
    14a6:	fa cb       	rjmp	.-2060   	; 0xc9c <DIO_Init+0xe>
				SET_BIT(PORTD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
			}//end else if
		}//end else if

	}//end for
    return E_OK;
    14a8:	81 e0       	ldi	r24, 0x01	; 1
}//end DIO_Init
    14aa:	0f 90       	pop	r0
    14ac:	cf 91       	pop	r28
    14ae:	df 91       	pop	r29
    14b0:	08 95       	ret

000014b2 <DIO_Write>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to write a digital value into the selected DIO pin
*************************************************************************************************/
enuErrorStatus_t DIO_Write(uint8_t u8_GroupId, uint8_t u8_Data)
{
    14b2:	df 93       	push	r29
    14b4:	cf 93       	push	r28
    14b6:	00 d0       	rcall	.+0      	; 0x14b8 <DIO_Write+0x6>
    14b8:	cd b7       	in	r28, 0x3d	; 61
    14ba:	de b7       	in	r29, 0x3e	; 62
    14bc:	89 83       	std	Y+1, r24	; 0x01
    14be:	6a 83       	std	Y+2, r22	; 0x02
//	if(DIO_Init() == E_ERROR)	return E_ERROR;
//	else{

		if (u8_Data == LOW)
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	88 23       	and	r24, r24
    14c4:	09 f0       	breq	.+2      	; 0x14c8 <DIO_Write+0x16>
    14c6:	ed c0       	rjmp	.+474    	; 0x16a2 <DIO_Write+0x1f0>
	    {
			if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 0) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 8))	//if porta
    14c8:	89 81       	ldd	r24, Y+1	; 0x01
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	c9 01       	movw	r24, r18
    14d0:	88 0f       	add	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	82 0f       	add	r24, r18
    14d6:	93 1f       	adc	r25, r19
    14d8:	fc 01       	movw	r30, r24
    14da:	e8 59       	subi	r30, 0x98	; 152
    14dc:	ff 4f       	sbci	r31, 0xFF	; 255
    14de:	80 81       	ld	r24, Z
    14e0:	88 30       	cpi	r24, 0x08	; 8
    14e2:	00 f5       	brcc	.+64     	; 0x1524 <DIO_Write+0x72>
			{
				CLR_BIT(PORTA_R, astrDIOConfigParameters[u8_GroupId].enuPinNo);
    14e4:	ab e3       	ldi	r26, 0x3B	; 59
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	eb e3       	ldi	r30, 0x3B	; 59
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	48 2f       	mov	r20, r24
    14f0:	89 81       	ldd	r24, Y+1	; 0x01
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	c9 01       	movw	r24, r18
    14f8:	88 0f       	add	r24, r24
    14fa:	99 1f       	adc	r25, r25
    14fc:	82 0f       	add	r24, r18
    14fe:	93 1f       	adc	r25, r19
    1500:	fc 01       	movw	r30, r24
    1502:	e8 59       	subi	r30, 0x98	; 152
    1504:	ff 4f       	sbci	r31, 0xFF	; 255
    1506:	80 81       	ld	r24, Z
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	02 2e       	mov	r0, r18
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <DIO_Write+0x66>
    1514:	88 0f       	add	r24, r24
    1516:	99 1f       	adc	r25, r25
    1518:	0a 94       	dec	r0
    151a:	e2 f7       	brpl	.-8      	; 0x1514 <DIO_Write+0x62>
    151c:	80 95       	com	r24
    151e:	84 23       	and	r24, r20
    1520:	8c 93       	st	X, r24
    1522:	a9 c1       	rjmp	.+850    	; 0x1876 <DIO_Write+0x3c4>
			}//end if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 8) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 16))	//if portb
    1524:	89 81       	ldd	r24, Y+1	; 0x01
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	c9 01       	movw	r24, r18
    152c:	88 0f       	add	r24, r24
    152e:	99 1f       	adc	r25, r25
    1530:	82 0f       	add	r24, r18
    1532:	93 1f       	adc	r25, r19
    1534:	fc 01       	movw	r30, r24
    1536:	e8 59       	subi	r30, 0x98	; 152
    1538:	ff 4f       	sbci	r31, 0xFF	; 255
    153a:	80 81       	ld	r24, Z
    153c:	88 30       	cpi	r24, 0x08	; 8
    153e:	88 f1       	brcs	.+98     	; 0x15a2 <DIO_Write+0xf0>
    1540:	89 81       	ldd	r24, Y+1	; 0x01
    1542:	28 2f       	mov	r18, r24
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	c9 01       	movw	r24, r18
    1548:	88 0f       	add	r24, r24
    154a:	99 1f       	adc	r25, r25
    154c:	82 0f       	add	r24, r18
    154e:	93 1f       	adc	r25, r19
    1550:	fc 01       	movw	r30, r24
    1552:	e8 59       	subi	r30, 0x98	; 152
    1554:	ff 4f       	sbci	r31, 0xFF	; 255
    1556:	80 81       	ld	r24, Z
    1558:	80 31       	cpi	r24, 0x10	; 16
    155a:	18 f5       	brcc	.+70     	; 0x15a2 <DIO_Write+0xf0>
			{
				CLR_BIT(PORTB_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 8));
    155c:	a8 e3       	ldi	r26, 0x38	; 56
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	e8 e3       	ldi	r30, 0x38	; 56
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	48 2f       	mov	r20, r24
    1568:	89 81       	ldd	r24, Y+1	; 0x01
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	c9 01       	movw	r24, r18
    1570:	88 0f       	add	r24, r24
    1572:	99 1f       	adc	r25, r25
    1574:	82 0f       	add	r24, r18
    1576:	93 1f       	adc	r25, r19
    1578:	fc 01       	movw	r30, r24
    157a:	e8 59       	subi	r30, 0x98	; 152
    157c:	ff 4f       	sbci	r31, 0xFF	; 255
    157e:	80 81       	ld	r24, Z
    1580:	88 2f       	mov	r24, r24
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	9c 01       	movw	r18, r24
    1586:	28 50       	subi	r18, 0x08	; 8
    1588:	30 40       	sbci	r19, 0x00	; 0
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	02 2e       	mov	r0, r18
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <DIO_Write+0xe4>
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	0a 94       	dec	r0
    1598:	e2 f7       	brpl	.-8      	; 0x1592 <DIO_Write+0xe0>
    159a:	80 95       	com	r24
    159c:	84 23       	and	r24, r20
    159e:	8c 93       	st	X, r24
    15a0:	6a c1       	rjmp	.+724    	; 0x1876 <DIO_Write+0x3c4>
			}//end else if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 16) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 24))	//if portc
    15a2:	89 81       	ldd	r24, Y+1	; 0x01
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	c9 01       	movw	r24, r18
    15aa:	88 0f       	add	r24, r24
    15ac:	99 1f       	adc	r25, r25
    15ae:	82 0f       	add	r24, r18
    15b0:	93 1f       	adc	r25, r19
    15b2:	fc 01       	movw	r30, r24
    15b4:	e8 59       	subi	r30, 0x98	; 152
    15b6:	ff 4f       	sbci	r31, 0xFF	; 255
    15b8:	80 81       	ld	r24, Z
    15ba:	80 31       	cpi	r24, 0x10	; 16
    15bc:	88 f1       	brcs	.+98     	; 0x1620 <DIO_Write+0x16e>
    15be:	89 81       	ldd	r24, Y+1	; 0x01
    15c0:	28 2f       	mov	r18, r24
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	c9 01       	movw	r24, r18
    15c6:	88 0f       	add	r24, r24
    15c8:	99 1f       	adc	r25, r25
    15ca:	82 0f       	add	r24, r18
    15cc:	93 1f       	adc	r25, r19
    15ce:	fc 01       	movw	r30, r24
    15d0:	e8 59       	subi	r30, 0x98	; 152
    15d2:	ff 4f       	sbci	r31, 0xFF	; 255
    15d4:	80 81       	ld	r24, Z
    15d6:	88 31       	cpi	r24, 0x18	; 24
    15d8:	18 f5       	brcc	.+70     	; 0x1620 <DIO_Write+0x16e>
			{
				CLR_BIT(PORTC_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 16));
    15da:	a5 e3       	ldi	r26, 0x35	; 53
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	e5 e3       	ldi	r30, 0x35	; 53
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	48 2f       	mov	r20, r24
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	28 2f       	mov	r18, r24
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	c9 01       	movw	r24, r18
    15ee:	88 0f       	add	r24, r24
    15f0:	99 1f       	adc	r25, r25
    15f2:	82 0f       	add	r24, r18
    15f4:	93 1f       	adc	r25, r19
    15f6:	fc 01       	movw	r30, r24
    15f8:	e8 59       	subi	r30, 0x98	; 152
    15fa:	ff 4f       	sbci	r31, 0xFF	; 255
    15fc:	80 81       	ld	r24, Z
    15fe:	88 2f       	mov	r24, r24
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	9c 01       	movw	r18, r24
    1604:	20 51       	subi	r18, 0x10	; 16
    1606:	30 40       	sbci	r19, 0x00	; 0
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	02 2e       	mov	r0, r18
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <DIO_Write+0x162>
    1610:	88 0f       	add	r24, r24
    1612:	99 1f       	adc	r25, r25
    1614:	0a 94       	dec	r0
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <DIO_Write+0x15e>
    1618:	80 95       	com	r24
    161a:	84 23       	and	r24, r20
    161c:	8c 93       	st	X, r24
    161e:	2b c1       	rjmp	.+598    	; 0x1876 <DIO_Write+0x3c4>
			}//end else if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 24) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 32))	//if portd
    1620:	89 81       	ldd	r24, Y+1	; 0x01
    1622:	28 2f       	mov	r18, r24
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	c9 01       	movw	r24, r18
    1628:	88 0f       	add	r24, r24
    162a:	99 1f       	adc	r25, r25
    162c:	82 0f       	add	r24, r18
    162e:	93 1f       	adc	r25, r19
    1630:	fc 01       	movw	r30, r24
    1632:	e8 59       	subi	r30, 0x98	; 152
    1634:	ff 4f       	sbci	r31, 0xFF	; 255
    1636:	80 81       	ld	r24, Z
    1638:	88 31       	cpi	r24, 0x18	; 24
    163a:	08 f4       	brcc	.+2      	; 0x163e <DIO_Write+0x18c>
    163c:	1c c1       	rjmp	.+568    	; 0x1876 <DIO_Write+0x3c4>
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	c9 01       	movw	r24, r18
    1646:	88 0f       	add	r24, r24
    1648:	99 1f       	adc	r25, r25
    164a:	82 0f       	add	r24, r18
    164c:	93 1f       	adc	r25, r19
    164e:	fc 01       	movw	r30, r24
    1650:	e8 59       	subi	r30, 0x98	; 152
    1652:	ff 4f       	sbci	r31, 0xFF	; 255
    1654:	80 81       	ld	r24, Z
    1656:	80 32       	cpi	r24, 0x20	; 32
    1658:	08 f0       	brcs	.+2      	; 0x165c <DIO_Write+0x1aa>
    165a:	0d c1       	rjmp	.+538    	; 0x1876 <DIO_Write+0x3c4>
			{
				CLR_BIT(PORTD_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 24));
    165c:	a2 e3       	ldi	r26, 0x32	; 50
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	e2 e3       	ldi	r30, 0x32	; 50
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	48 2f       	mov	r20, r24
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	c9 01       	movw	r24, r18
    1670:	88 0f       	add	r24, r24
    1672:	99 1f       	adc	r25, r25
    1674:	82 0f       	add	r24, r18
    1676:	93 1f       	adc	r25, r19
    1678:	fc 01       	movw	r30, r24
    167a:	e8 59       	subi	r30, 0x98	; 152
    167c:	ff 4f       	sbci	r31, 0xFF	; 255
    167e:	80 81       	ld	r24, Z
    1680:	88 2f       	mov	r24, r24
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	9c 01       	movw	r18, r24
    1686:	28 51       	subi	r18, 0x18	; 24
    1688:	30 40       	sbci	r19, 0x00	; 0
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	02 2e       	mov	r0, r18
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <DIO_Write+0x1e4>
    1692:	88 0f       	add	r24, r24
    1694:	99 1f       	adc	r25, r25
    1696:	0a 94       	dec	r0
    1698:	e2 f7       	brpl	.-8      	; 0x1692 <DIO_Write+0x1e0>
    169a:	80 95       	com	r24
    169c:	84 23       	and	r24, r20
    169e:	8c 93       	st	X, r24
    16a0:	ea c0       	rjmp	.+468    	; 0x1876 <DIO_Write+0x3c4>
			}//end else if
	    }//end if

	    else if(u8_Data == HIGH)
    16a2:	8a 81       	ldd	r24, Y+2	; 0x02
    16a4:	81 30       	cpi	r24, 0x01	; 1
    16a6:	09 f0       	breq	.+2      	; 0x16aa <DIO_Write+0x1f8>
    16a8:	e6 c0       	rjmp	.+460    	; 0x1876 <DIO_Write+0x3c4>
	    {
			if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 0) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 8))	//if porta
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	28 2f       	mov	r18, r24
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	c9 01       	movw	r24, r18
    16b2:	88 0f       	add	r24, r24
    16b4:	99 1f       	adc	r25, r25
    16b6:	82 0f       	add	r24, r18
    16b8:	93 1f       	adc	r25, r19
    16ba:	fc 01       	movw	r30, r24
    16bc:	e8 59       	subi	r30, 0x98	; 152
    16be:	ff 4f       	sbci	r31, 0xFF	; 255
    16c0:	80 81       	ld	r24, Z
    16c2:	88 30       	cpi	r24, 0x08	; 8
    16c4:	f8 f4       	brcc	.+62     	; 0x1704 <DIO_Write+0x252>
			{
				SET_BIT(PORTA_R, astrDIOConfigParameters[u8_GroupId].enuPinNo);
    16c6:	ab e3       	ldi	r26, 0x3B	; 59
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	eb e3       	ldi	r30, 0x3B	; 59
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	48 2f       	mov	r20, r24
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	c9 01       	movw	r24, r18
    16da:	88 0f       	add	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	82 0f       	add	r24, r18
    16e0:	93 1f       	adc	r25, r19
    16e2:	fc 01       	movw	r30, r24
    16e4:	e8 59       	subi	r30, 0x98	; 152
    16e6:	ff 4f       	sbci	r31, 0xFF	; 255
    16e8:	80 81       	ld	r24, Z
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	02 2e       	mov	r0, r18
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <DIO_Write+0x248>
    16f6:	88 0f       	add	r24, r24
    16f8:	99 1f       	adc	r25, r25
    16fa:	0a 94       	dec	r0
    16fc:	e2 f7       	brpl	.-8      	; 0x16f6 <DIO_Write+0x244>
    16fe:	84 2b       	or	r24, r20
    1700:	8c 93       	st	X, r24
    1702:	b9 c0       	rjmp	.+370    	; 0x1876 <DIO_Write+0x3c4>
			}//end if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 8) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 16))	//if portb
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	28 2f       	mov	r18, r24
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	c9 01       	movw	r24, r18
    170c:	88 0f       	add	r24, r24
    170e:	99 1f       	adc	r25, r25
    1710:	82 0f       	add	r24, r18
    1712:	93 1f       	adc	r25, r19
    1714:	fc 01       	movw	r30, r24
    1716:	e8 59       	subi	r30, 0x98	; 152
    1718:	ff 4f       	sbci	r31, 0xFF	; 255
    171a:	80 81       	ld	r24, Z
    171c:	88 30       	cpi	r24, 0x08	; 8
    171e:	80 f1       	brcs	.+96     	; 0x1780 <DIO_Write+0x2ce>
    1720:	89 81       	ldd	r24, Y+1	; 0x01
    1722:	28 2f       	mov	r18, r24
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	c9 01       	movw	r24, r18
    1728:	88 0f       	add	r24, r24
    172a:	99 1f       	adc	r25, r25
    172c:	82 0f       	add	r24, r18
    172e:	93 1f       	adc	r25, r19
    1730:	fc 01       	movw	r30, r24
    1732:	e8 59       	subi	r30, 0x98	; 152
    1734:	ff 4f       	sbci	r31, 0xFF	; 255
    1736:	80 81       	ld	r24, Z
    1738:	80 31       	cpi	r24, 0x10	; 16
    173a:	10 f5       	brcc	.+68     	; 0x1780 <DIO_Write+0x2ce>
			{
				SET_BIT(PORTB_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 8));
    173c:	a8 e3       	ldi	r26, 0x38	; 56
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	e8 e3       	ldi	r30, 0x38	; 56
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	48 2f       	mov	r20, r24
    1748:	89 81       	ldd	r24, Y+1	; 0x01
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	c9 01       	movw	r24, r18
    1750:	88 0f       	add	r24, r24
    1752:	99 1f       	adc	r25, r25
    1754:	82 0f       	add	r24, r18
    1756:	93 1f       	adc	r25, r19
    1758:	fc 01       	movw	r30, r24
    175a:	e8 59       	subi	r30, 0x98	; 152
    175c:	ff 4f       	sbci	r31, 0xFF	; 255
    175e:	80 81       	ld	r24, Z
    1760:	88 2f       	mov	r24, r24
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	9c 01       	movw	r18, r24
    1766:	28 50       	subi	r18, 0x08	; 8
    1768:	30 40       	sbci	r19, 0x00	; 0
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	02 2e       	mov	r0, r18
    1770:	02 c0       	rjmp	.+4      	; 0x1776 <DIO_Write+0x2c4>
    1772:	88 0f       	add	r24, r24
    1774:	99 1f       	adc	r25, r25
    1776:	0a 94       	dec	r0
    1778:	e2 f7       	brpl	.-8      	; 0x1772 <DIO_Write+0x2c0>
    177a:	84 2b       	or	r24, r20
    177c:	8c 93       	st	X, r24
    177e:	7b c0       	rjmp	.+246    	; 0x1876 <DIO_Write+0x3c4>
			}//end else if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 16) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 24))	//if portc
    1780:	89 81       	ldd	r24, Y+1	; 0x01
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	c9 01       	movw	r24, r18
    1788:	88 0f       	add	r24, r24
    178a:	99 1f       	adc	r25, r25
    178c:	82 0f       	add	r24, r18
    178e:	93 1f       	adc	r25, r19
    1790:	fc 01       	movw	r30, r24
    1792:	e8 59       	subi	r30, 0x98	; 152
    1794:	ff 4f       	sbci	r31, 0xFF	; 255
    1796:	80 81       	ld	r24, Z
    1798:	80 31       	cpi	r24, 0x10	; 16
    179a:	80 f1       	brcs	.+96     	; 0x17fc <DIO_Write+0x34a>
    179c:	89 81       	ldd	r24, Y+1	; 0x01
    179e:	28 2f       	mov	r18, r24
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	c9 01       	movw	r24, r18
    17a4:	88 0f       	add	r24, r24
    17a6:	99 1f       	adc	r25, r25
    17a8:	82 0f       	add	r24, r18
    17aa:	93 1f       	adc	r25, r19
    17ac:	fc 01       	movw	r30, r24
    17ae:	e8 59       	subi	r30, 0x98	; 152
    17b0:	ff 4f       	sbci	r31, 0xFF	; 255
    17b2:	80 81       	ld	r24, Z
    17b4:	88 31       	cpi	r24, 0x18	; 24
    17b6:	10 f5       	brcc	.+68     	; 0x17fc <DIO_Write+0x34a>
			{
				SET_BIT(PORTC_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 16));
    17b8:	a5 e3       	ldi	r26, 0x35	; 53
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	e5 e3       	ldi	r30, 0x35	; 53
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	48 2f       	mov	r20, r24
    17c4:	89 81       	ldd	r24, Y+1	; 0x01
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	c9 01       	movw	r24, r18
    17cc:	88 0f       	add	r24, r24
    17ce:	99 1f       	adc	r25, r25
    17d0:	82 0f       	add	r24, r18
    17d2:	93 1f       	adc	r25, r19
    17d4:	fc 01       	movw	r30, r24
    17d6:	e8 59       	subi	r30, 0x98	; 152
    17d8:	ff 4f       	sbci	r31, 0xFF	; 255
    17da:	80 81       	ld	r24, Z
    17dc:	88 2f       	mov	r24, r24
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	9c 01       	movw	r18, r24
    17e2:	20 51       	subi	r18, 0x10	; 16
    17e4:	30 40       	sbci	r19, 0x00	; 0
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	02 2e       	mov	r0, r18
    17ec:	02 c0       	rjmp	.+4      	; 0x17f2 <DIO_Write+0x340>
    17ee:	88 0f       	add	r24, r24
    17f0:	99 1f       	adc	r25, r25
    17f2:	0a 94       	dec	r0
    17f4:	e2 f7       	brpl	.-8      	; 0x17ee <DIO_Write+0x33c>
    17f6:	84 2b       	or	r24, r20
    17f8:	8c 93       	st	X, r24
    17fa:	3d c0       	rjmp	.+122    	; 0x1876 <DIO_Write+0x3c4>
			}//end else if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 24) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 32))	//if portd
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
    17fe:	28 2f       	mov	r18, r24
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	c9 01       	movw	r24, r18
    1804:	88 0f       	add	r24, r24
    1806:	99 1f       	adc	r25, r25
    1808:	82 0f       	add	r24, r18
    180a:	93 1f       	adc	r25, r19
    180c:	fc 01       	movw	r30, r24
    180e:	e8 59       	subi	r30, 0x98	; 152
    1810:	ff 4f       	sbci	r31, 0xFF	; 255
    1812:	80 81       	ld	r24, Z
    1814:	88 31       	cpi	r24, 0x18	; 24
    1816:	78 f1       	brcs	.+94     	; 0x1876 <DIO_Write+0x3c4>
    1818:	89 81       	ldd	r24, Y+1	; 0x01
    181a:	28 2f       	mov	r18, r24
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	c9 01       	movw	r24, r18
    1820:	88 0f       	add	r24, r24
    1822:	99 1f       	adc	r25, r25
    1824:	82 0f       	add	r24, r18
    1826:	93 1f       	adc	r25, r19
    1828:	fc 01       	movw	r30, r24
    182a:	e8 59       	subi	r30, 0x98	; 152
    182c:	ff 4f       	sbci	r31, 0xFF	; 255
    182e:	80 81       	ld	r24, Z
    1830:	80 32       	cpi	r24, 0x20	; 32
    1832:	08 f5       	brcc	.+66     	; 0x1876 <DIO_Write+0x3c4>
			{
				SET_BIT(PORTD_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 24));
    1834:	a2 e3       	ldi	r26, 0x32	; 50
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	e2 e3       	ldi	r30, 0x32	; 50
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	48 2f       	mov	r20, r24
    1840:	89 81       	ldd	r24, Y+1	; 0x01
    1842:	28 2f       	mov	r18, r24
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	c9 01       	movw	r24, r18
    1848:	88 0f       	add	r24, r24
    184a:	99 1f       	adc	r25, r25
    184c:	82 0f       	add	r24, r18
    184e:	93 1f       	adc	r25, r19
    1850:	fc 01       	movw	r30, r24
    1852:	e8 59       	subi	r30, 0x98	; 152
    1854:	ff 4f       	sbci	r31, 0xFF	; 255
    1856:	80 81       	ld	r24, Z
    1858:	88 2f       	mov	r24, r24
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	9c 01       	movw	r18, r24
    185e:	28 51       	subi	r18, 0x18	; 24
    1860:	30 40       	sbci	r19, 0x00	; 0
    1862:	81 e0       	ldi	r24, 0x01	; 1
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	02 2e       	mov	r0, r18
    1868:	02 c0       	rjmp	.+4      	; 0x186e <DIO_Write+0x3bc>
    186a:	88 0f       	add	r24, r24
    186c:	99 1f       	adc	r25, r25
    186e:	0a 94       	dec	r0
    1870:	e2 f7       	brpl	.-8      	; 0x186a <DIO_Write+0x3b8>
    1872:	84 2b       	or	r24, r20
    1874:	8c 93       	st	X, r24
			}//end else if
	    }//end else if
		return E_OK;
    1876:	81 e0       	ldi	r24, 0x01	; 1
}//end DIO_write
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	cf 91       	pop	r28
    187e:	df 91       	pop	r29
    1880:	08 95       	ret

00001882 <DIO_Read>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to read a digital value from the selected DIO pin
*************************************************************************************************/
enuErrorStatus_t DIO_Read(uint8_t u8_GroupId, uint8_t* pu8_Data)
{
    1882:	df 93       	push	r29
    1884:	cf 93       	push	r28
    1886:	00 d0       	rcall	.+0      	; 0x1888 <DIO_Read+0x6>
    1888:	00 d0       	rcall	.+0      	; 0x188a <DIO_Read+0x8>
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
    188e:	89 83       	std	Y+1, r24	; 0x01
    1890:	7b 83       	std	Y+3, r23	; 0x03
    1892:	6a 83       	std	Y+2, r22	; 0x02
	if(pu8_Data == NULL_PTR)		return E_ERROR;
    1894:	8a 81       	ldd	r24, Y+2	; 0x02
    1896:	9b 81       	ldd	r25, Y+3	; 0x03
    1898:	00 97       	sbiw	r24, 0x00	; 0
    189a:	11 f4       	brne	.+4      	; 0x18a0 <DIO_Read+0x1e>
    189c:	1c 82       	std	Y+4, r1	; 0x04
    189e:	e8 c0       	rjmp	.+464    	; 0x1a70 <DIO_Read+0x1ee>
	else
	{
		if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 0) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 8))	//if porta
    18a0:	89 81       	ldd	r24, Y+1	; 0x01
    18a2:	28 2f       	mov	r18, r24
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	c9 01       	movw	r24, r18
    18a8:	88 0f       	add	r24, r24
    18aa:	99 1f       	adc	r25, r25
    18ac:	82 0f       	add	r24, r18
    18ae:	93 1f       	adc	r25, r19
    18b0:	fc 01       	movw	r30, r24
    18b2:	e8 59       	subi	r30, 0x98	; 152
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	80 81       	ld	r24, Z
    18b8:	88 30       	cpi	r24, 0x08	; 8
    18ba:	f8 f4       	brcc	.+62     	; 0x18fa <DIO_Read+0x78>
		{
			*pu8_Data = GET_BIT(PINA_R, astrDIOConfigParameters[u8_GroupId].enuPinNo);
    18bc:	e9 e3       	ldi	r30, 0x39	; 57
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	48 2f       	mov	r20, r24
    18c4:	89 81       	ldd	r24, Y+1	; 0x01
    18c6:	28 2f       	mov	r18, r24
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	c9 01       	movw	r24, r18
    18cc:	88 0f       	add	r24, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	82 0f       	add	r24, r18
    18d2:	93 1f       	adc	r25, r19
    18d4:	fc 01       	movw	r30, r24
    18d6:	e8 59       	subi	r30, 0x98	; 152
    18d8:	ff 4f       	sbci	r31, 0xFF	; 255
    18da:	80 81       	ld	r24, Z
    18dc:	28 2f       	mov	r18, r24
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	02 2e       	mov	r0, r18
    18e6:	02 c0       	rjmp	.+4      	; 0x18ec <DIO_Read+0x6a>
    18e8:	88 0f       	add	r24, r24
    18ea:	99 1f       	adc	r25, r25
    18ec:	0a 94       	dec	r0
    18ee:	e2 f7       	brpl	.-8      	; 0x18e8 <DIO_Read+0x66>
    18f0:	84 23       	and	r24, r20
    18f2:	ea 81       	ldd	r30, Y+2	; 0x02
    18f4:	fb 81       	ldd	r31, Y+3	; 0x03
    18f6:	80 83       	st	Z, r24
    18f8:	b9 c0       	rjmp	.+370    	; 0x1a6c <DIO_Read+0x1ea>
		}//end if
		else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 8) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 16))	//if portb
    18fa:	89 81       	ldd	r24, Y+1	; 0x01
    18fc:	28 2f       	mov	r18, r24
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	c9 01       	movw	r24, r18
    1902:	88 0f       	add	r24, r24
    1904:	99 1f       	adc	r25, r25
    1906:	82 0f       	add	r24, r18
    1908:	93 1f       	adc	r25, r19
    190a:	fc 01       	movw	r30, r24
    190c:	e8 59       	subi	r30, 0x98	; 152
    190e:	ff 4f       	sbci	r31, 0xFF	; 255
    1910:	80 81       	ld	r24, Z
    1912:	88 30       	cpi	r24, 0x08	; 8
    1914:	80 f1       	brcs	.+96     	; 0x1976 <DIO_Read+0xf4>
    1916:	89 81       	ldd	r24, Y+1	; 0x01
    1918:	28 2f       	mov	r18, r24
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	c9 01       	movw	r24, r18
    191e:	88 0f       	add	r24, r24
    1920:	99 1f       	adc	r25, r25
    1922:	82 0f       	add	r24, r18
    1924:	93 1f       	adc	r25, r19
    1926:	fc 01       	movw	r30, r24
    1928:	e8 59       	subi	r30, 0x98	; 152
    192a:	ff 4f       	sbci	r31, 0xFF	; 255
    192c:	80 81       	ld	r24, Z
    192e:	80 31       	cpi	r24, 0x10	; 16
    1930:	10 f5       	brcc	.+68     	; 0x1976 <DIO_Read+0xf4>
		{
			*pu8_Data = GET_BIT(PINB_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 8));
    1932:	e6 e3       	ldi	r30, 0x36	; 54
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	48 2f       	mov	r20, r24
    193a:	89 81       	ldd	r24, Y+1	; 0x01
    193c:	28 2f       	mov	r18, r24
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	c9 01       	movw	r24, r18
    1942:	88 0f       	add	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	82 0f       	add	r24, r18
    1948:	93 1f       	adc	r25, r19
    194a:	fc 01       	movw	r30, r24
    194c:	e8 59       	subi	r30, 0x98	; 152
    194e:	ff 4f       	sbci	r31, 0xFF	; 255
    1950:	80 81       	ld	r24, Z
    1952:	88 2f       	mov	r24, r24
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	9c 01       	movw	r18, r24
    1958:	28 50       	subi	r18, 0x08	; 8
    195a:	30 40       	sbci	r19, 0x00	; 0
    195c:	81 e0       	ldi	r24, 0x01	; 1
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	02 2e       	mov	r0, r18
    1962:	02 c0       	rjmp	.+4      	; 0x1968 <DIO_Read+0xe6>
    1964:	88 0f       	add	r24, r24
    1966:	99 1f       	adc	r25, r25
    1968:	0a 94       	dec	r0
    196a:	e2 f7       	brpl	.-8      	; 0x1964 <DIO_Read+0xe2>
    196c:	84 23       	and	r24, r20
    196e:	ea 81       	ldd	r30, Y+2	; 0x02
    1970:	fb 81       	ldd	r31, Y+3	; 0x03
    1972:	80 83       	st	Z, r24
    1974:	7b c0       	rjmp	.+246    	; 0x1a6c <DIO_Read+0x1ea>
		}//end else if
		else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 16) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 24))	//if portc
    1976:	89 81       	ldd	r24, Y+1	; 0x01
    1978:	28 2f       	mov	r18, r24
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	c9 01       	movw	r24, r18
    197e:	88 0f       	add	r24, r24
    1980:	99 1f       	adc	r25, r25
    1982:	82 0f       	add	r24, r18
    1984:	93 1f       	adc	r25, r19
    1986:	fc 01       	movw	r30, r24
    1988:	e8 59       	subi	r30, 0x98	; 152
    198a:	ff 4f       	sbci	r31, 0xFF	; 255
    198c:	80 81       	ld	r24, Z
    198e:	80 31       	cpi	r24, 0x10	; 16
    1990:	80 f1       	brcs	.+96     	; 0x19f2 <DIO_Read+0x170>
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	28 2f       	mov	r18, r24
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	c9 01       	movw	r24, r18
    199a:	88 0f       	add	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	82 0f       	add	r24, r18
    19a0:	93 1f       	adc	r25, r19
    19a2:	fc 01       	movw	r30, r24
    19a4:	e8 59       	subi	r30, 0x98	; 152
    19a6:	ff 4f       	sbci	r31, 0xFF	; 255
    19a8:	80 81       	ld	r24, Z
    19aa:	88 31       	cpi	r24, 0x18	; 24
    19ac:	10 f5       	brcc	.+68     	; 0x19f2 <DIO_Read+0x170>
		{
			*pu8_Data = GET_BIT(PINC_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 16));
    19ae:	e3 e3       	ldi	r30, 0x33	; 51
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	80 81       	ld	r24, Z
    19b4:	48 2f       	mov	r20, r24
    19b6:	89 81       	ldd	r24, Y+1	; 0x01
    19b8:	28 2f       	mov	r18, r24
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	c9 01       	movw	r24, r18
    19be:	88 0f       	add	r24, r24
    19c0:	99 1f       	adc	r25, r25
    19c2:	82 0f       	add	r24, r18
    19c4:	93 1f       	adc	r25, r19
    19c6:	fc 01       	movw	r30, r24
    19c8:	e8 59       	subi	r30, 0x98	; 152
    19ca:	ff 4f       	sbci	r31, 0xFF	; 255
    19cc:	80 81       	ld	r24, Z
    19ce:	88 2f       	mov	r24, r24
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	9c 01       	movw	r18, r24
    19d4:	20 51       	subi	r18, 0x10	; 16
    19d6:	30 40       	sbci	r19, 0x00	; 0
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	02 2e       	mov	r0, r18
    19de:	02 c0       	rjmp	.+4      	; 0x19e4 <DIO_Read+0x162>
    19e0:	88 0f       	add	r24, r24
    19e2:	99 1f       	adc	r25, r25
    19e4:	0a 94       	dec	r0
    19e6:	e2 f7       	brpl	.-8      	; 0x19e0 <DIO_Read+0x15e>
    19e8:	84 23       	and	r24, r20
    19ea:	ea 81       	ldd	r30, Y+2	; 0x02
    19ec:	fb 81       	ldd	r31, Y+3	; 0x03
    19ee:	80 83       	st	Z, r24
    19f0:	3d c0       	rjmp	.+122    	; 0x1a6c <DIO_Read+0x1ea>
		}//end else if
		else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 24) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 32))	//if portd
    19f2:	89 81       	ldd	r24, Y+1	; 0x01
    19f4:	28 2f       	mov	r18, r24
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	c9 01       	movw	r24, r18
    19fa:	88 0f       	add	r24, r24
    19fc:	99 1f       	adc	r25, r25
    19fe:	82 0f       	add	r24, r18
    1a00:	93 1f       	adc	r25, r19
    1a02:	fc 01       	movw	r30, r24
    1a04:	e8 59       	subi	r30, 0x98	; 152
    1a06:	ff 4f       	sbci	r31, 0xFF	; 255
    1a08:	80 81       	ld	r24, Z
    1a0a:	88 31       	cpi	r24, 0x18	; 24
    1a0c:	78 f1       	brcs	.+94     	; 0x1a6c <DIO_Read+0x1ea>
    1a0e:	89 81       	ldd	r24, Y+1	; 0x01
    1a10:	28 2f       	mov	r18, r24
    1a12:	30 e0       	ldi	r19, 0x00	; 0
    1a14:	c9 01       	movw	r24, r18
    1a16:	88 0f       	add	r24, r24
    1a18:	99 1f       	adc	r25, r25
    1a1a:	82 0f       	add	r24, r18
    1a1c:	93 1f       	adc	r25, r19
    1a1e:	fc 01       	movw	r30, r24
    1a20:	e8 59       	subi	r30, 0x98	; 152
    1a22:	ff 4f       	sbci	r31, 0xFF	; 255
    1a24:	80 81       	ld	r24, Z
    1a26:	80 32       	cpi	r24, 0x20	; 32
    1a28:	08 f5       	brcc	.+66     	; 0x1a6c <DIO_Read+0x1ea>
		{
			*pu8_Data = GET_BIT(PIND_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 24));
    1a2a:	e0 e3       	ldi	r30, 0x30	; 48
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	48 2f       	mov	r20, r24
    1a32:	89 81       	ldd	r24, Y+1	; 0x01
    1a34:	28 2f       	mov	r18, r24
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	c9 01       	movw	r24, r18
    1a3a:	88 0f       	add	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	82 0f       	add	r24, r18
    1a40:	93 1f       	adc	r25, r19
    1a42:	fc 01       	movw	r30, r24
    1a44:	e8 59       	subi	r30, 0x98	; 152
    1a46:	ff 4f       	sbci	r31, 0xFF	; 255
    1a48:	80 81       	ld	r24, Z
    1a4a:	88 2f       	mov	r24, r24
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	9c 01       	movw	r18, r24
    1a50:	28 51       	subi	r18, 0x18	; 24
    1a52:	30 40       	sbci	r19, 0x00	; 0
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	02 2e       	mov	r0, r18
    1a5a:	02 c0       	rjmp	.+4      	; 0x1a60 <DIO_Read+0x1de>
    1a5c:	88 0f       	add	r24, r24
    1a5e:	99 1f       	adc	r25, r25
    1a60:	0a 94       	dec	r0
    1a62:	e2 f7       	brpl	.-8      	; 0x1a5c <DIO_Read+0x1da>
    1a64:	84 23       	and	r24, r20
    1a66:	ea 81       	ldd	r30, Y+2	; 0x02
    1a68:	fb 81       	ldd	r31, Y+3	; 0x03
    1a6a:	80 83       	st	Z, r24
		}//end else if

		return E_OK;
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	8c 83       	std	Y+4, r24	; 0x04
    1a70:	8c 81       	ldd	r24, Y+4	; 0x04
	}//end else
}//end DIO_Read
    1a72:	0f 90       	pop	r0
    1a74:	0f 90       	pop	r0
    1a76:	0f 90       	pop	r0
    1a78:	0f 90       	pop	r0
    1a7a:	cf 91       	pop	r28
    1a7c:	df 91       	pop	r29
    1a7e:	08 95       	ret

00001a80 <DIO_toggle>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to toggle the selected DIO pin
*************************************************************************************************/
enuErrorStatus_t DIO_toggle(uint8_t u8_GroupId)
{
    1a80:	df 93       	push	r29
    1a82:	cf 93       	push	r28
    1a84:	0f 92       	push	r0
    1a86:	cd b7       	in	r28, 0x3d	; 61
    1a88:	de b7       	in	r29, 0x3e	; 62
    1a8a:	89 83       	std	Y+1, r24	; 0x01
	if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 0) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 8))	//if porta
    1a8c:	89 81       	ldd	r24, Y+1	; 0x01
    1a8e:	28 2f       	mov	r18, r24
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	c9 01       	movw	r24, r18
    1a94:	88 0f       	add	r24, r24
    1a96:	99 1f       	adc	r25, r25
    1a98:	82 0f       	add	r24, r18
    1a9a:	93 1f       	adc	r25, r19
    1a9c:	fc 01       	movw	r30, r24
    1a9e:	e8 59       	subi	r30, 0x98	; 152
    1aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa2:	80 81       	ld	r24, Z
    1aa4:	88 30       	cpi	r24, 0x08	; 8
    1aa6:	f8 f4       	brcc	.+62     	; 0x1ae6 <DIO_toggle+0x66>
	{
		TOGGLE_BIT(PORTA_R, astrDIOConfigParameters[u8_GroupId].enuPinNo);
    1aa8:	ab e3       	ldi	r26, 0x3B	; 59
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	eb e3       	ldi	r30, 0x3B	; 59
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	48 2f       	mov	r20, r24
    1ab4:	89 81       	ldd	r24, Y+1	; 0x01
    1ab6:	28 2f       	mov	r18, r24
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	c9 01       	movw	r24, r18
    1abc:	88 0f       	add	r24, r24
    1abe:	99 1f       	adc	r25, r25
    1ac0:	82 0f       	add	r24, r18
    1ac2:	93 1f       	adc	r25, r19
    1ac4:	fc 01       	movw	r30, r24
    1ac6:	e8 59       	subi	r30, 0x98	; 152
    1ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aca:	80 81       	ld	r24, Z
    1acc:	28 2f       	mov	r18, r24
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	02 2e       	mov	r0, r18
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <DIO_toggle+0x5c>
    1ad8:	88 0f       	add	r24, r24
    1ada:	99 1f       	adc	r25, r25
    1adc:	0a 94       	dec	r0
    1ade:	e2 f7       	brpl	.-8      	; 0x1ad8 <DIO_toggle+0x58>
    1ae0:	84 27       	eor	r24, r20
    1ae2:	8c 93       	st	X, r24
    1ae4:	b9 c0       	rjmp	.+370    	; 0x1c58 <DIO_toggle+0x1d8>
	}//end if
	else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 8) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 16))	//if portb
    1ae6:	89 81       	ldd	r24, Y+1	; 0x01
    1ae8:	28 2f       	mov	r18, r24
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	c9 01       	movw	r24, r18
    1aee:	88 0f       	add	r24, r24
    1af0:	99 1f       	adc	r25, r25
    1af2:	82 0f       	add	r24, r18
    1af4:	93 1f       	adc	r25, r19
    1af6:	fc 01       	movw	r30, r24
    1af8:	e8 59       	subi	r30, 0x98	; 152
    1afa:	ff 4f       	sbci	r31, 0xFF	; 255
    1afc:	80 81       	ld	r24, Z
    1afe:	88 30       	cpi	r24, 0x08	; 8
    1b00:	80 f1       	brcs	.+96     	; 0x1b62 <DIO_toggle+0xe2>
    1b02:	89 81       	ldd	r24, Y+1	; 0x01
    1b04:	28 2f       	mov	r18, r24
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	c9 01       	movw	r24, r18
    1b0a:	88 0f       	add	r24, r24
    1b0c:	99 1f       	adc	r25, r25
    1b0e:	82 0f       	add	r24, r18
    1b10:	93 1f       	adc	r25, r19
    1b12:	fc 01       	movw	r30, r24
    1b14:	e8 59       	subi	r30, 0x98	; 152
    1b16:	ff 4f       	sbci	r31, 0xFF	; 255
    1b18:	80 81       	ld	r24, Z
    1b1a:	80 31       	cpi	r24, 0x10	; 16
    1b1c:	10 f5       	brcc	.+68     	; 0x1b62 <DIO_toggle+0xe2>
	{
		TOGGLE_BIT(PORTB_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 8));
    1b1e:	a8 e3       	ldi	r26, 0x38	; 56
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	e8 e3       	ldi	r30, 0x38	; 56
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	48 2f       	mov	r20, r24
    1b2a:	89 81       	ldd	r24, Y+1	; 0x01
    1b2c:	28 2f       	mov	r18, r24
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	c9 01       	movw	r24, r18
    1b32:	88 0f       	add	r24, r24
    1b34:	99 1f       	adc	r25, r25
    1b36:	82 0f       	add	r24, r18
    1b38:	93 1f       	adc	r25, r19
    1b3a:	fc 01       	movw	r30, r24
    1b3c:	e8 59       	subi	r30, 0x98	; 152
    1b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b40:	80 81       	ld	r24, Z
    1b42:	88 2f       	mov	r24, r24
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	9c 01       	movw	r18, r24
    1b48:	28 50       	subi	r18, 0x08	; 8
    1b4a:	30 40       	sbci	r19, 0x00	; 0
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	02 2e       	mov	r0, r18
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <DIO_toggle+0xd8>
    1b54:	88 0f       	add	r24, r24
    1b56:	99 1f       	adc	r25, r25
    1b58:	0a 94       	dec	r0
    1b5a:	e2 f7       	brpl	.-8      	; 0x1b54 <DIO_toggle+0xd4>
    1b5c:	84 27       	eor	r24, r20
    1b5e:	8c 93       	st	X, r24
    1b60:	7b c0       	rjmp	.+246    	; 0x1c58 <DIO_toggle+0x1d8>
	}//end else if
	else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 16) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 24))	//if portc
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	28 2f       	mov	r18, r24
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	c9 01       	movw	r24, r18
    1b6a:	88 0f       	add	r24, r24
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	82 0f       	add	r24, r18
    1b70:	93 1f       	adc	r25, r19
    1b72:	fc 01       	movw	r30, r24
    1b74:	e8 59       	subi	r30, 0x98	; 152
    1b76:	ff 4f       	sbci	r31, 0xFF	; 255
    1b78:	80 81       	ld	r24, Z
    1b7a:	80 31       	cpi	r24, 0x10	; 16
    1b7c:	80 f1       	brcs	.+96     	; 0x1bde <DIO_toggle+0x15e>
    1b7e:	89 81       	ldd	r24, Y+1	; 0x01
    1b80:	28 2f       	mov	r18, r24
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	c9 01       	movw	r24, r18
    1b86:	88 0f       	add	r24, r24
    1b88:	99 1f       	adc	r25, r25
    1b8a:	82 0f       	add	r24, r18
    1b8c:	93 1f       	adc	r25, r19
    1b8e:	fc 01       	movw	r30, r24
    1b90:	e8 59       	subi	r30, 0x98	; 152
    1b92:	ff 4f       	sbci	r31, 0xFF	; 255
    1b94:	80 81       	ld	r24, Z
    1b96:	88 31       	cpi	r24, 0x18	; 24
    1b98:	10 f5       	brcc	.+68     	; 0x1bde <DIO_toggle+0x15e>
	{
		TOGGLE_BIT(PORTC_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 16));
    1b9a:	a5 e3       	ldi	r26, 0x35	; 53
    1b9c:	b0 e0       	ldi	r27, 0x00	; 0
    1b9e:	e5 e3       	ldi	r30, 0x35	; 53
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	80 81       	ld	r24, Z
    1ba4:	48 2f       	mov	r20, r24
    1ba6:	89 81       	ldd	r24, Y+1	; 0x01
    1ba8:	28 2f       	mov	r18, r24
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	c9 01       	movw	r24, r18
    1bae:	88 0f       	add	r24, r24
    1bb0:	99 1f       	adc	r25, r25
    1bb2:	82 0f       	add	r24, r18
    1bb4:	93 1f       	adc	r25, r19
    1bb6:	fc 01       	movw	r30, r24
    1bb8:	e8 59       	subi	r30, 0x98	; 152
    1bba:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbc:	80 81       	ld	r24, Z
    1bbe:	88 2f       	mov	r24, r24
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	9c 01       	movw	r18, r24
    1bc4:	20 51       	subi	r18, 0x10	; 16
    1bc6:	30 40       	sbci	r19, 0x00	; 0
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	02 2e       	mov	r0, r18
    1bce:	02 c0       	rjmp	.+4      	; 0x1bd4 <DIO_toggle+0x154>
    1bd0:	88 0f       	add	r24, r24
    1bd2:	99 1f       	adc	r25, r25
    1bd4:	0a 94       	dec	r0
    1bd6:	e2 f7       	brpl	.-8      	; 0x1bd0 <DIO_toggle+0x150>
    1bd8:	84 27       	eor	r24, r20
    1bda:	8c 93       	st	X, r24
    1bdc:	3d c0       	rjmp	.+122    	; 0x1c58 <DIO_toggle+0x1d8>
	}//end else if
	else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 24) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 32))	//if portd
    1bde:	89 81       	ldd	r24, Y+1	; 0x01
    1be0:	28 2f       	mov	r18, r24
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	c9 01       	movw	r24, r18
    1be6:	88 0f       	add	r24, r24
    1be8:	99 1f       	adc	r25, r25
    1bea:	82 0f       	add	r24, r18
    1bec:	93 1f       	adc	r25, r19
    1bee:	fc 01       	movw	r30, r24
    1bf0:	e8 59       	subi	r30, 0x98	; 152
    1bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf4:	80 81       	ld	r24, Z
    1bf6:	88 31       	cpi	r24, 0x18	; 24
    1bf8:	78 f1       	brcs	.+94     	; 0x1c58 <DIO_toggle+0x1d8>
    1bfa:	89 81       	ldd	r24, Y+1	; 0x01
    1bfc:	28 2f       	mov	r18, r24
    1bfe:	30 e0       	ldi	r19, 0x00	; 0
    1c00:	c9 01       	movw	r24, r18
    1c02:	88 0f       	add	r24, r24
    1c04:	99 1f       	adc	r25, r25
    1c06:	82 0f       	add	r24, r18
    1c08:	93 1f       	adc	r25, r19
    1c0a:	fc 01       	movw	r30, r24
    1c0c:	e8 59       	subi	r30, 0x98	; 152
    1c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c10:	80 81       	ld	r24, Z
    1c12:	80 32       	cpi	r24, 0x20	; 32
    1c14:	08 f5       	brcc	.+66     	; 0x1c58 <DIO_toggle+0x1d8>
	{
		TOGGLE_BIT(PORTD_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 24));
    1c16:	a2 e3       	ldi	r26, 0x32	; 50
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	e2 e3       	ldi	r30, 0x32	; 50
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	48 2f       	mov	r20, r24
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	28 2f       	mov	r18, r24
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	c9 01       	movw	r24, r18
    1c2a:	88 0f       	add	r24, r24
    1c2c:	99 1f       	adc	r25, r25
    1c2e:	82 0f       	add	r24, r18
    1c30:	93 1f       	adc	r25, r19
    1c32:	fc 01       	movw	r30, r24
    1c34:	e8 59       	subi	r30, 0x98	; 152
    1c36:	ff 4f       	sbci	r31, 0xFF	; 255
    1c38:	80 81       	ld	r24, Z
    1c3a:	88 2f       	mov	r24, r24
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	9c 01       	movw	r18, r24
    1c40:	28 51       	subi	r18, 0x18	; 24
    1c42:	30 40       	sbci	r19, 0x00	; 0
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	02 2e       	mov	r0, r18
    1c4a:	02 c0       	rjmp	.+4      	; 0x1c50 <DIO_toggle+0x1d0>
    1c4c:	88 0f       	add	r24, r24
    1c4e:	99 1f       	adc	r25, r25
    1c50:	0a 94       	dec	r0
    1c52:	e2 f7       	brpl	.-8      	; 0x1c4c <DIO_toggle+0x1cc>
    1c54:	84 27       	eor	r24, r20
    1c56:	8c 93       	st	X, r24
	}//end else if

	return E_OK;
    1c58:	81 e0       	ldi	r24, 0x01	; 1
}//end DIO_toggle
    1c5a:	0f 90       	pop	r0
    1c5c:	cf 91       	pop	r28
    1c5e:	df 91       	pop	r29
    1c60:	08 95       	ret

00001c62 <LED_Init>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to initialize the led
*************************************************************************************************/
enuErrorStatus_t	LED_Init(void)
{
    1c62:	df 93       	push	r29
    1c64:	cf 93       	push	r28
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
	return DIO_Init();
    1c6a:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_Init>
}//end LED_Init
    1c6e:	cf 91       	pop	r28
    1c70:	df 91       	pop	r29
    1c72:	08 95       	ret

00001c74 <LED_ON>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to turn the led on
*************************************************************************************************/
enuErrorStatus_t	LED_ON(uint8_t u8_LedNum)
{
    1c74:	df 93       	push	r29
    1c76:	cf 93       	push	r28
    1c78:	0f 92       	push	r0
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
    1c7e:	89 83       	std	Y+1, r24	; 0x01
	DIO_Write(u8_LedNum, HIGH);
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	61 e0       	ldi	r22, 0x01	; 1
    1c84:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <DIO_Write>
	return E_OK;
    1c88:	81 e0       	ldi	r24, 0x01	; 1
}//end LED_ON
    1c8a:	0f 90       	pop	r0
    1c8c:	cf 91       	pop	r28
    1c8e:	df 91       	pop	r29
    1c90:	08 95       	ret

00001c92 <LED_OFF>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to turn the led off
*************************************************************************************************/
enuErrorStatus_t	LED_OFF(uint8_t u8_LedNum)
{
    1c92:	df 93       	push	r29
    1c94:	cf 93       	push	r28
    1c96:	0f 92       	push	r0
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
    1c9c:	89 83       	std	Y+1, r24	; 0x01
	DIO_Write(u8_LedNum, LOW);
    1c9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ca0:	60 e0       	ldi	r22, 0x00	; 0
    1ca2:	0e 94 59 0a 	call	0x14b2	; 0x14b2 <DIO_Write>
	return E_OK;
    1ca6:	81 e0       	ldi	r24, 0x01	; 1

}//end LED_OFF
    1ca8:	0f 90       	pop	r0
    1caa:	cf 91       	pop	r28
    1cac:	df 91       	pop	r29
    1cae:	08 95       	ret

00001cb0 <LED_toggle>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to toggle the led
*************************************************************************************************/
enuErrorStatus_t	LED_toggle(uint8_t u8_LedNum)
{
    1cb0:	df 93       	push	r29
    1cb2:	cf 93       	push	r28
    1cb4:	0f 92       	push	r0
    1cb6:	cd b7       	in	r28, 0x3d	; 61
    1cb8:	de b7       	in	r29, 0x3e	; 62
    1cba:	89 83       	std	Y+1, r24	; 0x01
	DIO_toggle(u8_LedNum);
    1cbc:	89 81       	ldd	r24, Y+1	; 0x01
    1cbe:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <DIO_toggle>
	return E_OK;
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
}
    1cc4:	0f 90       	pop	r0
    1cc6:	cf 91       	pop	r28
    1cc8:	df 91       	pop	r29
    1cca:	08 95       	ret

00001ccc <BTN_Init>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to initialize the button
*************************************************************************************************/
enuErrorStatus_t	BTN_Init(void)
{
    1ccc:	df 93       	push	r29
    1cce:	cf 93       	push	r28
    1cd0:	cd b7       	in	r28, 0x3d	; 61
    1cd2:	de b7       	in	r29, 0x3e	; 62
	return DIO_Init();
    1cd4:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_Init>
}//end BTN_Init
    1cd8:	cf 91       	pop	r28
    1cda:	df 91       	pop	r29
    1cdc:	08 95       	ret

00001cde <BTN_getState>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to read the button status (pressed, not_pressed)
*************************************************************************************************/
enuErrorStatus_t	BTN_getState(uint8_t u8_BtnNum, uint8_t* u8_Status)
{
    1cde:	df 93       	push	r29
    1ce0:	cf 93       	push	r28
    1ce2:	cd b7       	in	r28, 0x3d	; 61
    1ce4:	de b7       	in	r29, 0x3e	; 62
    1ce6:	e5 97       	sbiw	r28, 0x35	; 53
    1ce8:	0f b6       	in	r0, 0x3f	; 63
    1cea:	f8 94       	cli
    1cec:	de bf       	out	0x3e, r29	; 62
    1cee:	0f be       	out	0x3f, r0	; 63
    1cf0:	cd bf       	out	0x3d, r28	; 61
    1cf2:	8a ab       	std	Y+50, r24	; 0x32
    1cf4:	7c ab       	std	Y+52, r23	; 0x34
    1cf6:	6b ab       	std	Y+51, r22	; 0x33
	if(u8_Status == NULL_PTR)	return E_ERROR;
    1cf8:	8b a9       	ldd	r24, Y+51	; 0x33
    1cfa:	9c a9       	ldd	r25, Y+52	; 0x34
    1cfc:	00 97       	sbiw	r24, 0x00	; 0
    1cfe:	11 f4       	brne	.+4      	; 0x1d04 <BTN_getState+0x26>
    1d00:	1d aa       	std	Y+53, r1	; 0x35
    1d02:	9c c1       	rjmp	.+824    	; 0x203c <BTN_getState+0x35e>
	else
	{
		uint8_t u8_Data;

		DIO_Read(u8_BtnNum, &u8_Data);
    1d04:	9e 01       	movw	r18, r28
    1d06:	2f 5c       	subi	r18, 0xCF	; 207
    1d08:	3f 4f       	sbci	r19, 0xFF	; 255
    1d0a:	8a a9       	ldd	r24, Y+50	; 0x32
    1d0c:	b9 01       	movw	r22, r18
    1d0e:	0e 94 41 0c 	call	0x1882	; 0x1882 <DIO_Read>

		if(u8_Data == LOW)
    1d12:	89 a9       	ldd	r24, Y+49	; 0x31
    1d14:	88 23       	and	r24, r24
    1d16:	09 f0       	breq	.+2      	; 0x1d1a <BTN_getState+0x3c>
    1d18:	c6 c0       	rjmp	.+396    	; 0x1ea6 <BTN_getState+0x1c8>
    1d1a:	80 e0       	ldi	r24, 0x00	; 0
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	a0 e2       	ldi	r26, 0x20	; 32
    1d20:	b1 e4       	ldi	r27, 0x41	; 65
    1d22:	8d a7       	std	Y+45, r24	; 0x2d
    1d24:	9e a7       	std	Y+46, r25	; 0x2e
    1d26:	af a7       	std	Y+47, r26	; 0x2f
    1d28:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1d2a:	6d a5       	ldd	r22, Y+45	; 0x2d
    1d2c:	7e a5       	ldd	r23, Y+46	; 0x2e
    1d2e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d30:	98 a9       	ldd	r25, Y+48	; 0x30
    1d32:	2b ea       	ldi	r18, 0xAB	; 171
    1d34:	3a ea       	ldi	r19, 0xAA	; 170
    1d36:	4a ea       	ldi	r20, 0xAA	; 170
    1d38:	5e e3       	ldi	r21, 0x3E	; 62
    1d3a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	89 a7       	std	Y+41, r24	; 0x29
    1d44:	9a a7       	std	Y+42, r25	; 0x2a
    1d46:	ab a7       	std	Y+43, r26	; 0x2b
    1d48:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1d4a:	69 a5       	ldd	r22, Y+41	; 0x29
    1d4c:	7a a5       	ldd	r23, Y+42	; 0x2a
    1d4e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d50:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	40 e8       	ldi	r20, 0x80	; 128
    1d58:	5f e3       	ldi	r21, 0x3F	; 63
    1d5a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d5e:	88 23       	and	r24, r24
    1d60:	1c f4       	brge	.+6      	; 0x1d68 <BTN_getState+0x8a>
		__ticks = 1;
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	88 a7       	std	Y+40, r24	; 0x28
    1d66:	91 c0       	rjmp	.+290    	; 0x1e8a <BTN_getState+0x1ac>
	else if (__tmp > 255)
    1d68:	69 a5       	ldd	r22, Y+41	; 0x29
    1d6a:	7a a5       	ldd	r23, Y+42	; 0x2a
    1d6c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d6e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	4f e7       	ldi	r20, 0x7F	; 127
    1d76:	53 e4       	ldi	r21, 0x43	; 67
    1d78:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d7c:	18 16       	cp	r1, r24
    1d7e:	0c f0       	brlt	.+2      	; 0x1d82 <BTN_getState+0xa4>
    1d80:	7b c0       	rjmp	.+246    	; 0x1e78 <BTN_getState+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1d82:	6d a5       	ldd	r22, Y+45	; 0x2d
    1d84:	7e a5       	ldd	r23, Y+46	; 0x2e
    1d86:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d88:	98 a9       	ldd	r25, Y+48	; 0x30
    1d8a:	20 e0       	ldi	r18, 0x00	; 0
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	4a e7       	ldi	r20, 0x7A	; 122
    1d90:	54 e4       	ldi	r21, 0x44	; 68
    1d92:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1d96:	dc 01       	movw	r26, r24
    1d98:	cb 01       	movw	r24, r22
    1d9a:	8c a3       	std	Y+36, r24	; 0x24
    1d9c:	9d a3       	std	Y+37, r25	; 0x25
    1d9e:	ae a3       	std	Y+38, r26	; 0x26
    1da0:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1da2:	6c a1       	ldd	r22, Y+36	; 0x24
    1da4:	7d a1       	ldd	r23, Y+37	; 0x25
    1da6:	8e a1       	ldd	r24, Y+38	; 0x26
    1da8:	9f a1       	ldd	r25, Y+39	; 0x27
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	4a e7       	ldi	r20, 0x7A	; 122
    1db0:	53 e4       	ldi	r21, 0x43	; 67
    1db2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1db6:	dc 01       	movw	r26, r24
    1db8:	cb 01       	movw	r24, r22
    1dba:	88 a3       	std	Y+32, r24	; 0x20
    1dbc:	99 a3       	std	Y+33, r25	; 0x21
    1dbe:	aa a3       	std	Y+34, r26	; 0x22
    1dc0:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1dc2:	68 a1       	ldd	r22, Y+32	; 0x20
    1dc4:	79 a1       	ldd	r23, Y+33	; 0x21
    1dc6:	8a a1       	ldd	r24, Y+34	; 0x22
    1dc8:	9b a1       	ldd	r25, Y+35	; 0x23
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	40 e8       	ldi	r20, 0x80	; 128
    1dd0:	5f e3       	ldi	r21, 0x3F	; 63
    1dd2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1dd6:	88 23       	and	r24, r24
    1dd8:	2c f4       	brge	.+10     	; 0x1de4 <BTN_getState+0x106>
		__ticks = 1;
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	9f 8f       	std	Y+31, r25	; 0x1f
    1de0:	8e 8f       	std	Y+30, r24	; 0x1e
    1de2:	3f c0       	rjmp	.+126    	; 0x1e62 <BTN_getState+0x184>
	else if (__tmp > 65535)
    1de4:	68 a1       	ldd	r22, Y+32	; 0x20
    1de6:	79 a1       	ldd	r23, Y+33	; 0x21
    1de8:	8a a1       	ldd	r24, Y+34	; 0x22
    1dea:	9b a1       	ldd	r25, Y+35	; 0x23
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	3f ef       	ldi	r19, 0xFF	; 255
    1df0:	4f e7       	ldi	r20, 0x7F	; 127
    1df2:	57 e4       	ldi	r21, 0x47	; 71
    1df4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1df8:	18 16       	cp	r1, r24
    1dfa:	4c f5       	brge	.+82     	; 0x1e4e <BTN_getState+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dfc:	6c a1       	ldd	r22, Y+36	; 0x24
    1dfe:	7d a1       	ldd	r23, Y+37	; 0x25
    1e00:	8e a1       	ldd	r24, Y+38	; 0x26
    1e02:	9f a1       	ldd	r25, Y+39	; 0x27
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	40 e2       	ldi	r20, 0x20	; 32
    1e0a:	51 e4       	ldi	r21, 0x41	; 65
    1e0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	bc 01       	movw	r22, r24
    1e16:	cd 01       	movw	r24, r26
    1e18:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	9f 8f       	std	Y+31, r25	; 0x1f
    1e22:	8e 8f       	std	Y+30, r24	; 0x1e
    1e24:	0f c0       	rjmp	.+30     	; 0x1e44 <BTN_getState+0x166>
    1e26:	89 e1       	ldi	r24, 0x19	; 25
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	9d 8f       	std	Y+29, r25	; 0x1d
    1e2c:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e2e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1e30:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1e32:	01 97       	sbiw	r24, 0x01	; 1
    1e34:	f1 f7       	brne	.-4      	; 0x1e32 <BTN_getState+0x154>
    1e36:	9d 8f       	std	Y+29, r25	; 0x1d
    1e38:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e3a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e3c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	9f 8f       	std	Y+31, r25	; 0x1f
    1e42:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e44:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e46:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e48:	00 97       	sbiw	r24, 0x00	; 0
    1e4a:	69 f7       	brne	.-38     	; 0x1e26 <BTN_getState+0x148>
    1e4c:	24 c0       	rjmp	.+72     	; 0x1e96 <BTN_getState+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e4e:	68 a1       	ldd	r22, Y+32	; 0x20
    1e50:	79 a1       	ldd	r23, Y+33	; 0x21
    1e52:	8a a1       	ldd	r24, Y+34	; 0x22
    1e54:	9b a1       	ldd	r25, Y+35	; 0x23
    1e56:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	9f 8f       	std	Y+31, r25	; 0x1f
    1e60:	8e 8f       	std	Y+30, r24	; 0x1e
    1e62:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e64:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1e66:	9b 8f       	std	Y+27, r25	; 0x1b
    1e68:	8a 8f       	std	Y+26, r24	; 0x1a
    1e6a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1e6c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1e6e:	01 97       	sbiw	r24, 0x01	; 1
    1e70:	f1 f7       	brne	.-4      	; 0x1e6e <BTN_getState+0x190>
    1e72:	9b 8f       	std	Y+27, r25	; 0x1b
    1e74:	8a 8f       	std	Y+26, r24	; 0x1a
    1e76:	0f c0       	rjmp	.+30     	; 0x1e96 <BTN_getState+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e78:	69 a5       	ldd	r22, Y+41	; 0x29
    1e7a:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e7c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e7e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e80:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	88 a7       	std	Y+40, r24	; 0x28
    1e8a:	88 a5       	ldd	r24, Y+40	; 0x28
    1e8c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e8e:	89 8d       	ldd	r24, Y+25	; 0x19
    1e90:	8a 95       	dec	r24
    1e92:	f1 f7       	brne	.-4      	; 0x1e90 <BTN_getState+0x1b2>
    1e94:	89 8f       	std	Y+25, r24	; 0x19
		{
			_delay_us(10);
			if(u8_Data == LOW)	*u8_Status = PRESSED;
    1e96:	89 a9       	ldd	r24, Y+49	; 0x31
    1e98:	88 23       	and	r24, r24
    1e9a:	09 f0       	breq	.+2      	; 0x1e9e <BTN_getState+0x1c0>
    1e9c:	cd c0       	rjmp	.+410    	; 0x2038 <BTN_getState+0x35a>
    1e9e:	eb a9       	ldd	r30, Y+51	; 0x33
    1ea0:	fc a9       	ldd	r31, Y+52	; 0x34
    1ea2:	10 82       	st	Z, r1
    1ea4:	c9 c0       	rjmp	.+402    	; 0x2038 <BTN_getState+0x35a>
		}//end if
		else if(u8_Data == HIGH)
    1ea6:	89 a9       	ldd	r24, Y+49	; 0x31
    1ea8:	81 30       	cpi	r24, 0x01	; 1
    1eaa:	09 f0       	breq	.+2      	; 0x1eae <BTN_getState+0x1d0>
    1eac:	c5 c0       	rjmp	.+394    	; 0x2038 <BTN_getState+0x35a>
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	a0 e2       	ldi	r26, 0x20	; 32
    1eb4:	b1 e4       	ldi	r27, 0x41	; 65
    1eb6:	8d 8b       	std	Y+21, r24	; 0x15
    1eb8:	9e 8b       	std	Y+22, r25	; 0x16
    1eba:	af 8b       	std	Y+23, r26	; 0x17
    1ebc:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ebe:	6d 89       	ldd	r22, Y+21	; 0x15
    1ec0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ec2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ec4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ec6:	2b ea       	ldi	r18, 0xAB	; 171
    1ec8:	3a ea       	ldi	r19, 0xAA	; 170
    1eca:	4a ea       	ldi	r20, 0xAA	; 170
    1ecc:	5e e3       	ldi	r21, 0x3E	; 62
    1ece:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	89 8b       	std	Y+17, r24	; 0x11
    1ed8:	9a 8b       	std	Y+18, r25	; 0x12
    1eda:	ab 8b       	std	Y+19, r26	; 0x13
    1edc:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1ede:	69 89       	ldd	r22, Y+17	; 0x11
    1ee0:	7a 89       	ldd	r23, Y+18	; 0x12
    1ee2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ee4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	40 e8       	ldi	r20, 0x80	; 128
    1eec:	5f e3       	ldi	r21, 0x3F	; 63
    1eee:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ef2:	88 23       	and	r24, r24
    1ef4:	1c f4       	brge	.+6      	; 0x1efc <BTN_getState+0x21e>
		__ticks = 1;
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	88 8b       	std	Y+16, r24	; 0x10
    1efa:	91 c0       	rjmp	.+290    	; 0x201e <BTN_getState+0x340>
	else if (__tmp > 255)
    1efc:	69 89       	ldd	r22, Y+17	; 0x11
    1efe:	7a 89       	ldd	r23, Y+18	; 0x12
    1f00:	8b 89       	ldd	r24, Y+19	; 0x13
    1f02:	9c 89       	ldd	r25, Y+20	; 0x14
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	4f e7       	ldi	r20, 0x7F	; 127
    1f0a:	53 e4       	ldi	r21, 0x43	; 67
    1f0c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f10:	18 16       	cp	r1, r24
    1f12:	0c f0       	brlt	.+2      	; 0x1f16 <BTN_getState+0x238>
    1f14:	7b c0       	rjmp	.+246    	; 0x200c <BTN_getState+0x32e>
	{
		_delay_ms(__us / 1000.0);
    1f16:	6d 89       	ldd	r22, Y+21	; 0x15
    1f18:	7e 89       	ldd	r23, Y+22	; 0x16
    1f1a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f1c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	4a e7       	ldi	r20, 0x7A	; 122
    1f24:	54 e4       	ldi	r21, 0x44	; 68
    1f26:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	8c 87       	std	Y+12, r24	; 0x0c
    1f30:	9d 87       	std	Y+13, r25	; 0x0d
    1f32:	ae 87       	std	Y+14, r26	; 0x0e
    1f34:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f36:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f38:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f3a:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f3c:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f3e:	20 e0       	ldi	r18, 0x00	; 0
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	4a e7       	ldi	r20, 0x7A	; 122
    1f44:	53 e4       	ldi	r21, 0x43	; 67
    1f46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f4a:	dc 01       	movw	r26, r24
    1f4c:	cb 01       	movw	r24, r22
    1f4e:	88 87       	std	Y+8, r24	; 0x08
    1f50:	99 87       	std	Y+9, r25	; 0x09
    1f52:	aa 87       	std	Y+10, r26	; 0x0a
    1f54:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1f56:	68 85       	ldd	r22, Y+8	; 0x08
    1f58:	79 85       	ldd	r23, Y+9	; 0x09
    1f5a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f5c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	40 e8       	ldi	r20, 0x80	; 128
    1f64:	5f e3       	ldi	r21, 0x3F	; 63
    1f66:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f6a:	88 23       	and	r24, r24
    1f6c:	2c f4       	brge	.+10     	; 0x1f78 <BTN_getState+0x29a>
		__ticks = 1;
    1f6e:	81 e0       	ldi	r24, 0x01	; 1
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	9f 83       	std	Y+7, r25	; 0x07
    1f74:	8e 83       	std	Y+6, r24	; 0x06
    1f76:	3f c0       	rjmp	.+126    	; 0x1ff6 <BTN_getState+0x318>
	else if (__tmp > 65535)
    1f78:	68 85       	ldd	r22, Y+8	; 0x08
    1f7a:	79 85       	ldd	r23, Y+9	; 0x09
    1f7c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f7e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	3f ef       	ldi	r19, 0xFF	; 255
    1f84:	4f e7       	ldi	r20, 0x7F	; 127
    1f86:	57 e4       	ldi	r21, 0x47	; 71
    1f88:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f8c:	18 16       	cp	r1, r24
    1f8e:	4c f5       	brge	.+82     	; 0x1fe2 <BTN_getState+0x304>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f90:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f92:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f94:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f96:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	40 e2       	ldi	r20, 0x20	; 32
    1f9e:	51 e4       	ldi	r21, 0x41	; 65
    1fa0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fa4:	dc 01       	movw	r26, r24
    1fa6:	cb 01       	movw	r24, r22
    1fa8:	bc 01       	movw	r22, r24
    1faa:	cd 01       	movw	r24, r26
    1fac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	9f 83       	std	Y+7, r25	; 0x07
    1fb6:	8e 83       	std	Y+6, r24	; 0x06
    1fb8:	0f c0       	rjmp	.+30     	; 0x1fd8 <BTN_getState+0x2fa>
    1fba:	89 e1       	ldi	r24, 0x19	; 25
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	9d 83       	std	Y+5, r25	; 0x05
    1fc0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1fc2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc4:	9d 81       	ldd	r25, Y+5	; 0x05
    1fc6:	01 97       	sbiw	r24, 0x01	; 1
    1fc8:	f1 f7       	brne	.-4      	; 0x1fc6 <BTN_getState+0x2e8>
    1fca:	9d 83       	std	Y+5, r25	; 0x05
    1fcc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fce:	8e 81       	ldd	r24, Y+6	; 0x06
    1fd0:	9f 81       	ldd	r25, Y+7	; 0x07
    1fd2:	01 97       	sbiw	r24, 0x01	; 1
    1fd4:	9f 83       	std	Y+7, r25	; 0x07
    1fd6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd8:	8e 81       	ldd	r24, Y+6	; 0x06
    1fda:	9f 81       	ldd	r25, Y+7	; 0x07
    1fdc:	00 97       	sbiw	r24, 0x00	; 0
    1fde:	69 f7       	brne	.-38     	; 0x1fba <BTN_getState+0x2dc>
    1fe0:	24 c0       	rjmp	.+72     	; 0x202a <BTN_getState+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe2:	68 85       	ldd	r22, Y+8	; 0x08
    1fe4:	79 85       	ldd	r23, Y+9	; 0x09
    1fe6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fe8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fee:	dc 01       	movw	r26, r24
    1ff0:	cb 01       	movw	r24, r22
    1ff2:	9f 83       	std	Y+7, r25	; 0x07
    1ff4:	8e 83       	std	Y+6, r24	; 0x06
    1ff6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ff8:	9f 81       	ldd	r25, Y+7	; 0x07
    1ffa:	9b 83       	std	Y+3, r25	; 0x03
    1ffc:	8a 83       	std	Y+2, r24	; 0x02
    1ffe:	8a 81       	ldd	r24, Y+2	; 0x02
    2000:	9b 81       	ldd	r25, Y+3	; 0x03
    2002:	01 97       	sbiw	r24, 0x01	; 1
    2004:	f1 f7       	brne	.-4      	; 0x2002 <BTN_getState+0x324>
    2006:	9b 83       	std	Y+3, r25	; 0x03
    2008:	8a 83       	std	Y+2, r24	; 0x02
    200a:	0f c0       	rjmp	.+30     	; 0x202a <BTN_getState+0x34c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    200c:	69 89       	ldd	r22, Y+17	; 0x11
    200e:	7a 89       	ldd	r23, Y+18	; 0x12
    2010:	8b 89       	ldd	r24, Y+19	; 0x13
    2012:	9c 89       	ldd	r25, Y+20	; 0x14
    2014:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	88 8b       	std	Y+16, r24	; 0x10
    201e:	88 89       	ldd	r24, Y+16	; 0x10
    2020:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2022:	89 81       	ldd	r24, Y+1	; 0x01
    2024:	8a 95       	dec	r24
    2026:	f1 f7       	brne	.-4      	; 0x2024 <BTN_getState+0x346>
    2028:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_us(10);
			if(u8_Data == HIGH)	*u8_Status = NOT_PRESSED;
    202a:	89 a9       	ldd	r24, Y+49	; 0x31
    202c:	81 30       	cpi	r24, 0x01	; 1
    202e:	21 f4       	brne	.+8      	; 0x2038 <BTN_getState+0x35a>
    2030:	eb a9       	ldd	r30, Y+51	; 0x33
    2032:	fc a9       	ldd	r31, Y+52	; 0x34
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	80 83       	st	Z, r24
		}//end else if

		return E_OK;
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	8d ab       	std	Y+53, r24	; 0x35
    203c:	8d a9       	ldd	r24, Y+53	; 0x35
	}//end else
}//end BTN_getState
    203e:	e5 96       	adiw	r28, 0x35	; 53
    2040:	0f b6       	in	r0, 0x3f	; 63
    2042:	f8 94       	cli
    2044:	de bf       	out	0x3e, r29	; 62
    2046:	0f be       	out	0x3f, r0	; 63
    2048:	cd bf       	out	0x3d, r28	; 61
    204a:	cf 91       	pop	r28
    204c:	df 91       	pop	r29
    204e:	08 95       	ret

00002050 <main>:
#include "../ECUAL/BTN/BTN.h"
#include "../ECUAL/LED/LED.h"


int main(void)
{
    2050:	df 93       	push	r29
    2052:	cf 93       	push	r28
    2054:	0f 92       	push	r0
    2056:	cd b7       	in	r28, 0x3d	; 61
    2058:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_Status0;

	DIO_Init();
    205a:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_Init>

	LED_OFF(LED0);
    205e:	83 e0       	ldi	r24, 0x03	; 3
    2060:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <LED_OFF>
	LED_OFF(LED1);
    2064:	84 e0       	ldi	r24, 0x04	; 4
    2066:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <LED_OFF>
	LED_OFF(LED2);
    206a:	85 e0       	ldi	r24, 0x05	; 5
    206c:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <LED_OFF>

	while(1)
	{
		BTN_getState(BTN0, &u8_Status0);
    2070:	80 e0       	ldi	r24, 0x00	; 0
    2072:	9e 01       	movw	r18, r28
    2074:	2f 5f       	subi	r18, 0xFF	; 255
    2076:	3f 4f       	sbci	r19, 0xFF	; 255
    2078:	b9 01       	movw	r22, r18
    207a:	0e 94 6f 0e 	call	0x1cde	; 0x1cde <BTN_getState>
		if( u8_Status0 == PRESSED)
    207e:	89 81       	ldd	r24, Y+1	; 0x01
    2080:	88 23       	and	r24, r24
    2082:	b1 f7       	brne	.-20     	; 0x2070 <main+0x20>
		{
			LED_toggle(LED0);
    2084:	83 e0       	ldi	r24, 0x03	; 3
    2086:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <LED_toggle>
			LED_toggle(LED1);
    208a:	84 e0       	ldi	r24, 0x04	; 4
    208c:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <LED_toggle>
			LED_toggle(LED2);
    2090:	85 e0       	ldi	r24, 0x05	; 5
    2092:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <LED_toggle>
    2096:	ec cf       	rjmp	.-40     	; 0x2070 <main+0x20>

00002098 <__prologue_saves__>:
    2098:	2f 92       	push	r2
    209a:	3f 92       	push	r3
    209c:	4f 92       	push	r4
    209e:	5f 92       	push	r5
    20a0:	6f 92       	push	r6
    20a2:	7f 92       	push	r7
    20a4:	8f 92       	push	r8
    20a6:	9f 92       	push	r9
    20a8:	af 92       	push	r10
    20aa:	bf 92       	push	r11
    20ac:	cf 92       	push	r12
    20ae:	df 92       	push	r13
    20b0:	ef 92       	push	r14
    20b2:	ff 92       	push	r15
    20b4:	0f 93       	push	r16
    20b6:	1f 93       	push	r17
    20b8:	cf 93       	push	r28
    20ba:	df 93       	push	r29
    20bc:	cd b7       	in	r28, 0x3d	; 61
    20be:	de b7       	in	r29, 0x3e	; 62
    20c0:	ca 1b       	sub	r28, r26
    20c2:	db 0b       	sbc	r29, r27
    20c4:	0f b6       	in	r0, 0x3f	; 63
    20c6:	f8 94       	cli
    20c8:	de bf       	out	0x3e, r29	; 62
    20ca:	0f be       	out	0x3f, r0	; 63
    20cc:	cd bf       	out	0x3d, r28	; 61
    20ce:	09 94       	ijmp

000020d0 <__epilogue_restores__>:
    20d0:	2a 88       	ldd	r2, Y+18	; 0x12
    20d2:	39 88       	ldd	r3, Y+17	; 0x11
    20d4:	48 88       	ldd	r4, Y+16	; 0x10
    20d6:	5f 84       	ldd	r5, Y+15	; 0x0f
    20d8:	6e 84       	ldd	r6, Y+14	; 0x0e
    20da:	7d 84       	ldd	r7, Y+13	; 0x0d
    20dc:	8c 84       	ldd	r8, Y+12	; 0x0c
    20de:	9b 84       	ldd	r9, Y+11	; 0x0b
    20e0:	aa 84       	ldd	r10, Y+10	; 0x0a
    20e2:	b9 84       	ldd	r11, Y+9	; 0x09
    20e4:	c8 84       	ldd	r12, Y+8	; 0x08
    20e6:	df 80       	ldd	r13, Y+7	; 0x07
    20e8:	ee 80       	ldd	r14, Y+6	; 0x06
    20ea:	fd 80       	ldd	r15, Y+5	; 0x05
    20ec:	0c 81       	ldd	r16, Y+4	; 0x04
    20ee:	1b 81       	ldd	r17, Y+3	; 0x03
    20f0:	aa 81       	ldd	r26, Y+2	; 0x02
    20f2:	b9 81       	ldd	r27, Y+1	; 0x01
    20f4:	ce 0f       	add	r28, r30
    20f6:	d1 1d       	adc	r29, r1
    20f8:	0f b6       	in	r0, 0x3f	; 63
    20fa:	f8 94       	cli
    20fc:	de bf       	out	0x3e, r29	; 62
    20fe:	0f be       	out	0x3f, r0	; 63
    2100:	cd bf       	out	0x3d, r28	; 61
    2102:	ed 01       	movw	r28, r26
    2104:	08 95       	ret

00002106 <_exit>:
    2106:	f8 94       	cli

00002108 <__stop_program>:
    2108:	ff cf       	rjmp	.-2      	; 0x2108 <__stop_program>
