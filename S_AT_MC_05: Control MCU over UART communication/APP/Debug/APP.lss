
APP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fa6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008a  00800060  00001fa6  0000203a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008000ea  008000ea  000020c4  2**0
                  ALLOC
  3 .stab         00002d84  00000000  00000000  000020c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002028  00000000  00000000  00004e48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ea       	ldi	r30, 0xA6	; 166
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa ee       	ldi	r26, 0xEA	; 234
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 3e       	cpi	r26, 0xEF	; 239
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <main>
      8a:	0c 94 d1 0f 	jmp	0x1fa2	; 0x1fa2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_Init>:
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <UART_Init+0x6>
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	9a 83       	std	Y+2, r25	; 0x02
      9e:	89 83       	std	Y+1, r24	; 0x01
      a0:	ab e2       	ldi	r26, 0x2B	; 43
      a2:	b0 e0       	ldi	r27, 0x00	; 0
      a4:	eb e2       	ldi	r30, 0x2B	; 43
      a6:	f0 e0       	ldi	r31, 0x00	; 0
      a8:	80 81       	ld	r24, Z
      aa:	82 60       	ori	r24, 0x02	; 2
      ac:	8c 93       	st	X, r24
      ae:	aa e2       	ldi	r26, 0x2A	; 42
      b0:	b0 e0       	ldi	r27, 0x00	; 0
      b2:	ea e2       	ldi	r30, 0x2A	; 42
      b4:	f0 e0       	ldi	r31, 0x00	; 0
      b6:	80 81       	ld	r24, Z
      b8:	80 61       	ori	r24, 0x10	; 16
      ba:	8c 93       	st	X, r24
      bc:	aa e2       	ldi	r26, 0x2A	; 42
      be:	b0 e0       	ldi	r27, 0x00	; 0
      c0:	ea e2       	ldi	r30, 0x2A	; 42
      c2:	f0 e0       	ldi	r31, 0x00	; 0
      c4:	80 81       	ld	r24, Z
      c6:	88 60       	ori	r24, 0x08	; 8
      c8:	8c 93       	st	X, r24
      ca:	a0 e4       	ldi	r26, 0x40	; 64
      cc:	b0 e0       	ldi	r27, 0x00	; 0
      ce:	e0 e4       	ldi	r30, 0x40	; 64
      d0:	f0 e0       	ldi	r31, 0x00	; 0
      d2:	80 81       	ld	r24, Z
      d4:	8f 7b       	andi	r24, 0xBF	; 191
      d6:	8c 93       	st	X, r24
      d8:	a0 e4       	ldi	r26, 0x40	; 64
      da:	b0 e0       	ldi	r27, 0x00	; 0
      dc:	e0 e4       	ldi	r30, 0x40	; 64
      de:	f0 e0       	ldi	r31, 0x00	; 0
      e0:	80 81       	ld	r24, Z
      e2:	8f 7d       	andi	r24, 0xDF	; 223
      e4:	8c 93       	st	X, r24
      e6:	a0 e4       	ldi	r26, 0x40	; 64
      e8:	b0 e0       	ldi	r27, 0x00	; 0
      ea:	e0 e4       	ldi	r30, 0x40	; 64
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	80 81       	ld	r24, Z
      f0:	8f 7e       	andi	r24, 0xEF	; 239
      f2:	8c 93       	st	X, r24
      f4:	a0 e4       	ldi	r26, 0x40	; 64
      f6:	b0 e0       	ldi	r27, 0x00	; 0
      f8:	e0 e4       	ldi	r30, 0x40	; 64
      fa:	f0 e0       	ldi	r31, 0x00	; 0
      fc:	80 81       	ld	r24, Z
      fe:	87 7f       	andi	r24, 0xF7	; 247
     100:	8c 93       	st	X, r24
     102:	a0 e4       	ldi	r26, 0x40	; 64
     104:	b0 e0       	ldi	r27, 0x00	; 0
     106:	e0 e4       	ldi	r30, 0x40	; 64
     108:	f0 e0       	ldi	r31, 0x00	; 0
     10a:	80 81       	ld	r24, Z
     10c:	82 60       	ori	r24, 0x02	; 2
     10e:	8c 93       	st	X, r24
     110:	a0 e4       	ldi	r26, 0x40	; 64
     112:	b0 e0       	ldi	r27, 0x00	; 0
     114:	e0 e4       	ldi	r30, 0x40	; 64
     116:	f0 e0       	ldi	r31, 0x00	; 0
     118:	80 81       	ld	r24, Z
     11a:	84 60       	ori	r24, 0x04	; 4
     11c:	8c 93       	st	X, r24
     11e:	aa e2       	ldi	r26, 0x2A	; 42
     120:	b0 e0       	ldi	r27, 0x00	; 0
     122:	ea e2       	ldi	r30, 0x2A	; 42
     124:	f0 e0       	ldi	r31, 0x00	; 0
     126:	80 81       	ld	r24, Z
     128:	84 60       	ori	r24, 0x04	; 4
     12a:	8c 93       	st	X, r24
     12c:	e0 e4       	ldi	r30, 0x40	; 64
     12e:	f0 e0       	ldi	r31, 0x00	; 0
     130:	10 82       	st	Z, r1
     132:	e9 e2       	ldi	r30, 0x29	; 41
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	87 e6       	ldi	r24, 0x67	; 103
     138:	80 83       	st	Z, r24
     13a:	81 e0       	ldi	r24, 0x01	; 1
     13c:	80 93 ea 00 	sts	0x00EA, r24
     140:	80 91 ea 00 	lds	r24, 0x00EA
     144:	0f 90       	pop	r0
     146:	0f 90       	pop	r0
     148:	cf 91       	pop	r28
     14a:	df 91       	pop	r29
     14c:	08 95       	ret

0000014e <UART_SendData>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to send data via UART
*************************************************************************************************/
enuErrorStatus_t UART_SendData(uint8_t u8_Data)
{
     14e:	df 93       	push	r29
     150:	cf 93       	push	r28
     152:	00 d0       	rcall	.+0      	; 0x154 <UART_SendData+0x6>
     154:	cd b7       	in	r28, 0x3d	; 61
     156:	de b7       	in	r29, 0x3e	; 62
     158:	89 83       	std	Y+1, r24	; 0x01
	if(genuInitStatus == E_ERROR)
     15a:	80 91 ea 00 	lds	r24, 0x00EA
     15e:	88 23       	and	r24, r24
     160:	11 f4       	brne	.+4      	; 0x166 <UART_SendData+0x18>
	{
		//if uart is not initialized
		return E_ERROR;
     162:	1a 82       	std	Y+2, r1	; 0x02
     164:	0f c0       	rjmp	.+30     	; 0x184 <UART_SendData+0x36>
	}//end if

	/* Wait for empty transmit buffer */
	while (!(GET_BIT(UCSRA_R, UDRE_B)));
     166:	eb e2       	ldi	r30, 0x2B	; 43
     168:	f0 e0       	ldi	r31, 0x00	; 0
     16a:	80 81       	ld	r24, Z
     16c:	88 2f       	mov	r24, r24
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	80 72       	andi	r24, 0x20	; 32
     172:	90 70       	andi	r25, 0x00	; 0
     174:	00 97       	sbiw	r24, 0x00	; 0
     176:	b9 f3       	breq	.-18     	; 0x166 <UART_SendData+0x18>

	/* Put data into buffer, sends the data */
	UDR_R=u8_Data;
     178:	ec e2       	ldi	r30, 0x2C	; 44
     17a:	f0 e0       	ldi	r31, 0x00	; 0
     17c:	89 81       	ldd	r24, Y+1	; 0x01
     17e:	80 83       	st	Z, r24

	return E_OK;
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	8a 83       	std	Y+2, r24	; 0x02
     184:	8a 81       	ldd	r24, Y+2	; 0x02
}//end UART_SendData
     186:	0f 90       	pop	r0
     188:	0f 90       	pop	r0
     18a:	cf 91       	pop	r28
     18c:	df 91       	pop	r29
     18e:	08 95       	ret

00000190 <UART_ReceiveData>:
* Parameters (out): pu8_Data
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to receive data via UART
*************************************************************************************************/
enuErrorStatus_t UART_ReceiveData(uint8_t* pu8_Data)
{
     190:	df 93       	push	r29
     192:	cf 93       	push	r28
     194:	00 d0       	rcall	.+0      	; 0x196 <UART_ReceiveData+0x6>
     196:	0f 92       	push	r0
     198:	cd b7       	in	r28, 0x3d	; 61
     19a:	de b7       	in	r29, 0x3e	; 62
     19c:	9a 83       	std	Y+2, r25	; 0x02
     19e:	89 83       	std	Y+1, r24	; 0x01
	if(genuInitStatus == E_ERROR)
     1a0:	80 91 ea 00 	lds	r24, 0x00EA
     1a4:	88 23       	and	r24, r24
     1a6:	11 f4       	brne	.+4      	; 0x1ac <UART_ReceiveData+0x1c>
	{
		//if uart is not initialized
		return E_ERROR;
     1a8:	1b 82       	std	Y+3, r1	; 0x03
     1aa:	0d c0       	rjmp	.+26     	; 0x1c6 <UART_ReceiveData+0x36>
	}//end if

	/* Wait for data to be received */
	while(!(GET_BIT(UCSRA_R, RXC_B)));
     1ac:	eb e2       	ldi	r30, 0x2B	; 43
     1ae:	f0 e0       	ldi	r31, 0x00	; 0
     1b0:	80 81       	ld	r24, Z
     1b2:	88 23       	and	r24, r24
     1b4:	dc f7       	brge	.-10     	; 0x1ac <UART_ReceiveData+0x1c>

	/* Get and return received data from buffer */
	*pu8_Data = UDR_R;
     1b6:	ec e2       	ldi	r30, 0x2C	; 44
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	80 81       	ld	r24, Z
     1bc:	e9 81       	ldd	r30, Y+1	; 0x01
     1be:	fa 81       	ldd	r31, Y+2	; 0x02
     1c0:	80 83       	st	Z, r24

	return E_OK;
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	8b 83       	std	Y+3, r24	; 0x03
     1c6:	8b 81       	ldd	r24, Y+3	; 0x03
}//end UART_ReceiveData
     1c8:	0f 90       	pop	r0
     1ca:	0f 90       	pop	r0
     1cc:	0f 90       	pop	r0
     1ce:	cf 91       	pop	r28
     1d0:	df 91       	pop	r29
     1d2:	08 95       	ret

000001d4 <UART_RecieveDataNoBLOCKING>:
* Parameters (out): pu8_Data
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to receive data via UART without blocking the system
*************************************************************************************************/
enuErrorStatus_t UART_RecieveDataNoBLOCKING(uint8_t* pu8_Data)
{
     1d4:	df 93       	push	r29
     1d6:	cf 93       	push	r28
     1d8:	00 d0       	rcall	.+0      	; 0x1da <UART_RecieveDataNoBLOCKING+0x6>
     1da:	00 d0       	rcall	.+0      	; 0x1dc <UART_RecieveDataNoBLOCKING+0x8>
     1dc:	cd b7       	in	r28, 0x3d	; 61
     1de:	de b7       	in	r29, 0x3e	; 62
     1e0:	9b 83       	std	Y+3, r25	; 0x03
     1e2:	8a 83       	std	Y+2, r24	; 0x02
	if(genuInitStatus == E_ERROR)
     1e4:	80 91 ea 00 	lds	r24, 0x00EA
     1e8:	88 23       	and	r24, r24
     1ea:	11 f4       	brne	.+4      	; 0x1f0 <UART_RecieveDataNoBLOCKING+0x1c>
	{
		//if uart is not initialized
		return E_ERROR;
     1ec:	1c 82       	std	Y+4, r1	; 0x04
     1ee:	10 c0       	rjmp	.+32     	; 0x210 <UART_RecieveDataNoBLOCKING+0x3c>
	}//end if

	enuErrorStatus_t enuStatus = E_ERROR;
     1f0:	19 82       	std	Y+1, r1	; 0x01

    if (GET_BIT(UCSRA_R, RXC_B))
     1f2:	eb e2       	ldi	r30, 0x2B	; 43
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	80 81       	ld	r24, Z
     1f8:	88 23       	and	r24, r24
     1fa:	44 f4       	brge	.+16     	; 0x20c <UART_RecieveDataNoBLOCKING+0x38>
    {
        *pu8_Data =UDR_R;
     1fc:	ec e2       	ldi	r30, 0x2C	; 44
     1fe:	f0 e0       	ldi	r31, 0x00	; 0
     200:	80 81       	ld	r24, Z
     202:	ea 81       	ldd	r30, Y+2	; 0x02
     204:	fb 81       	ldd	r31, Y+3	; 0x03
     206:	80 83       	st	Z, r24
        enuStatus = E_OK;
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	89 83       	std	Y+1, r24	; 0x01
    }
    else
    {
        /* do nothing */
    }
    return enuStatus;
     20c:	89 81       	ldd	r24, Y+1	; 0x01
     20e:	8c 83       	std	Y+4, r24	; 0x04
     210:	8c 81       	ldd	r24, Y+4	; 0x04

	return E_OK;
}//end UART_RecieveDataNoBLOCKING
     212:	0f 90       	pop	r0
     214:	0f 90       	pop	r0
     216:	0f 90       	pop	r0
     218:	0f 90       	pop	r0
     21a:	cf 91       	pop	r28
     21c:	df 91       	pop	r29
     21e:	08 95       	ret

00000220 <UART_SendDataNoBLOCKING>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to send data via UART without blocking the system
*************************************************************************************************/
enuErrorStatus_t UART_SendDataNoBLOCKING(uint8_t u8_Data)
{
     220:	df 93       	push	r29
     222:	cf 93       	push	r28
     224:	00 d0       	rcall	.+0      	; 0x226 <UART_SendDataNoBLOCKING+0x6>
     226:	0f 92       	push	r0
     228:	cd b7       	in	r28, 0x3d	; 61
     22a:	de b7       	in	r29, 0x3e	; 62
     22c:	8a 83       	std	Y+2, r24	; 0x02
	if(genuInitStatus == E_ERROR)
     22e:	80 91 ea 00 	lds	r24, 0x00EA
     232:	88 23       	and	r24, r24
     234:	11 f4       	brne	.+4      	; 0x23a <UART_SendDataNoBLOCKING+0x1a>
	{
		//if uart is not initialized
		return E_ERROR;
     236:	1b 82       	std	Y+3, r1	; 0x03
     238:	12 c0       	rjmp	.+36     	; 0x25e <UART_SendDataNoBLOCKING+0x3e>
	}//end if

	enuErrorStatus_t enuStatus = E_ERROR;
     23a:	19 82       	std	Y+1, r1	; 0x01

    if (GET_BIT(UCSRA_R, UDRE_B))
     23c:	eb e2       	ldi	r30, 0x2B	; 43
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	80 81       	ld	r24, Z
     242:	88 2f       	mov	r24, r24
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	80 72       	andi	r24, 0x20	; 32
     248:	90 70       	andi	r25, 0x00	; 0
     24a:	00 97       	sbiw	r24, 0x00	; 0
     24c:	31 f0       	breq	.+12     	; 0x25a <UART_SendDataNoBLOCKING+0x3a>
    {
        UDR_R = u8_Data;
     24e:	ec e2       	ldi	r30, 0x2C	; 44
     250:	f0 e0       	ldi	r31, 0x00	; 0
     252:	8a 81       	ldd	r24, Y+2	; 0x02
     254:	80 83       	st	Z, r24
        enuStatus = E_OK;
     256:	81 e0       	ldi	r24, 0x01	; 1
     258:	89 83       	std	Y+1, r24	; 0x01
    }
    else
    {
        /* do nothing */
    }
    return enuStatus;
     25a:	89 81       	ldd	r24, Y+1	; 0x01
     25c:	8b 83       	std	Y+3, r24	; 0x03
     25e:	8b 81       	ldd	r24, Y+3	; 0x03

	return E_OK;
}//end UART_RecieveDataNoBLOCKING
     260:	0f 90       	pop	r0
     262:	0f 90       	pop	r0
     264:	0f 90       	pop	r0
     266:	cf 91       	pop	r28
     268:	df 91       	pop	r29
     26a:	08 95       	ret

0000026c <UART_SendString>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to send string via UART
*************************************************************************************************/
enuErrorStatus_t UART_SendString(uint8_t* u8_String)
{
     26c:	df 93       	push	r29
     26e:	cf 93       	push	r28
     270:	00 d0       	rcall	.+0      	; 0x272 <UART_SendString+0x6>
     272:	00 d0       	rcall	.+0      	; 0x274 <UART_SendString+0x8>
     274:	cd b7       	in	r28, 0x3d	; 61
     276:	de b7       	in	r29, 0x3e	; 62
     278:	9b 83       	std	Y+3, r25	; 0x03
     27a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_i=0;
     27c:	19 82       	std	Y+1, r1	; 0x01

	if(genuInitStatus == E_ERROR || u8_String == NULL_PTR)
     27e:	80 91 ea 00 	lds	r24, 0x00EA
     282:	88 23       	and	r24, r24
     284:	21 f0       	breq	.+8      	; 0x28e <UART_SendString+0x22>
     286:	8a 81       	ldd	r24, Y+2	; 0x02
     288:	9b 81       	ldd	r25, Y+3	; 0x03
     28a:	00 97       	sbiw	r24, 0x00	; 0
     28c:	81 f4       	brne	.+32     	; 0x2ae <UART_SendString+0x42>
	{
		//if uart is not initialized
		return E_ERROR;
     28e:	1c 82       	std	Y+4, r1	; 0x04
     290:	1b c0       	rjmp	.+54     	; 0x2c8 <UART_SendString+0x5c>
	}//end if

	while (u8_String[u8_i]!='\0')
	{
		UART_SendData(u8_String[u8_i]);
     292:	89 81       	ldd	r24, Y+1	; 0x01
     294:	28 2f       	mov	r18, r24
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	8a 81       	ldd	r24, Y+2	; 0x02
     29a:	9b 81       	ldd	r25, Y+3	; 0x03
     29c:	fc 01       	movw	r30, r24
     29e:	e2 0f       	add	r30, r18
     2a0:	f3 1f       	adc	r31, r19
     2a2:	80 81       	ld	r24, Z
     2a4:	0e 94 a7 00 	call	0x14e	; 0x14e <UART_SendData>
		u8_i++;
     2a8:	89 81       	ldd	r24, Y+1	; 0x01
     2aa:	8f 5f       	subi	r24, 0xFF	; 255
     2ac:	89 83       	std	Y+1, r24	; 0x01
	{
		//if uart is not initialized
		return E_ERROR;
	}//end if

	while (u8_String[u8_i]!='\0')
     2ae:	89 81       	ldd	r24, Y+1	; 0x01
     2b0:	28 2f       	mov	r18, r24
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	8a 81       	ldd	r24, Y+2	; 0x02
     2b6:	9b 81       	ldd	r25, Y+3	; 0x03
     2b8:	fc 01       	movw	r30, r24
     2ba:	e2 0f       	add	r30, r18
     2bc:	f3 1f       	adc	r31, r19
     2be:	80 81       	ld	r24, Z
     2c0:	88 23       	and	r24, r24
     2c2:	39 f7       	brne	.-50     	; 0x292 <UART_SendString+0x26>
	{
		UART_SendData(u8_String[u8_i]);
		u8_i++;
	}//end while

	return E_OK;
     2c4:	81 e0       	ldi	r24, 0x01	; 1
     2c6:	8c 83       	std	Y+4, r24	; 0x04
     2c8:	8c 81       	ldd	r24, Y+4	; 0x04
}//end UART_SendString
     2ca:	0f 90       	pop	r0
     2cc:	0f 90       	pop	r0
     2ce:	0f 90       	pop	r0
     2d0:	0f 90       	pop	r0
     2d2:	cf 91       	pop	r28
     2d4:	df 91       	pop	r29
     2d6:	08 95       	ret

000002d8 <UART_ReceiveString>:
* Parameters (out): u8_String
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to receive string via UART
*************************************************************************************************/
enuErrorStatus_t UART_ReceiveString(uint8_t* u8_String)
{
     2d8:	df 93       	push	r29
     2da:	cf 93       	push	r28
     2dc:	00 d0       	rcall	.+0      	; 0x2de <UART_ReceiveString+0x6>
     2de:	00 d0       	rcall	.+0      	; 0x2e0 <UART_ReceiveString+0x8>
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
     2e4:	9b 83       	std	Y+3, r25	; 0x03
     2e6:	8a 83       	std	Y+2, r24	; 0x02
	if(genuInitStatus == E_ERROR)
     2e8:	80 91 ea 00 	lds	r24, 0x00EA
     2ec:	88 23       	and	r24, r24
     2ee:	11 f4       	brne	.+4      	; 0x2f4 <UART_ReceiveString+0x1c>
	{
		//if uart is not initialized
		return E_ERROR;
     2f0:	1c 82       	std	Y+4, r1	; 0x04
     2f2:	2d c0       	rjmp	.+90     	; 0x34e <UART_ReceiveString+0x76>
	}//end if

	uint8_t u8_i=0;
     2f4:	19 82       	std	Y+1, r1	; 0x01

	UART_ReceiveData(&u8_String[u8_i]);
     2f6:	89 81       	ldd	r24, Y+1	; 0x01
     2f8:	28 2f       	mov	r18, r24
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	8a 81       	ldd	r24, Y+2	; 0x02
     2fe:	9b 81       	ldd	r25, Y+3	; 0x03
     300:	82 0f       	add	r24, r18
     302:	93 1f       	adc	r25, r19
     304:	0e 94 c8 00 	call	0x190	; 0x190 <UART_ReceiveData>
     308:	0c c0       	rjmp	.+24     	; 0x322 <UART_ReceiveString+0x4a>

	while(u8_String[u8_i] !='$')
	{
		u8_i++;
     30a:	89 81       	ldd	r24, Y+1	; 0x01
     30c:	8f 5f       	subi	r24, 0xFF	; 255
     30e:	89 83       	std	Y+1, r24	; 0x01
		UART_ReceiveData(&u8_String[u8_i]);
     310:	89 81       	ldd	r24, Y+1	; 0x01
     312:	28 2f       	mov	r18, r24
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	8a 81       	ldd	r24, Y+2	; 0x02
     318:	9b 81       	ldd	r25, Y+3	; 0x03
     31a:	82 0f       	add	r24, r18
     31c:	93 1f       	adc	r25, r19
     31e:	0e 94 c8 00 	call	0x190	; 0x190 <UART_ReceiveData>

	uint8_t u8_i=0;

	UART_ReceiveData(&u8_String[u8_i]);

	while(u8_String[u8_i] !='$')
     322:	89 81       	ldd	r24, Y+1	; 0x01
     324:	28 2f       	mov	r18, r24
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	8a 81       	ldd	r24, Y+2	; 0x02
     32a:	9b 81       	ldd	r25, Y+3	; 0x03
     32c:	fc 01       	movw	r30, r24
     32e:	e2 0f       	add	r30, r18
     330:	f3 1f       	adc	r31, r19
     332:	80 81       	ld	r24, Z
     334:	84 32       	cpi	r24, 0x24	; 36
     336:	49 f7       	brne	.-46     	; 0x30a <UART_ReceiveString+0x32>
	{
		u8_i++;
		UART_ReceiveData(&u8_String[u8_i]);
	}
	u8_String[u8_i]='\0';
     338:	89 81       	ldd	r24, Y+1	; 0x01
     33a:	28 2f       	mov	r18, r24
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	8a 81       	ldd	r24, Y+2	; 0x02
     340:	9b 81       	ldd	r25, Y+3	; 0x03
     342:	fc 01       	movw	r30, r24
     344:	e2 0f       	add	r30, r18
     346:	f3 1f       	adc	r31, r19
     348:	10 82       	st	Z, r1

	return E_OK;
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	8c 83       	std	Y+4, r24	; 0x04
     34e:	8c 81       	ldd	r24, Y+4	; 0x04
}//end UART_ReceiveString
     350:	0f 90       	pop	r0
     352:	0f 90       	pop	r0
     354:	0f 90       	pop	r0
     356:	0f 90       	pop	r0
     358:	cf 91       	pop	r28
     35a:	df 91       	pop	r29
     35c:	08 95       	ret

0000035e <Test_UART_Init>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to test UART initialization
*************************************************************************************************/
enuErrorStatus_t Test_UART_Init(void)
{
     35e:	df 93       	push	r29
     360:	cf 93       	push	r28
     362:	cd b7       	in	r28, 0x3d	; 61
     364:	de b7       	in	r29, 0x3e	; 62
	return genuInitStatus;
     366:	80 91 ea 00 	lds	r24, 0x00EA
}//end Test_UART_Init
     36a:	cf 91       	pop	r28
     36c:	df 91       	pop	r29
     36e:	08 95       	ret

00000370 <Test_UART_SendData>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to test sending data via UART
*************************************************************************************************/
enuErrorStatus_t Test_UART_SendData(void)
{
     370:	df 93       	push	r29
     372:	cf 93       	push	r28
     374:	cd b7       	in	r28, 0x3d	; 61
     376:	de b7       	in	r29, 0x3e	; 62
	return UART_SendData('k');
     378:	8b e6       	ldi	r24, 0x6B	; 107
     37a:	0e 94 a7 00 	call	0x14e	; 0x14e <UART_SendData>
}//end Test_UART_Init
     37e:	cf 91       	pop	r28
     380:	df 91       	pop	r29
     382:	08 95       	ret

00000384 <Test_UART_SendString>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to test sending string via UART
*************************************************************************************************/
enuErrorStatus_t Test_UART_SendString(void)
{
     384:	df 93       	push	r29
     386:	cf 93       	push	r28
     388:	cd b7       	in	r28, 0x3d	; 61
     38a:	de b7       	in	r29, 0x3e	; 62
	return UART_SendString((uint8_t*)"Hello");
     38c:	80 e6       	ldi	r24, 0x60	; 96
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	0e 94 36 01 	call	0x26c	; 0x26c <UART_SendString>
}//end Test_UART_Init
     394:	cf 91       	pop	r28
     396:	df 91       	pop	r29
     398:	08 95       	ret

0000039a <Test_UART_ReceiveData>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to test receiving data via UART
*************************************************************************************************/
enuErrorStatus_t Test_UART_ReceiveData(void)
{
     39a:	df 93       	push	r29
     39c:	cf 93       	push	r28
     39e:	0f 92       	push	r0
     3a0:	cd b7       	in	r28, 0x3d	; 61
     3a2:	de b7       	in	r29, 0x3e	; 62
	uint8_t pu8_Data;
	return UART_ReceiveData(&pu8_Data);
     3a4:	ce 01       	movw	r24, r28
     3a6:	01 96       	adiw	r24, 0x01	; 1
     3a8:	0e 94 c8 00 	call	0x190	; 0x190 <UART_ReceiveData>
}//end Test_UART_Init
     3ac:	0f 90       	pop	r0
     3ae:	cf 91       	pop	r28
     3b0:	df 91       	pop	r29
     3b2:	08 95       	ret

000003b4 <Test_UART_ReceiveString>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to test receiving string via UART
*************************************************************************************************/
enuErrorStatus_t Test_UART_ReceiveString(void)
{
     3b4:	df 93       	push	r29
     3b6:	cf 93       	push	r28
     3b8:	00 d0       	rcall	.+0      	; 0x3ba <Test_UART_ReceiveString+0x6>
     3ba:	cd b7       	in	r28, 0x3d	; 61
     3bc:	de b7       	in	r29, 0x3e	; 62
	uint8_t *u8_String;
	return UART_ReceiveString(&u8_String);
     3be:	ce 01       	movw	r24, r28
     3c0:	01 96       	adiw	r24, 0x01	; 1
     3c2:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <UART_ReceiveString>
}//end Test_UART_Init
     3c6:	0f 90       	pop	r0
     3c8:	0f 90       	pop	r0
     3ca:	cf 91       	pop	r28
     3cc:	df 91       	pop	r29
     3ce:	08 95       	ret

000003d0 <PWM_Init>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to initialize the PWM
*************************************************************************************************/
enuErrorStatus_t PWM_Init(void)
{
     3d0:	df 93       	push	r29
     3d2:	cf 93       	push	r28
     3d4:	cd b7       	in	r28, 0x3d	; 61
     3d6:	de b7       	in	r29, 0x3e	; 62
	if(strpwmConfig.enuTimer == TIMER0)
     3d8:	80 91 b8 00 	lds	r24, 0x00B8
     3dc:	88 23       	and	r24, r24
     3de:	09 f0       	breq	.+2      	; 0x3e2 <PWM_Init+0x12>
     3e0:	4a c0       	rjmp	.+148    	; 0x476 <PWM_Init+0xa6>
	{
		//Select PWM mode
		if(strpwmConfig.enuPWMMode == FAST_PWM)
     3e2:	80 91 b9 00 	lds	r24, 0x00B9
     3e6:	88 23       	and	r24, r24
     3e8:	79 f4       	brne	.+30     	; 0x408 <PWM_Init+0x38>
		{
			SET_BIT(TCCR0_R, WGM00_BIT);
     3ea:	a3 e5       	ldi	r26, 0x53	; 83
     3ec:	b0 e0       	ldi	r27, 0x00	; 0
     3ee:	e3 e5       	ldi	r30, 0x53	; 83
     3f0:	f0 e0       	ldi	r31, 0x00	; 0
     3f2:	80 81       	ld	r24, Z
     3f4:	80 64       	ori	r24, 0x40	; 64
     3f6:	8c 93       	st	X, r24
			SET_BIT(TCCR0_R, WGM01_BIT);
     3f8:	a3 e5       	ldi	r26, 0x53	; 83
     3fa:	b0 e0       	ldi	r27, 0x00	; 0
     3fc:	e3 e5       	ldi	r30, 0x53	; 83
     3fe:	f0 e0       	ldi	r31, 0x00	; 0
     400:	80 81       	ld	r24, Z
     402:	88 60       	ori	r24, 0x08	; 8
     404:	8c 93       	st	X, r24
     406:	12 c0       	rjmp	.+36     	; 0x42c <PWM_Init+0x5c>
		}
		else if(strpwmConfig.enuPWMMode == PC_PWM)
     408:	80 91 b9 00 	lds	r24, 0x00B9
     40c:	81 30       	cpi	r24, 0x01	; 1
     40e:	71 f4       	brne	.+28     	; 0x42c <PWM_Init+0x5c>
		{
			SET_BIT(TCCR0_R, WGM00_BIT);
     410:	a3 e5       	ldi	r26, 0x53	; 83
     412:	b0 e0       	ldi	r27, 0x00	; 0
     414:	e3 e5       	ldi	r30, 0x53	; 83
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	80 81       	ld	r24, Z
     41a:	80 64       	ori	r24, 0x40	; 64
     41c:	8c 93       	st	X, r24
			CLR_BIT(TCCR0_R, WGM01_BIT);
     41e:	a3 e5       	ldi	r26, 0x53	; 83
     420:	b0 e0       	ldi	r27, 0x00	; 0
     422:	e3 e5       	ldi	r30, 0x53	; 83
     424:	f0 e0       	ldi	r31, 0x00	; 0
     426:	80 81       	ld	r24, Z
     428:	87 7f       	andi	r24, 0xF7	; 247
     42a:	8c 93       	st	X, r24
		}//end else if

		//select OC0 mode
		if(strpwmConfig.enuOCMode == NON_INVERTING)
     42c:	80 91 bc 00 	lds	r24, 0x00BC
     430:	88 23       	and	r24, r24
     432:	79 f4       	brne	.+30     	; 0x452 <PWM_Init+0x82>
		{
			CLR_BIT(TCCR0_R, COM00_BIT);
     434:	a3 e5       	ldi	r26, 0x53	; 83
     436:	b0 e0       	ldi	r27, 0x00	; 0
     438:	e3 e5       	ldi	r30, 0x53	; 83
     43a:	f0 e0       	ldi	r31, 0x00	; 0
     43c:	80 81       	ld	r24, Z
     43e:	8f 7e       	andi	r24, 0xEF	; 239
     440:	8c 93       	st	X, r24
			SET_BIT(TCCR0_R, COM01_BIT);
     442:	a3 e5       	ldi	r26, 0x53	; 83
     444:	b0 e0       	ldi	r27, 0x00	; 0
     446:	e3 e5       	ldi	r30, 0x53	; 83
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	80 81       	ld	r24, Z
     44c:	80 62       	ori	r24, 0x20	; 32
     44e:	8c 93       	st	X, r24
     450:	12 c0       	rjmp	.+36     	; 0x476 <PWM_Init+0xa6>
		}//end if
		else if(strpwmConfig.enuOCMode == INVERTING)
     452:	80 91 bc 00 	lds	r24, 0x00BC
     456:	81 30       	cpi	r24, 0x01	; 1
     458:	71 f4       	brne	.+28     	; 0x476 <PWM_Init+0xa6>
		{
			SET_BIT(TCCR0_R, COM00_BIT);
     45a:	a3 e5       	ldi	r26, 0x53	; 83
     45c:	b0 e0       	ldi	r27, 0x00	; 0
     45e:	e3 e5       	ldi	r30, 0x53	; 83
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	80 81       	ld	r24, Z
     464:	80 61       	ori	r24, 0x10	; 16
     466:	8c 93       	st	X, r24
			SET_BIT(TCCR0_R, COM01_BIT);
     468:	a3 e5       	ldi	r26, 0x53	; 83
     46a:	b0 e0       	ldi	r27, 0x00	; 0
     46c:	e3 e5       	ldi	r30, 0x53	; 83
     46e:	f0 e0       	ldi	r31, 0x00	; 0
     470:	80 81       	ld	r24, Z
     472:	80 62       	ori	r24, 0x20	; 32
     474:	8c 93       	st	X, r24
		}//end else if
	}//end if for timer0

	return E_OK;
     476:	81 e0       	ldi	r24, 0x01	; 1
}//end PWM_Init
     478:	cf 91       	pop	r28
     47a:	df 91       	pop	r29
     47c:	08 95       	ret

0000047e <setPrescaler>:

//private function to set prescaler
static void setPrescaler(void)
{
     47e:	df 93       	push	r29
     480:	cf 93       	push	r28
     482:	00 d0       	rcall	.+0      	; 0x484 <setPrescaler+0x6>
     484:	cd b7       	in	r28, 0x3d	; 61
     486:	de b7       	in	r29, 0x3e	; 62
	switch(strpwmConfig.enuPWMPrescal)
     488:	80 91 ba 00 	lds	r24, 0x00BA
     48c:	28 2f       	mov	r18, r24
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	3a 83       	std	Y+2, r19	; 0x02
     492:	29 83       	std	Y+1, r18	; 0x01
     494:	89 81       	ldd	r24, Y+1	; 0x01
     496:	9a 81       	ldd	r25, Y+2	; 0x02
     498:	83 30       	cpi	r24, 0x03	; 3
     49a:	91 05       	cpc	r25, r1
     49c:	09 f4       	brne	.+2      	; 0x4a0 <setPrescaler+0x22>
     49e:	70 c0       	rjmp	.+224    	; 0x580 <setPrescaler+0x102>
     4a0:	29 81       	ldd	r18, Y+1	; 0x01
     4a2:	3a 81       	ldd	r19, Y+2	; 0x02
     4a4:	24 30       	cpi	r18, 0x04	; 4
     4a6:	31 05       	cpc	r19, r1
     4a8:	84 f4       	brge	.+32     	; 0x4ca <setPrescaler+0x4c>
     4aa:	89 81       	ldd	r24, Y+1	; 0x01
     4ac:	9a 81       	ldd	r25, Y+2	; 0x02
     4ae:	81 30       	cpi	r24, 0x01	; 1
     4b0:	91 05       	cpc	r25, r1
     4b2:	d1 f1       	breq	.+116    	; 0x528 <setPrescaler+0xaa>
     4b4:	29 81       	ldd	r18, Y+1	; 0x01
     4b6:	3a 81       	ldd	r19, Y+2	; 0x02
     4b8:	22 30       	cpi	r18, 0x02	; 2
     4ba:	31 05       	cpc	r19, r1
     4bc:	0c f0       	brlt	.+2      	; 0x4c0 <setPrescaler+0x42>
     4be:	4a c0       	rjmp	.+148    	; 0x554 <setPrescaler+0xd6>
     4c0:	89 81       	ldd	r24, Y+1	; 0x01
     4c2:	9a 81       	ldd	r25, Y+2	; 0x02
     4c4:	00 97       	sbiw	r24, 0x00	; 0
     4c6:	d1 f0       	breq	.+52     	; 0x4fc <setPrescaler+0x7e>
     4c8:	c8 c0       	rjmp	.+400    	; 0x65a <setPrescaler+0x1dc>
     4ca:	29 81       	ldd	r18, Y+1	; 0x01
     4cc:	3a 81       	ldd	r19, Y+2	; 0x02
     4ce:	25 30       	cpi	r18, 0x05	; 5
     4d0:	31 05       	cpc	r19, r1
     4d2:	09 f4       	brne	.+2      	; 0x4d6 <setPrescaler+0x58>
     4d4:	81 c0       	rjmp	.+258    	; 0x5d8 <setPrescaler+0x15a>
     4d6:	89 81       	ldd	r24, Y+1	; 0x01
     4d8:	9a 81       	ldd	r25, Y+2	; 0x02
     4da:	85 30       	cpi	r24, 0x05	; 5
     4dc:	91 05       	cpc	r25, r1
     4de:	0c f4       	brge	.+2      	; 0x4e2 <setPrescaler+0x64>
     4e0:	65 c0       	rjmp	.+202    	; 0x5ac <setPrescaler+0x12e>
     4e2:	29 81       	ldd	r18, Y+1	; 0x01
     4e4:	3a 81       	ldd	r19, Y+2	; 0x02
     4e6:	26 30       	cpi	r18, 0x06	; 6
     4e8:	31 05       	cpc	r19, r1
     4ea:	09 f4       	brne	.+2      	; 0x4ee <setPrescaler+0x70>
     4ec:	8b c0       	rjmp	.+278    	; 0x604 <setPrescaler+0x186>
     4ee:	89 81       	ldd	r24, Y+1	; 0x01
     4f0:	9a 81       	ldd	r25, Y+2	; 0x02
     4f2:	87 30       	cpi	r24, 0x07	; 7
     4f4:	91 05       	cpc	r25, r1
     4f6:	09 f4       	brne	.+2      	; 0x4fa <setPrescaler+0x7c>
     4f8:	9b c0       	rjmp	.+310    	; 0x630 <setPrescaler+0x1b2>
     4fa:	af c0       	rjmp	.+350    	; 0x65a <setPrescaler+0x1dc>
	{
	case NO_CLOCK:
		CLR_BIT(TCCR0_R, CS00_BIT);
     4fc:	a3 e5       	ldi	r26, 0x53	; 83
     4fe:	b0 e0       	ldi	r27, 0x00	; 0
     500:	e3 e5       	ldi	r30, 0x53	; 83
     502:	f0 e0       	ldi	r31, 0x00	; 0
     504:	80 81       	ld	r24, Z
     506:	8e 7f       	andi	r24, 0xFE	; 254
     508:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_R, CS01_BIT);
     50a:	a3 e5       	ldi	r26, 0x53	; 83
     50c:	b0 e0       	ldi	r27, 0x00	; 0
     50e:	e3 e5       	ldi	r30, 0x53	; 83
     510:	f0 e0       	ldi	r31, 0x00	; 0
     512:	80 81       	ld	r24, Z
     514:	8d 7f       	andi	r24, 0xFD	; 253
     516:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_R, CS02_BIT);
     518:	a3 e5       	ldi	r26, 0x53	; 83
     51a:	b0 e0       	ldi	r27, 0x00	; 0
     51c:	e3 e5       	ldi	r30, 0x53	; 83
     51e:	f0 e0       	ldi	r31, 0x00	; 0
     520:	80 81       	ld	r24, Z
     522:	8b 7f       	andi	r24, 0xFB	; 251
     524:	8c 93       	st	X, r24
     526:	99 c0       	rjmp	.+306    	; 0x65a <setPrescaler+0x1dc>
		break;
	case NO_PRESCALER:
		SET_BIT(TCCR0_R, CS00_BIT);
     528:	a3 e5       	ldi	r26, 0x53	; 83
     52a:	b0 e0       	ldi	r27, 0x00	; 0
     52c:	e3 e5       	ldi	r30, 0x53	; 83
     52e:	f0 e0       	ldi	r31, 0x00	; 0
     530:	80 81       	ld	r24, Z
     532:	81 60       	ori	r24, 0x01	; 1
     534:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_R, CS01_BIT);
     536:	a3 e5       	ldi	r26, 0x53	; 83
     538:	b0 e0       	ldi	r27, 0x00	; 0
     53a:	e3 e5       	ldi	r30, 0x53	; 83
     53c:	f0 e0       	ldi	r31, 0x00	; 0
     53e:	80 81       	ld	r24, Z
     540:	8d 7f       	andi	r24, 0xFD	; 253
     542:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_R, CS02_BIT);
     544:	a3 e5       	ldi	r26, 0x53	; 83
     546:	b0 e0       	ldi	r27, 0x00	; 0
     548:	e3 e5       	ldi	r30, 0x53	; 83
     54a:	f0 e0       	ldi	r31, 0x00	; 0
     54c:	80 81       	ld	r24, Z
     54e:	8b 7f       	andi	r24, 0xFB	; 251
     550:	8c 93       	st	X, r24
     552:	83 c0       	rjmp	.+262    	; 0x65a <setPrescaler+0x1dc>
		break;
	case PRESCALER_8:
		CLR_BIT(TCCR0_R, CS00_BIT);
     554:	a3 e5       	ldi	r26, 0x53	; 83
     556:	b0 e0       	ldi	r27, 0x00	; 0
     558:	e3 e5       	ldi	r30, 0x53	; 83
     55a:	f0 e0       	ldi	r31, 0x00	; 0
     55c:	80 81       	ld	r24, Z
     55e:	8e 7f       	andi	r24, 0xFE	; 254
     560:	8c 93       	st	X, r24
		SET_BIT(TCCR0_R, CS01_BIT);
     562:	a3 e5       	ldi	r26, 0x53	; 83
     564:	b0 e0       	ldi	r27, 0x00	; 0
     566:	e3 e5       	ldi	r30, 0x53	; 83
     568:	f0 e0       	ldi	r31, 0x00	; 0
     56a:	80 81       	ld	r24, Z
     56c:	82 60       	ori	r24, 0x02	; 2
     56e:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_R, CS02_BIT);
     570:	a3 e5       	ldi	r26, 0x53	; 83
     572:	b0 e0       	ldi	r27, 0x00	; 0
     574:	e3 e5       	ldi	r30, 0x53	; 83
     576:	f0 e0       	ldi	r31, 0x00	; 0
     578:	80 81       	ld	r24, Z
     57a:	8b 7f       	andi	r24, 0xFB	; 251
     57c:	8c 93       	st	X, r24
     57e:	6d c0       	rjmp	.+218    	; 0x65a <setPrescaler+0x1dc>
		break;
	case PRESCALER_64:
		SET_BIT(TCCR0_R, CS00_BIT);
     580:	a3 e5       	ldi	r26, 0x53	; 83
     582:	b0 e0       	ldi	r27, 0x00	; 0
     584:	e3 e5       	ldi	r30, 0x53	; 83
     586:	f0 e0       	ldi	r31, 0x00	; 0
     588:	80 81       	ld	r24, Z
     58a:	81 60       	ori	r24, 0x01	; 1
     58c:	8c 93       	st	X, r24
		SET_BIT(TCCR0_R, CS01_BIT);
     58e:	a3 e5       	ldi	r26, 0x53	; 83
     590:	b0 e0       	ldi	r27, 0x00	; 0
     592:	e3 e5       	ldi	r30, 0x53	; 83
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	80 81       	ld	r24, Z
     598:	82 60       	ori	r24, 0x02	; 2
     59a:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_R, CS02_BIT);
     59c:	a3 e5       	ldi	r26, 0x53	; 83
     59e:	b0 e0       	ldi	r27, 0x00	; 0
     5a0:	e3 e5       	ldi	r30, 0x53	; 83
     5a2:	f0 e0       	ldi	r31, 0x00	; 0
     5a4:	80 81       	ld	r24, Z
     5a6:	8b 7f       	andi	r24, 0xFB	; 251
     5a8:	8c 93       	st	X, r24
     5aa:	57 c0       	rjmp	.+174    	; 0x65a <setPrescaler+0x1dc>
		break;
	case PRESCALER_256:
		CLR_BIT(TCCR0_R, CS00_BIT);
     5ac:	a3 e5       	ldi	r26, 0x53	; 83
     5ae:	b0 e0       	ldi	r27, 0x00	; 0
     5b0:	e3 e5       	ldi	r30, 0x53	; 83
     5b2:	f0 e0       	ldi	r31, 0x00	; 0
     5b4:	80 81       	ld	r24, Z
     5b6:	8e 7f       	andi	r24, 0xFE	; 254
     5b8:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_R, CS01_BIT);
     5ba:	a3 e5       	ldi	r26, 0x53	; 83
     5bc:	b0 e0       	ldi	r27, 0x00	; 0
     5be:	e3 e5       	ldi	r30, 0x53	; 83
     5c0:	f0 e0       	ldi	r31, 0x00	; 0
     5c2:	80 81       	ld	r24, Z
     5c4:	8d 7f       	andi	r24, 0xFD	; 253
     5c6:	8c 93       	st	X, r24
		SET_BIT(TCCR0_R, CS02_BIT);
     5c8:	a3 e5       	ldi	r26, 0x53	; 83
     5ca:	b0 e0       	ldi	r27, 0x00	; 0
     5cc:	e3 e5       	ldi	r30, 0x53	; 83
     5ce:	f0 e0       	ldi	r31, 0x00	; 0
     5d0:	80 81       	ld	r24, Z
     5d2:	84 60       	ori	r24, 0x04	; 4
     5d4:	8c 93       	st	X, r24
     5d6:	41 c0       	rjmp	.+130    	; 0x65a <setPrescaler+0x1dc>
		break;
	case PRESCALER_1024:
		SET_BIT(TCCR0_R, CS00_BIT);
     5d8:	a3 e5       	ldi	r26, 0x53	; 83
     5da:	b0 e0       	ldi	r27, 0x00	; 0
     5dc:	e3 e5       	ldi	r30, 0x53	; 83
     5de:	f0 e0       	ldi	r31, 0x00	; 0
     5e0:	80 81       	ld	r24, Z
     5e2:	81 60       	ori	r24, 0x01	; 1
     5e4:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_R, CS01_BIT);
     5e6:	a3 e5       	ldi	r26, 0x53	; 83
     5e8:	b0 e0       	ldi	r27, 0x00	; 0
     5ea:	e3 e5       	ldi	r30, 0x53	; 83
     5ec:	f0 e0       	ldi	r31, 0x00	; 0
     5ee:	80 81       	ld	r24, Z
     5f0:	8d 7f       	andi	r24, 0xFD	; 253
     5f2:	8c 93       	st	X, r24
		SET_BIT(TCCR0_R, CS02_BIT);
     5f4:	a3 e5       	ldi	r26, 0x53	; 83
     5f6:	b0 e0       	ldi	r27, 0x00	; 0
     5f8:	e3 e5       	ldi	r30, 0x53	; 83
     5fa:	f0 e0       	ldi	r31, 0x00	; 0
     5fc:	80 81       	ld	r24, Z
     5fe:	84 60       	ori	r24, 0x04	; 4
     600:	8c 93       	st	X, r24
     602:	2b c0       	rjmp	.+86     	; 0x65a <setPrescaler+0x1dc>
		break;
	case EXTERNAL_CLOCK_FALL_EDGE:
		CLR_BIT(TCCR0_R, CS00_BIT);
     604:	a3 e5       	ldi	r26, 0x53	; 83
     606:	b0 e0       	ldi	r27, 0x00	; 0
     608:	e3 e5       	ldi	r30, 0x53	; 83
     60a:	f0 e0       	ldi	r31, 0x00	; 0
     60c:	80 81       	ld	r24, Z
     60e:	8e 7f       	andi	r24, 0xFE	; 254
     610:	8c 93       	st	X, r24
		SET_BIT(TCCR0_R, CS01_BIT);
     612:	a3 e5       	ldi	r26, 0x53	; 83
     614:	b0 e0       	ldi	r27, 0x00	; 0
     616:	e3 e5       	ldi	r30, 0x53	; 83
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	80 81       	ld	r24, Z
     61c:	82 60       	ori	r24, 0x02	; 2
     61e:	8c 93       	st	X, r24
		SET_BIT(TCCR0_R, CS02_BIT);
     620:	a3 e5       	ldi	r26, 0x53	; 83
     622:	b0 e0       	ldi	r27, 0x00	; 0
     624:	e3 e5       	ldi	r30, 0x53	; 83
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	80 81       	ld	r24, Z
     62a:	84 60       	ori	r24, 0x04	; 4
     62c:	8c 93       	st	X, r24
     62e:	15 c0       	rjmp	.+42     	; 0x65a <setPrescaler+0x1dc>
		break;
	case EXTERNAL_CLOCK_RISE_EDGE:
		SET_BIT(TCCR0_R, CS00_BIT);
     630:	a3 e5       	ldi	r26, 0x53	; 83
     632:	b0 e0       	ldi	r27, 0x00	; 0
     634:	e3 e5       	ldi	r30, 0x53	; 83
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	80 81       	ld	r24, Z
     63a:	81 60       	ori	r24, 0x01	; 1
     63c:	8c 93       	st	X, r24
		SET_BIT(TCCR0_R, CS01_BIT);
     63e:	a3 e5       	ldi	r26, 0x53	; 83
     640:	b0 e0       	ldi	r27, 0x00	; 0
     642:	e3 e5       	ldi	r30, 0x53	; 83
     644:	f0 e0       	ldi	r31, 0x00	; 0
     646:	80 81       	ld	r24, Z
     648:	82 60       	ori	r24, 0x02	; 2
     64a:	8c 93       	st	X, r24
		SET_BIT(TCCR0_R, CS02_BIT);
     64c:	a3 e5       	ldi	r26, 0x53	; 83
     64e:	b0 e0       	ldi	r27, 0x00	; 0
     650:	e3 e5       	ldi	r30, 0x53	; 83
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	80 81       	ld	r24, Z
     656:	84 60       	ori	r24, 0x04	; 4
     658:	8c 93       	st	X, r24
		break;
	default:
		break;
	}//end switch for prescaler
}//end setPrescaler
     65a:	0f 90       	pop	r0
     65c:	0f 90       	pop	r0
     65e:	cf 91       	pop	r28
     660:	df 91       	pop	r29
     662:	08 95       	ret

00000664 <PWM_Start>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to start generating PWM wave
*************************************************************************************************/
enuErrorStatus_t PWM_Start(uint8_t u8_Duty)
{
     664:	df 93       	push	r29
     666:	cf 93       	push	r28
     668:	00 d0       	rcall	.+0      	; 0x66a <PWM_Start+0x6>
     66a:	0f 92       	push	r0
     66c:	cd b7       	in	r28, 0x3d	; 61
     66e:	de b7       	in	r29, 0x3e	; 62
     670:	89 83       	std	Y+1, r24	; 0x01
	switch(strpwmConfig.enuOCMode)
     672:	80 91 bc 00 	lds	r24, 0x00BC
     676:	28 2f       	mov	r18, r24
     678:	30 e0       	ldi	r19, 0x00	; 0
     67a:	3b 83       	std	Y+3, r19	; 0x03
     67c:	2a 83       	std	Y+2, r18	; 0x02
     67e:	8a 81       	ldd	r24, Y+2	; 0x02
     680:	9b 81       	ldd	r25, Y+3	; 0x03
     682:	00 97       	sbiw	r24, 0x00	; 0
     684:	31 f0       	breq	.+12     	; 0x692 <PWM_Start+0x2e>
     686:	2a 81       	ldd	r18, Y+2	; 0x02
     688:	3b 81       	ldd	r19, Y+3	; 0x03
     68a:	21 30       	cpi	r18, 0x01	; 1
     68c:	31 05       	cpc	r19, r1
     68e:	e1 f0       	breq	.+56     	; 0x6c8 <PWM_Start+0x64>
     690:	2a c0       	rjmp	.+84     	; 0x6e6 <PWM_Start+0x82>
    {
    case NON_INVERTING:
        OCR0_R = ((u8_Duty *255)/100);
     692:	ec e5       	ldi	r30, 0x5C	; 92
     694:	f0 e0       	ldi	r31, 0x00	; 0
     696:	89 81       	ldd	r24, Y+1	; 0x01
     698:	48 2f       	mov	r20, r24
     69a:	50 e0       	ldi	r21, 0x00	; 0
     69c:	ca 01       	movw	r24, r20
     69e:	9c 01       	movw	r18, r24
     6a0:	22 0f       	add	r18, r18
     6a2:	33 1f       	adc	r19, r19
     6a4:	c9 01       	movw	r24, r18
     6a6:	96 95       	lsr	r25
     6a8:	98 2f       	mov	r25, r24
     6aa:	88 27       	eor	r24, r24
     6ac:	97 95       	ror	r25
     6ae:	87 95       	ror	r24
     6b0:	82 1b       	sub	r24, r18
     6b2:	93 0b       	sbc	r25, r19
     6b4:	84 0f       	add	r24, r20
     6b6:	95 1f       	adc	r25, r21
     6b8:	24 e6       	ldi	r18, 0x64	; 100
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	b9 01       	movw	r22, r18
     6be:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__divmodhi4>
     6c2:	cb 01       	movw	r24, r22
     6c4:	80 83       	st	Z, r24
     6c6:	0f c0       	rjmp	.+30     	; 0x6e6 <PWM_Start+0x82>
        break;
    case INVERTING:
        OCR0_R = 255 - ((256 * u8_Duty)/100);
     6c8:	ec e5       	ldi	r30, 0x5C	; 92
     6ca:	f0 e0       	ldi	r31, 0x00	; 0
     6cc:	89 81       	ldd	r24, Y+1	; 0x01
     6ce:	88 2f       	mov	r24, r24
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	98 2f       	mov	r25, r24
     6d4:	88 27       	eor	r24, r24
     6d6:	24 e6       	ldi	r18, 0x64	; 100
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	b9 01       	movw	r22, r18
     6dc:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__divmodhi4>
     6e0:	cb 01       	movw	r24, r22
     6e2:	80 95       	com	r24
     6e4:	80 83       	st	Z, r24
    break;
    }
    setPrescaler();
     6e6:	0e 94 3f 02 	call	0x47e	; 0x47e <setPrescaler>
	return E_OK;
     6ea:	81 e0       	ldi	r24, 0x01	; 1
}//end PWM_Start
     6ec:	0f 90       	pop	r0
     6ee:	0f 90       	pop	r0
     6f0:	0f 90       	pop	r0
     6f2:	cf 91       	pop	r28
     6f4:	df 91       	pop	r29
     6f6:	08 95       	ret

000006f8 <PWM_Stop>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A stop generating PWM wave
*************************************************************************************************/
enuErrorStatus_t PWM_Stop(void)
{
     6f8:	df 93       	push	r29
     6fa:	cf 93       	push	r28
     6fc:	cd b7       	in	r28, 0x3d	; 61
     6fe:	de b7       	in	r29, 0x3e	; 62
//	CLR_BIT(TCCR0_R, CS00_BIT);
//	CLR_BIT(TCCR0_R, CS01_BIT);
//	CLR_BIT(TCCR0_R, CS02_BIT);
	CLR_BIT(TCCR0_R, COM00_BIT);
     700:	a3 e5       	ldi	r26, 0x53	; 83
     702:	b0 e0       	ldi	r27, 0x00	; 0
     704:	e3 e5       	ldi	r30, 0x53	; 83
     706:	f0 e0       	ldi	r31, 0x00	; 0
     708:	80 81       	ld	r24, Z
     70a:	8f 7e       	andi	r24, 0xEF	; 239
     70c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_R, COM01_BIT);
     70e:	a3 e5       	ldi	r26, 0x53	; 83
     710:	b0 e0       	ldi	r27, 0x00	; 0
     712:	e3 e5       	ldi	r30, 0x53	; 83
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	80 81       	ld	r24, Z
     718:	8f 7d       	andi	r24, 0xDF	; 223
     71a:	8c 93       	st	X, r24
	return E_OK;
     71c:	81 e0       	ldi	r24, 0x01	; 1
}//end PWM_Stop
     71e:	cf 91       	pop	r28
     720:	df 91       	pop	r29
     722:	08 95       	ret

00000724 <DIO_Init>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to initialize all the DIO groups according to the configuration
*************************************************************************************************/
enuErrorStatus_t DIO_Init(void)
{
     724:	df 93       	push	r29
     726:	cf 93       	push	r28
     728:	0f 92       	push	r0
     72a:	cd b7       	in	r28, 0x3d	; 61
     72c:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_i;

	for(u8_i=0; u8_i<DIO_GROUPS_NO; u8_i++)
     72e:	19 82       	std	Y+1, r1	; 0x01
     730:	02 c4       	rjmp	.+2052   	; 0xf36 <__stack+0x6d7>
	{
		//set the pin direction (input, output)
		if(astrDIOConfigParameters[u8_i].enuPinDir == INPUT)
     732:	89 81       	ldd	r24, Y+1	; 0x01
     734:	28 2f       	mov	r18, r24
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	c9 01       	movw	r24, r18
     73a:	88 0f       	add	r24, r24
     73c:	99 1f       	adc	r25, r25
     73e:	82 0f       	add	r24, r18
     740:	93 1f       	adc	r25, r19
     742:	fc 01       	movw	r30, r24
     744:	e2 54       	subi	r30, 0x42	; 66
     746:	ff 4f       	sbci	r31, 0xFF	; 255
     748:	80 81       	ld	r24, Z
     74a:	88 23       	and	r24, r24
     74c:	09 f0       	breq	.+2      	; 0x750 <DIO_Init+0x2c>
     74e:	ed c0       	rjmp	.+474    	; 0x92a <__stack+0xcb>
		{
			//if PORTA
			if((astrDIOConfigParameters[u8_i].enuPinNo >= 0) && (astrDIOConfigParameters[u8_i].enuPinNo < 8))
     750:	89 81       	ldd	r24, Y+1	; 0x01
     752:	28 2f       	mov	r18, r24
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	c9 01       	movw	r24, r18
     758:	88 0f       	add	r24, r24
     75a:	99 1f       	adc	r25, r25
     75c:	82 0f       	add	r24, r18
     75e:	93 1f       	adc	r25, r19
     760:	fc 01       	movw	r30, r24
     762:	e3 54       	subi	r30, 0x43	; 67
     764:	ff 4f       	sbci	r31, 0xFF	; 255
     766:	80 81       	ld	r24, Z
     768:	88 30       	cpi	r24, 0x08	; 8
     76a:	00 f5       	brcc	.+64     	; 0x7ac <DIO_Init+0x88>
			{
				CLR_BIT(DDRA_R, astrDIOConfigParameters[u8_i].enuPinNo);
     76c:	aa e3       	ldi	r26, 0x3A	; 58
     76e:	b0 e0       	ldi	r27, 0x00	; 0
     770:	ea e3       	ldi	r30, 0x3A	; 58
     772:	f0 e0       	ldi	r31, 0x00	; 0
     774:	80 81       	ld	r24, Z
     776:	48 2f       	mov	r20, r24
     778:	89 81       	ldd	r24, Y+1	; 0x01
     77a:	28 2f       	mov	r18, r24
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	c9 01       	movw	r24, r18
     780:	88 0f       	add	r24, r24
     782:	99 1f       	adc	r25, r25
     784:	82 0f       	add	r24, r18
     786:	93 1f       	adc	r25, r19
     788:	fc 01       	movw	r30, r24
     78a:	e3 54       	subi	r30, 0x43	; 67
     78c:	ff 4f       	sbci	r31, 0xFF	; 255
     78e:	80 81       	ld	r24, Z
     790:	28 2f       	mov	r18, r24
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	02 2e       	mov	r0, r18
     79a:	02 c0       	rjmp	.+4      	; 0x7a0 <DIO_Init+0x7c>
     79c:	88 0f       	add	r24, r24
     79e:	99 1f       	adc	r25, r25
     7a0:	0a 94       	dec	r0
     7a2:	e2 f7       	brpl	.-8      	; 0x79c <DIO_Init+0x78>
     7a4:	80 95       	com	r24
     7a6:	84 23       	and	r24, r20
     7a8:	8c 93       	st	X, r24
     7aa:	b3 c1       	rjmp	.+870    	; 0xb12 <__stack+0x2b3>
			}//end if

			//if PORTB
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 8) && (astrDIOConfigParameters[u8_i].enuPinNo < 16))
     7ac:	89 81       	ldd	r24, Y+1	; 0x01
     7ae:	28 2f       	mov	r18, r24
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	c9 01       	movw	r24, r18
     7b4:	88 0f       	add	r24, r24
     7b6:	99 1f       	adc	r25, r25
     7b8:	82 0f       	add	r24, r18
     7ba:	93 1f       	adc	r25, r19
     7bc:	fc 01       	movw	r30, r24
     7be:	e3 54       	subi	r30, 0x43	; 67
     7c0:	ff 4f       	sbci	r31, 0xFF	; 255
     7c2:	80 81       	ld	r24, Z
     7c4:	88 30       	cpi	r24, 0x08	; 8
     7c6:	88 f1       	brcs	.+98     	; 0x82a <DIO_Init+0x106>
     7c8:	89 81       	ldd	r24, Y+1	; 0x01
     7ca:	28 2f       	mov	r18, r24
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	c9 01       	movw	r24, r18
     7d0:	88 0f       	add	r24, r24
     7d2:	99 1f       	adc	r25, r25
     7d4:	82 0f       	add	r24, r18
     7d6:	93 1f       	adc	r25, r19
     7d8:	fc 01       	movw	r30, r24
     7da:	e3 54       	subi	r30, 0x43	; 67
     7dc:	ff 4f       	sbci	r31, 0xFF	; 255
     7de:	80 81       	ld	r24, Z
     7e0:	80 31       	cpi	r24, 0x10	; 16
     7e2:	18 f5       	brcc	.+70     	; 0x82a <DIO_Init+0x106>
			{
				CLR_BIT(DDRB_R,(astrDIOConfigParameters[u8_i].enuPinNo - 8));
     7e4:	a7 e3       	ldi	r26, 0x37	; 55
     7e6:	b0 e0       	ldi	r27, 0x00	; 0
     7e8:	e7 e3       	ldi	r30, 0x37	; 55
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	80 81       	ld	r24, Z
     7ee:	48 2f       	mov	r20, r24
     7f0:	89 81       	ldd	r24, Y+1	; 0x01
     7f2:	28 2f       	mov	r18, r24
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	c9 01       	movw	r24, r18
     7f8:	88 0f       	add	r24, r24
     7fa:	99 1f       	adc	r25, r25
     7fc:	82 0f       	add	r24, r18
     7fe:	93 1f       	adc	r25, r19
     800:	fc 01       	movw	r30, r24
     802:	e3 54       	subi	r30, 0x43	; 67
     804:	ff 4f       	sbci	r31, 0xFF	; 255
     806:	80 81       	ld	r24, Z
     808:	88 2f       	mov	r24, r24
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	9c 01       	movw	r18, r24
     80e:	28 50       	subi	r18, 0x08	; 8
     810:	30 40       	sbci	r19, 0x00	; 0
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	02 2e       	mov	r0, r18
     818:	02 c0       	rjmp	.+4      	; 0x81e <DIO_Init+0xfa>
     81a:	88 0f       	add	r24, r24
     81c:	99 1f       	adc	r25, r25
     81e:	0a 94       	dec	r0
     820:	e2 f7       	brpl	.-8      	; 0x81a <DIO_Init+0xf6>
     822:	80 95       	com	r24
     824:	84 23       	and	r24, r20
     826:	8c 93       	st	X, r24
     828:	74 c1       	rjmp	.+744    	; 0xb12 <__stack+0x2b3>
			}//end else if

			//if PORTC
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 16) && (astrDIOConfigParameters[u8_i].enuPinNo < 24))
     82a:	89 81       	ldd	r24, Y+1	; 0x01
     82c:	28 2f       	mov	r18, r24
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	c9 01       	movw	r24, r18
     832:	88 0f       	add	r24, r24
     834:	99 1f       	adc	r25, r25
     836:	82 0f       	add	r24, r18
     838:	93 1f       	adc	r25, r19
     83a:	fc 01       	movw	r30, r24
     83c:	e3 54       	subi	r30, 0x43	; 67
     83e:	ff 4f       	sbci	r31, 0xFF	; 255
     840:	80 81       	ld	r24, Z
     842:	80 31       	cpi	r24, 0x10	; 16
     844:	88 f1       	brcs	.+98     	; 0x8a8 <__stack+0x49>
     846:	89 81       	ldd	r24, Y+1	; 0x01
     848:	28 2f       	mov	r18, r24
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	c9 01       	movw	r24, r18
     84e:	88 0f       	add	r24, r24
     850:	99 1f       	adc	r25, r25
     852:	82 0f       	add	r24, r18
     854:	93 1f       	adc	r25, r19
     856:	fc 01       	movw	r30, r24
     858:	e3 54       	subi	r30, 0x43	; 67
     85a:	ff 4f       	sbci	r31, 0xFF	; 255
     85c:	80 81       	ld	r24, Z
     85e:	88 31       	cpi	r24, 0x18	; 24
     860:	18 f5       	brcc	.+70     	; 0x8a8 <__stack+0x49>
			{
				CLR_BIT(DDRC_R,(astrDIOConfigParameters[u8_i].enuPinNo - 16));
     862:	a4 e3       	ldi	r26, 0x34	; 52
     864:	b0 e0       	ldi	r27, 0x00	; 0
     866:	e4 e3       	ldi	r30, 0x34	; 52
     868:	f0 e0       	ldi	r31, 0x00	; 0
     86a:	80 81       	ld	r24, Z
     86c:	48 2f       	mov	r20, r24
     86e:	89 81       	ldd	r24, Y+1	; 0x01
     870:	28 2f       	mov	r18, r24
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	c9 01       	movw	r24, r18
     876:	88 0f       	add	r24, r24
     878:	99 1f       	adc	r25, r25
     87a:	82 0f       	add	r24, r18
     87c:	93 1f       	adc	r25, r19
     87e:	fc 01       	movw	r30, r24
     880:	e3 54       	subi	r30, 0x43	; 67
     882:	ff 4f       	sbci	r31, 0xFF	; 255
     884:	80 81       	ld	r24, Z
     886:	88 2f       	mov	r24, r24
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	9c 01       	movw	r18, r24
     88c:	20 51       	subi	r18, 0x10	; 16
     88e:	30 40       	sbci	r19, 0x00	; 0
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	02 2e       	mov	r0, r18
     896:	02 c0       	rjmp	.+4      	; 0x89c <__stack+0x3d>
     898:	88 0f       	add	r24, r24
     89a:	99 1f       	adc	r25, r25
     89c:	0a 94       	dec	r0
     89e:	e2 f7       	brpl	.-8      	; 0x898 <__stack+0x39>
     8a0:	80 95       	com	r24
     8a2:	84 23       	and	r24, r20
     8a4:	8c 93       	st	X, r24
     8a6:	35 c1       	rjmp	.+618    	; 0xb12 <__stack+0x2b3>
			}//end else if

			//if PORTD
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 24) && (astrDIOConfigParameters[u8_i].enuPinNo < 32))
     8a8:	89 81       	ldd	r24, Y+1	; 0x01
     8aa:	28 2f       	mov	r18, r24
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	c9 01       	movw	r24, r18
     8b0:	88 0f       	add	r24, r24
     8b2:	99 1f       	adc	r25, r25
     8b4:	82 0f       	add	r24, r18
     8b6:	93 1f       	adc	r25, r19
     8b8:	fc 01       	movw	r30, r24
     8ba:	e3 54       	subi	r30, 0x43	; 67
     8bc:	ff 4f       	sbci	r31, 0xFF	; 255
     8be:	80 81       	ld	r24, Z
     8c0:	88 31       	cpi	r24, 0x18	; 24
     8c2:	08 f4       	brcc	.+2      	; 0x8c6 <__stack+0x67>
     8c4:	26 c1       	rjmp	.+588    	; 0xb12 <__stack+0x2b3>
     8c6:	89 81       	ldd	r24, Y+1	; 0x01
     8c8:	28 2f       	mov	r18, r24
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	c9 01       	movw	r24, r18
     8ce:	88 0f       	add	r24, r24
     8d0:	99 1f       	adc	r25, r25
     8d2:	82 0f       	add	r24, r18
     8d4:	93 1f       	adc	r25, r19
     8d6:	fc 01       	movw	r30, r24
     8d8:	e3 54       	subi	r30, 0x43	; 67
     8da:	ff 4f       	sbci	r31, 0xFF	; 255
     8dc:	80 81       	ld	r24, Z
     8de:	80 32       	cpi	r24, 0x20	; 32
     8e0:	08 f0       	brcs	.+2      	; 0x8e4 <__stack+0x85>
     8e2:	17 c1       	rjmp	.+558    	; 0xb12 <__stack+0x2b3>
			{
				CLR_BIT(DDRD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
     8e4:	a1 e3       	ldi	r26, 0x31	; 49
     8e6:	b0 e0       	ldi	r27, 0x00	; 0
     8e8:	e1 e3       	ldi	r30, 0x31	; 49
     8ea:	f0 e0       	ldi	r31, 0x00	; 0
     8ec:	80 81       	ld	r24, Z
     8ee:	48 2f       	mov	r20, r24
     8f0:	89 81       	ldd	r24, Y+1	; 0x01
     8f2:	28 2f       	mov	r18, r24
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	c9 01       	movw	r24, r18
     8f8:	88 0f       	add	r24, r24
     8fa:	99 1f       	adc	r25, r25
     8fc:	82 0f       	add	r24, r18
     8fe:	93 1f       	adc	r25, r19
     900:	fc 01       	movw	r30, r24
     902:	e3 54       	subi	r30, 0x43	; 67
     904:	ff 4f       	sbci	r31, 0xFF	; 255
     906:	80 81       	ld	r24, Z
     908:	88 2f       	mov	r24, r24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	9c 01       	movw	r18, r24
     90e:	28 51       	subi	r18, 0x18	; 24
     910:	30 40       	sbci	r19, 0x00	; 0
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	02 2e       	mov	r0, r18
     918:	02 c0       	rjmp	.+4      	; 0x91e <__stack+0xbf>
     91a:	88 0f       	add	r24, r24
     91c:	99 1f       	adc	r25, r25
     91e:	0a 94       	dec	r0
     920:	e2 f7       	brpl	.-8      	; 0x91a <__stack+0xbb>
     922:	80 95       	com	r24
     924:	84 23       	and	r24, r20
     926:	8c 93       	st	X, r24
     928:	f4 c0       	rjmp	.+488    	; 0xb12 <__stack+0x2b3>
			}//end else if
		}//end if

		else if(astrDIOConfigParameters[u8_i].enuPinDir == OUTPUT)
     92a:	89 81       	ldd	r24, Y+1	; 0x01
     92c:	28 2f       	mov	r18, r24
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	c9 01       	movw	r24, r18
     932:	88 0f       	add	r24, r24
     934:	99 1f       	adc	r25, r25
     936:	82 0f       	add	r24, r18
     938:	93 1f       	adc	r25, r19
     93a:	fc 01       	movw	r30, r24
     93c:	e2 54       	subi	r30, 0x42	; 66
     93e:	ff 4f       	sbci	r31, 0xFF	; 255
     940:	80 81       	ld	r24, Z
     942:	81 30       	cpi	r24, 0x01	; 1
     944:	09 f0       	breq	.+2      	; 0x948 <__stack+0xe9>
     946:	e5 c0       	rjmp	.+458    	; 0xb12 <__stack+0x2b3>
		{
			if((astrDIOConfigParameters[u8_i].enuPinNo >= 0) && (astrDIOConfigParameters[u8_i].enuPinNo < 8))	//if porta
     948:	89 81       	ldd	r24, Y+1	; 0x01
     94a:	28 2f       	mov	r18, r24
     94c:	30 e0       	ldi	r19, 0x00	; 0
     94e:	c9 01       	movw	r24, r18
     950:	88 0f       	add	r24, r24
     952:	99 1f       	adc	r25, r25
     954:	82 0f       	add	r24, r18
     956:	93 1f       	adc	r25, r19
     958:	fc 01       	movw	r30, r24
     95a:	e3 54       	subi	r30, 0x43	; 67
     95c:	ff 4f       	sbci	r31, 0xFF	; 255
     95e:	80 81       	ld	r24, Z
     960:	88 30       	cpi	r24, 0x08	; 8
     962:	f8 f4       	brcc	.+62     	; 0x9a2 <__stack+0x143>
			{
				SET_BIT(DDRA_R, astrDIOConfigParameters[u8_i].enuPinNo);
     964:	aa e3       	ldi	r26, 0x3A	; 58
     966:	b0 e0       	ldi	r27, 0x00	; 0
     968:	ea e3       	ldi	r30, 0x3A	; 58
     96a:	f0 e0       	ldi	r31, 0x00	; 0
     96c:	80 81       	ld	r24, Z
     96e:	48 2f       	mov	r20, r24
     970:	89 81       	ldd	r24, Y+1	; 0x01
     972:	28 2f       	mov	r18, r24
     974:	30 e0       	ldi	r19, 0x00	; 0
     976:	c9 01       	movw	r24, r18
     978:	88 0f       	add	r24, r24
     97a:	99 1f       	adc	r25, r25
     97c:	82 0f       	add	r24, r18
     97e:	93 1f       	adc	r25, r19
     980:	fc 01       	movw	r30, r24
     982:	e3 54       	subi	r30, 0x43	; 67
     984:	ff 4f       	sbci	r31, 0xFF	; 255
     986:	80 81       	ld	r24, Z
     988:	28 2f       	mov	r18, r24
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	02 2e       	mov	r0, r18
     992:	02 c0       	rjmp	.+4      	; 0x998 <__stack+0x139>
     994:	88 0f       	add	r24, r24
     996:	99 1f       	adc	r25, r25
     998:	0a 94       	dec	r0
     99a:	e2 f7       	brpl	.-8      	; 0x994 <__stack+0x135>
     99c:	84 2b       	or	r24, r20
     99e:	8c 93       	st	X, r24
     9a0:	b8 c0       	rjmp	.+368    	; 0xb12 <__stack+0x2b3>
			}//end if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 8) && (astrDIOConfigParameters[u8_i].enuPinNo < 16))	//if portb
     9a2:	89 81       	ldd	r24, Y+1	; 0x01
     9a4:	28 2f       	mov	r18, r24
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	c9 01       	movw	r24, r18
     9aa:	88 0f       	add	r24, r24
     9ac:	99 1f       	adc	r25, r25
     9ae:	82 0f       	add	r24, r18
     9b0:	93 1f       	adc	r25, r19
     9b2:	fc 01       	movw	r30, r24
     9b4:	e3 54       	subi	r30, 0x43	; 67
     9b6:	ff 4f       	sbci	r31, 0xFF	; 255
     9b8:	80 81       	ld	r24, Z
     9ba:	88 30       	cpi	r24, 0x08	; 8
     9bc:	80 f1       	brcs	.+96     	; 0xa1e <__stack+0x1bf>
     9be:	89 81       	ldd	r24, Y+1	; 0x01
     9c0:	28 2f       	mov	r18, r24
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	c9 01       	movw	r24, r18
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	82 0f       	add	r24, r18
     9cc:	93 1f       	adc	r25, r19
     9ce:	fc 01       	movw	r30, r24
     9d0:	e3 54       	subi	r30, 0x43	; 67
     9d2:	ff 4f       	sbci	r31, 0xFF	; 255
     9d4:	80 81       	ld	r24, Z
     9d6:	80 31       	cpi	r24, 0x10	; 16
     9d8:	10 f5       	brcc	.+68     	; 0xa1e <__stack+0x1bf>
			{
				SET_BIT(DDRB_R,(astrDIOConfigParameters[u8_i].enuPinNo - 8));
     9da:	a7 e3       	ldi	r26, 0x37	; 55
     9dc:	b0 e0       	ldi	r27, 0x00	; 0
     9de:	e7 e3       	ldi	r30, 0x37	; 55
     9e0:	f0 e0       	ldi	r31, 0x00	; 0
     9e2:	80 81       	ld	r24, Z
     9e4:	48 2f       	mov	r20, r24
     9e6:	89 81       	ldd	r24, Y+1	; 0x01
     9e8:	28 2f       	mov	r18, r24
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	c9 01       	movw	r24, r18
     9ee:	88 0f       	add	r24, r24
     9f0:	99 1f       	adc	r25, r25
     9f2:	82 0f       	add	r24, r18
     9f4:	93 1f       	adc	r25, r19
     9f6:	fc 01       	movw	r30, r24
     9f8:	e3 54       	subi	r30, 0x43	; 67
     9fa:	ff 4f       	sbci	r31, 0xFF	; 255
     9fc:	80 81       	ld	r24, Z
     9fe:	88 2f       	mov	r24, r24
     a00:	90 e0       	ldi	r25, 0x00	; 0
     a02:	9c 01       	movw	r18, r24
     a04:	28 50       	subi	r18, 0x08	; 8
     a06:	30 40       	sbci	r19, 0x00	; 0
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	02 2e       	mov	r0, r18
     a0e:	02 c0       	rjmp	.+4      	; 0xa14 <__stack+0x1b5>
     a10:	88 0f       	add	r24, r24
     a12:	99 1f       	adc	r25, r25
     a14:	0a 94       	dec	r0
     a16:	e2 f7       	brpl	.-8      	; 0xa10 <__stack+0x1b1>
     a18:	84 2b       	or	r24, r20
     a1a:	8c 93       	st	X, r24
     a1c:	7a c0       	rjmp	.+244    	; 0xb12 <__stack+0x2b3>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 16) && (astrDIOConfigParameters[u8_i].enuPinNo < 24))	//if portc
     a1e:	89 81       	ldd	r24, Y+1	; 0x01
     a20:	28 2f       	mov	r18, r24
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	c9 01       	movw	r24, r18
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	82 0f       	add	r24, r18
     a2c:	93 1f       	adc	r25, r19
     a2e:	fc 01       	movw	r30, r24
     a30:	e3 54       	subi	r30, 0x43	; 67
     a32:	ff 4f       	sbci	r31, 0xFF	; 255
     a34:	80 81       	ld	r24, Z
     a36:	80 31       	cpi	r24, 0x10	; 16
     a38:	80 f1       	brcs	.+96     	; 0xa9a <__stack+0x23b>
     a3a:	89 81       	ldd	r24, Y+1	; 0x01
     a3c:	28 2f       	mov	r18, r24
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	c9 01       	movw	r24, r18
     a42:	88 0f       	add	r24, r24
     a44:	99 1f       	adc	r25, r25
     a46:	82 0f       	add	r24, r18
     a48:	93 1f       	adc	r25, r19
     a4a:	fc 01       	movw	r30, r24
     a4c:	e3 54       	subi	r30, 0x43	; 67
     a4e:	ff 4f       	sbci	r31, 0xFF	; 255
     a50:	80 81       	ld	r24, Z
     a52:	88 31       	cpi	r24, 0x18	; 24
     a54:	10 f5       	brcc	.+68     	; 0xa9a <__stack+0x23b>
			{
				SET_BIT(DDRC_R,(astrDIOConfigParameters[u8_i].enuPinNo - 16));
     a56:	a4 e3       	ldi	r26, 0x34	; 52
     a58:	b0 e0       	ldi	r27, 0x00	; 0
     a5a:	e4 e3       	ldi	r30, 0x34	; 52
     a5c:	f0 e0       	ldi	r31, 0x00	; 0
     a5e:	80 81       	ld	r24, Z
     a60:	48 2f       	mov	r20, r24
     a62:	89 81       	ldd	r24, Y+1	; 0x01
     a64:	28 2f       	mov	r18, r24
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	c9 01       	movw	r24, r18
     a6a:	88 0f       	add	r24, r24
     a6c:	99 1f       	adc	r25, r25
     a6e:	82 0f       	add	r24, r18
     a70:	93 1f       	adc	r25, r19
     a72:	fc 01       	movw	r30, r24
     a74:	e3 54       	subi	r30, 0x43	; 67
     a76:	ff 4f       	sbci	r31, 0xFF	; 255
     a78:	80 81       	ld	r24, Z
     a7a:	88 2f       	mov	r24, r24
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	9c 01       	movw	r18, r24
     a80:	20 51       	subi	r18, 0x10	; 16
     a82:	30 40       	sbci	r19, 0x00	; 0
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	02 2e       	mov	r0, r18
     a8a:	02 c0       	rjmp	.+4      	; 0xa90 <__stack+0x231>
     a8c:	88 0f       	add	r24, r24
     a8e:	99 1f       	adc	r25, r25
     a90:	0a 94       	dec	r0
     a92:	e2 f7       	brpl	.-8      	; 0xa8c <__stack+0x22d>
     a94:	84 2b       	or	r24, r20
     a96:	8c 93       	st	X, r24
     a98:	3c c0       	rjmp	.+120    	; 0xb12 <__stack+0x2b3>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 24) && (astrDIOConfigParameters[u8_i].enuPinNo < 32))	//if portd
     a9a:	89 81       	ldd	r24, Y+1	; 0x01
     a9c:	28 2f       	mov	r18, r24
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	c9 01       	movw	r24, r18
     aa2:	88 0f       	add	r24, r24
     aa4:	99 1f       	adc	r25, r25
     aa6:	82 0f       	add	r24, r18
     aa8:	93 1f       	adc	r25, r19
     aaa:	fc 01       	movw	r30, r24
     aac:	e3 54       	subi	r30, 0x43	; 67
     aae:	ff 4f       	sbci	r31, 0xFF	; 255
     ab0:	80 81       	ld	r24, Z
     ab2:	88 31       	cpi	r24, 0x18	; 24
     ab4:	70 f1       	brcs	.+92     	; 0xb12 <__stack+0x2b3>
     ab6:	89 81       	ldd	r24, Y+1	; 0x01
     ab8:	28 2f       	mov	r18, r24
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	c9 01       	movw	r24, r18
     abe:	88 0f       	add	r24, r24
     ac0:	99 1f       	adc	r25, r25
     ac2:	82 0f       	add	r24, r18
     ac4:	93 1f       	adc	r25, r19
     ac6:	fc 01       	movw	r30, r24
     ac8:	e3 54       	subi	r30, 0x43	; 67
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	80 32       	cpi	r24, 0x20	; 32
     ad0:	00 f5       	brcc	.+64     	; 0xb12 <__stack+0x2b3>
			{
				SET_BIT(DDRD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
     ad2:	a1 e3       	ldi	r26, 0x31	; 49
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e1 e3       	ldi	r30, 0x31	; 49
     ad8:	f0 e0       	ldi	r31, 0x00	; 0
     ada:	80 81       	ld	r24, Z
     adc:	48 2f       	mov	r20, r24
     ade:	89 81       	ldd	r24, Y+1	; 0x01
     ae0:	28 2f       	mov	r18, r24
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	c9 01       	movw	r24, r18
     ae6:	88 0f       	add	r24, r24
     ae8:	99 1f       	adc	r25, r25
     aea:	82 0f       	add	r24, r18
     aec:	93 1f       	adc	r25, r19
     aee:	fc 01       	movw	r30, r24
     af0:	e3 54       	subi	r30, 0x43	; 67
     af2:	ff 4f       	sbci	r31, 0xFF	; 255
     af4:	80 81       	ld	r24, Z
     af6:	88 2f       	mov	r24, r24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	9c 01       	movw	r18, r24
     afc:	28 51       	subi	r18, 0x18	; 24
     afe:	30 40       	sbci	r19, 0x00	; 0
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	02 c0       	rjmp	.+4      	; 0xb0a <__stack+0x2ab>
     b06:	88 0f       	add	r24, r24
     b08:	99 1f       	adc	r25, r25
     b0a:	2a 95       	dec	r18
     b0c:	e2 f7       	brpl	.-8      	; 0xb06 <__stack+0x2a7>
     b0e:	84 2b       	or	r24, r20
     b10:	8c 93       	st	X, r24
			}//end else if
		}//end else if

		//enable or disable pull-up resistor
		if(astrDIOConfigParameters[u8_i].enuPinDir == INPUT &&
     b12:	89 81       	ldd	r24, Y+1	; 0x01
     b14:	28 2f       	mov	r18, r24
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	c9 01       	movw	r24, r18
     b1a:	88 0f       	add	r24, r24
     b1c:	99 1f       	adc	r25, r25
     b1e:	82 0f       	add	r24, r18
     b20:	93 1f       	adc	r25, r19
     b22:	fc 01       	movw	r30, r24
     b24:	e2 54       	subi	r30, 0x42	; 66
     b26:	ff 4f       	sbci	r31, 0xFF	; 255
     b28:	80 81       	ld	r24, Z
     b2a:	88 23       	and	r24, r24
     b2c:	09 f0       	breq	.+2      	; 0xb30 <__stack+0x2d1>
     b2e:	fc c0       	rjmp	.+504    	; 0xd28 <__stack+0x4c9>
     b30:	89 81       	ldd	r24, Y+1	; 0x01
     b32:	28 2f       	mov	r18, r24
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	c9 01       	movw	r24, r18
     b38:	88 0f       	add	r24, r24
     b3a:	99 1f       	adc	r25, r25
     b3c:	82 0f       	add	r24, r18
     b3e:	93 1f       	adc	r25, r19
     b40:	fc 01       	movw	r30, r24
     b42:	e1 54       	subi	r30, 0x41	; 65
     b44:	ff 4f       	sbci	r31, 0xFF	; 255
     b46:	80 81       	ld	r24, Z
     b48:	88 23       	and	r24, r24
     b4a:	09 f0       	breq	.+2      	; 0xb4e <__stack+0x2ef>
     b4c:	ed c0       	rjmp	.+474    	; 0xd28 <__stack+0x4c9>
		   astrDIOConfigParameters[u8_i].enuPullupResEn == NO_CONNECTION)
		{
			if((astrDIOConfigParameters[u8_i].enuPinNo >= 0) && (astrDIOConfigParameters[u8_i].enuPinNo < 8))	//if porta
     b4e:	89 81       	ldd	r24, Y+1	; 0x01
     b50:	28 2f       	mov	r18, r24
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	c9 01       	movw	r24, r18
     b56:	88 0f       	add	r24, r24
     b58:	99 1f       	adc	r25, r25
     b5a:	82 0f       	add	r24, r18
     b5c:	93 1f       	adc	r25, r19
     b5e:	fc 01       	movw	r30, r24
     b60:	e3 54       	subi	r30, 0x43	; 67
     b62:	ff 4f       	sbci	r31, 0xFF	; 255
     b64:	80 81       	ld	r24, Z
     b66:	88 30       	cpi	r24, 0x08	; 8
     b68:	00 f5       	brcc	.+64     	; 0xbaa <__stack+0x34b>
			{
				CLR_BIT(PORTA_R, astrDIOConfigParameters[u8_i].enuPinNo);
     b6a:	ab e3       	ldi	r26, 0x3B	; 59
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	eb e3       	ldi	r30, 0x3B	; 59
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	48 2f       	mov	r20, r24
     b76:	89 81       	ldd	r24, Y+1	; 0x01
     b78:	28 2f       	mov	r18, r24
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	c9 01       	movw	r24, r18
     b7e:	88 0f       	add	r24, r24
     b80:	99 1f       	adc	r25, r25
     b82:	82 0f       	add	r24, r18
     b84:	93 1f       	adc	r25, r19
     b86:	fc 01       	movw	r30, r24
     b88:	e3 54       	subi	r30, 0x43	; 67
     b8a:	ff 4f       	sbci	r31, 0xFF	; 255
     b8c:	80 81       	ld	r24, Z
     b8e:	28 2f       	mov	r18, r24
     b90:	30 e0       	ldi	r19, 0x00	; 0
     b92:	81 e0       	ldi	r24, 0x01	; 1
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	02 2e       	mov	r0, r18
     b98:	02 c0       	rjmp	.+4      	; 0xb9e <__stack+0x33f>
     b9a:	88 0f       	add	r24, r24
     b9c:	99 1f       	adc	r25, r25
     b9e:	0a 94       	dec	r0
     ba0:	e2 f7       	brpl	.-8      	; 0xb9a <__stack+0x33b>
     ba2:	80 95       	com	r24
     ba4:	84 23       	and	r24, r20
     ba6:	8c 93       	st	X, r24
     ba8:	c3 c1       	rjmp	.+902    	; 0xf30 <__stack+0x6d1>
			}//end if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 8) && (astrDIOConfigParameters[u8_i].enuPinNo < 16))	//if portb
     baa:	89 81       	ldd	r24, Y+1	; 0x01
     bac:	28 2f       	mov	r18, r24
     bae:	30 e0       	ldi	r19, 0x00	; 0
     bb0:	c9 01       	movw	r24, r18
     bb2:	88 0f       	add	r24, r24
     bb4:	99 1f       	adc	r25, r25
     bb6:	82 0f       	add	r24, r18
     bb8:	93 1f       	adc	r25, r19
     bba:	fc 01       	movw	r30, r24
     bbc:	e3 54       	subi	r30, 0x43	; 67
     bbe:	ff 4f       	sbci	r31, 0xFF	; 255
     bc0:	80 81       	ld	r24, Z
     bc2:	88 30       	cpi	r24, 0x08	; 8
     bc4:	88 f1       	brcs	.+98     	; 0xc28 <__stack+0x3c9>
     bc6:	89 81       	ldd	r24, Y+1	; 0x01
     bc8:	28 2f       	mov	r18, r24
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	c9 01       	movw	r24, r18
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	82 0f       	add	r24, r18
     bd4:	93 1f       	adc	r25, r19
     bd6:	fc 01       	movw	r30, r24
     bd8:	e3 54       	subi	r30, 0x43	; 67
     bda:	ff 4f       	sbci	r31, 0xFF	; 255
     bdc:	80 81       	ld	r24, Z
     bde:	80 31       	cpi	r24, 0x10	; 16
     be0:	18 f5       	brcc	.+70     	; 0xc28 <__stack+0x3c9>
			{
				CLR_BIT(PORTB_R,(astrDIOConfigParameters[u8_i].enuPinNo - 8));
     be2:	a8 e3       	ldi	r26, 0x38	; 56
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	e8 e3       	ldi	r30, 0x38	; 56
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	48 2f       	mov	r20, r24
     bee:	89 81       	ldd	r24, Y+1	; 0x01
     bf0:	28 2f       	mov	r18, r24
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	c9 01       	movw	r24, r18
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	82 0f       	add	r24, r18
     bfc:	93 1f       	adc	r25, r19
     bfe:	fc 01       	movw	r30, r24
     c00:	e3 54       	subi	r30, 0x43	; 67
     c02:	ff 4f       	sbci	r31, 0xFF	; 255
     c04:	80 81       	ld	r24, Z
     c06:	88 2f       	mov	r24, r24
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	9c 01       	movw	r18, r24
     c0c:	28 50       	subi	r18, 0x08	; 8
     c0e:	30 40       	sbci	r19, 0x00	; 0
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	02 2e       	mov	r0, r18
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <__stack+0x3bd>
     c18:	88 0f       	add	r24, r24
     c1a:	99 1f       	adc	r25, r25
     c1c:	0a 94       	dec	r0
     c1e:	e2 f7       	brpl	.-8      	; 0xc18 <__stack+0x3b9>
     c20:	80 95       	com	r24
     c22:	84 23       	and	r24, r20
     c24:	8c 93       	st	X, r24
     c26:	84 c1       	rjmp	.+776    	; 0xf30 <__stack+0x6d1>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 16) && (astrDIOConfigParameters[u8_i].enuPinNo < 24))	//if portc
     c28:	89 81       	ldd	r24, Y+1	; 0x01
     c2a:	28 2f       	mov	r18, r24
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	c9 01       	movw	r24, r18
     c30:	88 0f       	add	r24, r24
     c32:	99 1f       	adc	r25, r25
     c34:	82 0f       	add	r24, r18
     c36:	93 1f       	adc	r25, r19
     c38:	fc 01       	movw	r30, r24
     c3a:	e3 54       	subi	r30, 0x43	; 67
     c3c:	ff 4f       	sbci	r31, 0xFF	; 255
     c3e:	80 81       	ld	r24, Z
     c40:	80 31       	cpi	r24, 0x10	; 16
     c42:	88 f1       	brcs	.+98     	; 0xca6 <__stack+0x447>
     c44:	89 81       	ldd	r24, Y+1	; 0x01
     c46:	28 2f       	mov	r18, r24
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	c9 01       	movw	r24, r18
     c4c:	88 0f       	add	r24, r24
     c4e:	99 1f       	adc	r25, r25
     c50:	82 0f       	add	r24, r18
     c52:	93 1f       	adc	r25, r19
     c54:	fc 01       	movw	r30, r24
     c56:	e3 54       	subi	r30, 0x43	; 67
     c58:	ff 4f       	sbci	r31, 0xFF	; 255
     c5a:	80 81       	ld	r24, Z
     c5c:	88 31       	cpi	r24, 0x18	; 24
     c5e:	18 f5       	brcc	.+70     	; 0xca6 <__stack+0x447>
			{
				CLR_BIT(PORTC_R,(astrDIOConfigParameters[u8_i].enuPinNo - 16));
     c60:	a5 e3       	ldi	r26, 0x35	; 53
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	e5 e3       	ldi	r30, 0x35	; 53
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	48 2f       	mov	r20, r24
     c6c:	89 81       	ldd	r24, Y+1	; 0x01
     c6e:	28 2f       	mov	r18, r24
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	c9 01       	movw	r24, r18
     c74:	88 0f       	add	r24, r24
     c76:	99 1f       	adc	r25, r25
     c78:	82 0f       	add	r24, r18
     c7a:	93 1f       	adc	r25, r19
     c7c:	fc 01       	movw	r30, r24
     c7e:	e3 54       	subi	r30, 0x43	; 67
     c80:	ff 4f       	sbci	r31, 0xFF	; 255
     c82:	80 81       	ld	r24, Z
     c84:	88 2f       	mov	r24, r24
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	9c 01       	movw	r18, r24
     c8a:	20 51       	subi	r18, 0x10	; 16
     c8c:	30 40       	sbci	r19, 0x00	; 0
     c8e:	81 e0       	ldi	r24, 0x01	; 1
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	02 2e       	mov	r0, r18
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__stack+0x43b>
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	0a 94       	dec	r0
     c9c:	e2 f7       	brpl	.-8      	; 0xc96 <__stack+0x437>
     c9e:	80 95       	com	r24
     ca0:	84 23       	and	r24, r20
     ca2:	8c 93       	st	X, r24
     ca4:	45 c1       	rjmp	.+650    	; 0xf30 <__stack+0x6d1>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 24) && (astrDIOConfigParameters[u8_i].enuPinNo < 32))	//if portd
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	28 2f       	mov	r18, r24
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	c9 01       	movw	r24, r18
     cae:	88 0f       	add	r24, r24
     cb0:	99 1f       	adc	r25, r25
     cb2:	82 0f       	add	r24, r18
     cb4:	93 1f       	adc	r25, r19
     cb6:	fc 01       	movw	r30, r24
     cb8:	e3 54       	subi	r30, 0x43	; 67
     cba:	ff 4f       	sbci	r31, 0xFF	; 255
     cbc:	80 81       	ld	r24, Z
     cbe:	88 31       	cpi	r24, 0x18	; 24
     cc0:	08 f4       	brcc	.+2      	; 0xcc4 <__stack+0x465>
     cc2:	36 c1       	rjmp	.+620    	; 0xf30 <__stack+0x6d1>
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	c9 01       	movw	r24, r18
     ccc:	88 0f       	add	r24, r24
     cce:	99 1f       	adc	r25, r25
     cd0:	82 0f       	add	r24, r18
     cd2:	93 1f       	adc	r25, r19
     cd4:	fc 01       	movw	r30, r24
     cd6:	e3 54       	subi	r30, 0x43	; 67
     cd8:	ff 4f       	sbci	r31, 0xFF	; 255
     cda:	80 81       	ld	r24, Z
     cdc:	80 32       	cpi	r24, 0x20	; 32
     cde:	08 f0       	brcs	.+2      	; 0xce2 <__stack+0x483>
     ce0:	27 c1       	rjmp	.+590    	; 0xf30 <__stack+0x6d1>
			{
				CLR_BIT(PORTD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
     ce2:	a2 e3       	ldi	r26, 0x32	; 50
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e2 e3       	ldi	r30, 0x32	; 50
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	48 2f       	mov	r20, r24
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	28 2f       	mov	r18, r24
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	c9 01       	movw	r24, r18
     cf6:	88 0f       	add	r24, r24
     cf8:	99 1f       	adc	r25, r25
     cfa:	82 0f       	add	r24, r18
     cfc:	93 1f       	adc	r25, r19
     cfe:	fc 01       	movw	r30, r24
     d00:	e3 54       	subi	r30, 0x43	; 67
     d02:	ff 4f       	sbci	r31, 0xFF	; 255
     d04:	80 81       	ld	r24, Z
     d06:	88 2f       	mov	r24, r24
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	9c 01       	movw	r18, r24
     d0c:	28 51       	subi	r18, 0x18	; 24
     d0e:	30 40       	sbci	r19, 0x00	; 0
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	02 2e       	mov	r0, r18
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <__stack+0x4bd>
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	0a 94       	dec	r0
     d1e:	e2 f7       	brpl	.-8      	; 0xd18 <__stack+0x4b9>
     d20:	80 95       	com	r24
     d22:	84 23       	and	r24, r20
     d24:	8c 93       	st	X, r24
     d26:	04 c1       	rjmp	.+520    	; 0xf30 <__stack+0x6d1>
			}//end else if
		}//end if

		else if(astrDIOConfigParameters[u8_i].enuPinDir == INPUT &&
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	28 2f       	mov	r18, r24
     d2c:	30 e0       	ldi	r19, 0x00	; 0
     d2e:	c9 01       	movw	r24, r18
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	82 0f       	add	r24, r18
     d36:	93 1f       	adc	r25, r19
     d38:	fc 01       	movw	r30, r24
     d3a:	e2 54       	subi	r30, 0x42	; 66
     d3c:	ff 4f       	sbci	r31, 0xFF	; 255
     d3e:	80 81       	ld	r24, Z
     d40:	88 23       	and	r24, r24
     d42:	09 f0       	breq	.+2      	; 0xd46 <__stack+0x4e7>
     d44:	f5 c0       	rjmp	.+490    	; 0xf30 <__stack+0x6d1>
     d46:	89 81       	ldd	r24, Y+1	; 0x01
     d48:	28 2f       	mov	r18, r24
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	c9 01       	movw	r24, r18
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	82 0f       	add	r24, r18
     d54:	93 1f       	adc	r25, r19
     d56:	fc 01       	movw	r30, r24
     d58:	e1 54       	subi	r30, 0x41	; 65
     d5a:	ff 4f       	sbci	r31, 0xFF	; 255
     d5c:	80 81       	ld	r24, Z
     d5e:	81 30       	cpi	r24, 0x01	; 1
     d60:	09 f0       	breq	.+2      	; 0xd64 <__stack+0x505>
     d62:	e6 c0       	rjmp	.+460    	; 0xf30 <__stack+0x6d1>
				astrDIOConfigParameters[u8_i].enuPullupResEn == PULL_UP_ENABLE)
		{
			if((astrDIOConfigParameters[u8_i].enuPinNo >= 0) && (astrDIOConfigParameters[u8_i].enuPinNo < 8))	//if porta
     d64:	89 81       	ldd	r24, Y+1	; 0x01
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	c9 01       	movw	r24, r18
     d6c:	88 0f       	add	r24, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	82 0f       	add	r24, r18
     d72:	93 1f       	adc	r25, r19
     d74:	fc 01       	movw	r30, r24
     d76:	e3 54       	subi	r30, 0x43	; 67
     d78:	ff 4f       	sbci	r31, 0xFF	; 255
     d7a:	80 81       	ld	r24, Z
     d7c:	88 30       	cpi	r24, 0x08	; 8
     d7e:	f8 f4       	brcc	.+62     	; 0xdbe <__stack+0x55f>
			{
				SET_BIT(PORTA_R, astrDIOConfigParameters[u8_i].enuPinNo);
     d80:	ab e3       	ldi	r26, 0x3B	; 59
     d82:	b0 e0       	ldi	r27, 0x00	; 0
     d84:	eb e3       	ldi	r30, 0x3B	; 59
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	48 2f       	mov	r20, r24
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	c9 01       	movw	r24, r18
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	82 0f       	add	r24, r18
     d9a:	93 1f       	adc	r25, r19
     d9c:	fc 01       	movw	r30, r24
     d9e:	e3 54       	subi	r30, 0x43	; 67
     da0:	ff 4f       	sbci	r31, 0xFF	; 255
     da2:	80 81       	ld	r24, Z
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	02 2e       	mov	r0, r18
     dae:	02 c0       	rjmp	.+4      	; 0xdb4 <__stack+0x555>
     db0:	88 0f       	add	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	0a 94       	dec	r0
     db6:	e2 f7       	brpl	.-8      	; 0xdb0 <__stack+0x551>
     db8:	84 2b       	or	r24, r20
     dba:	8c 93       	st	X, r24
     dbc:	b9 c0       	rjmp	.+370    	; 0xf30 <__stack+0x6d1>
			}//end if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 8) && (astrDIOConfigParameters[u8_i].enuPinNo < 16))	//if portb
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	c9 01       	movw	r24, r18
     dc6:	88 0f       	add	r24, r24
     dc8:	99 1f       	adc	r25, r25
     dca:	82 0f       	add	r24, r18
     dcc:	93 1f       	adc	r25, r19
     dce:	fc 01       	movw	r30, r24
     dd0:	e3 54       	subi	r30, 0x43	; 67
     dd2:	ff 4f       	sbci	r31, 0xFF	; 255
     dd4:	80 81       	ld	r24, Z
     dd6:	88 30       	cpi	r24, 0x08	; 8
     dd8:	80 f1       	brcs	.+96     	; 0xe3a <__stack+0x5db>
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	28 2f       	mov	r18, r24
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	c9 01       	movw	r24, r18
     de2:	88 0f       	add	r24, r24
     de4:	99 1f       	adc	r25, r25
     de6:	82 0f       	add	r24, r18
     de8:	93 1f       	adc	r25, r19
     dea:	fc 01       	movw	r30, r24
     dec:	e3 54       	subi	r30, 0x43	; 67
     dee:	ff 4f       	sbci	r31, 0xFF	; 255
     df0:	80 81       	ld	r24, Z
     df2:	80 31       	cpi	r24, 0x10	; 16
     df4:	10 f5       	brcc	.+68     	; 0xe3a <__stack+0x5db>
			{
				SET_BIT(PORTB_R,(astrDIOConfigParameters[u8_i].enuPinNo - 8));
     df6:	a8 e3       	ldi	r26, 0x38	; 56
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e8 e3       	ldi	r30, 0x38	; 56
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	48 2f       	mov	r20, r24
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	c9 01       	movw	r24, r18
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	82 0f       	add	r24, r18
     e10:	93 1f       	adc	r25, r19
     e12:	fc 01       	movw	r30, r24
     e14:	e3 54       	subi	r30, 0x43	; 67
     e16:	ff 4f       	sbci	r31, 0xFF	; 255
     e18:	80 81       	ld	r24, Z
     e1a:	88 2f       	mov	r24, r24
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	9c 01       	movw	r18, r24
     e20:	28 50       	subi	r18, 0x08	; 8
     e22:	30 40       	sbci	r19, 0x00	; 0
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	02 2e       	mov	r0, r18
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <__stack+0x5d1>
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	0a 94       	dec	r0
     e32:	e2 f7       	brpl	.-8      	; 0xe2c <__stack+0x5cd>
     e34:	84 2b       	or	r24, r20
     e36:	8c 93       	st	X, r24
     e38:	7b c0       	rjmp	.+246    	; 0xf30 <__stack+0x6d1>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 16) && (astrDIOConfigParameters[u8_i].enuPinNo < 24))	//if portc
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	28 2f       	mov	r18, r24
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	c9 01       	movw	r24, r18
     e42:	88 0f       	add	r24, r24
     e44:	99 1f       	adc	r25, r25
     e46:	82 0f       	add	r24, r18
     e48:	93 1f       	adc	r25, r19
     e4a:	fc 01       	movw	r30, r24
     e4c:	e3 54       	subi	r30, 0x43	; 67
     e4e:	ff 4f       	sbci	r31, 0xFF	; 255
     e50:	80 81       	ld	r24, Z
     e52:	80 31       	cpi	r24, 0x10	; 16
     e54:	80 f1       	brcs	.+96     	; 0xeb6 <__stack+0x657>
     e56:	89 81       	ldd	r24, Y+1	; 0x01
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	c9 01       	movw	r24, r18
     e5e:	88 0f       	add	r24, r24
     e60:	99 1f       	adc	r25, r25
     e62:	82 0f       	add	r24, r18
     e64:	93 1f       	adc	r25, r19
     e66:	fc 01       	movw	r30, r24
     e68:	e3 54       	subi	r30, 0x43	; 67
     e6a:	ff 4f       	sbci	r31, 0xFF	; 255
     e6c:	80 81       	ld	r24, Z
     e6e:	88 31       	cpi	r24, 0x18	; 24
     e70:	10 f5       	brcc	.+68     	; 0xeb6 <__stack+0x657>
			{
				SET_BIT(PORTC_R,(astrDIOConfigParameters[u8_i].enuPinNo - 16));
     e72:	a5 e3       	ldi	r26, 0x35	; 53
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	e5 e3       	ldi	r30, 0x35	; 53
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	48 2f       	mov	r20, r24
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
     e80:	28 2f       	mov	r18, r24
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	c9 01       	movw	r24, r18
     e86:	88 0f       	add	r24, r24
     e88:	99 1f       	adc	r25, r25
     e8a:	82 0f       	add	r24, r18
     e8c:	93 1f       	adc	r25, r19
     e8e:	fc 01       	movw	r30, r24
     e90:	e3 54       	subi	r30, 0x43	; 67
     e92:	ff 4f       	sbci	r31, 0xFF	; 255
     e94:	80 81       	ld	r24, Z
     e96:	88 2f       	mov	r24, r24
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	9c 01       	movw	r18, r24
     e9c:	20 51       	subi	r18, 0x10	; 16
     e9e:	30 40       	sbci	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <__stack+0x64d>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <__stack+0x649>
     eb0:	84 2b       	or	r24, r20
     eb2:	8c 93       	st	X, r24
     eb4:	3d c0       	rjmp	.+122    	; 0xf30 <__stack+0x6d1>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 24) && (astrDIOConfigParameters[u8_i].enuPinNo < 32))	//if portd
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	c9 01       	movw	r24, r18
     ebe:	88 0f       	add	r24, r24
     ec0:	99 1f       	adc	r25, r25
     ec2:	82 0f       	add	r24, r18
     ec4:	93 1f       	adc	r25, r19
     ec6:	fc 01       	movw	r30, r24
     ec8:	e3 54       	subi	r30, 0x43	; 67
     eca:	ff 4f       	sbci	r31, 0xFF	; 255
     ecc:	80 81       	ld	r24, Z
     ece:	88 31       	cpi	r24, 0x18	; 24
     ed0:	78 f1       	brcs	.+94     	; 0xf30 <__stack+0x6d1>
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	28 2f       	mov	r18, r24
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	c9 01       	movw	r24, r18
     eda:	88 0f       	add	r24, r24
     edc:	99 1f       	adc	r25, r25
     ede:	82 0f       	add	r24, r18
     ee0:	93 1f       	adc	r25, r19
     ee2:	fc 01       	movw	r30, r24
     ee4:	e3 54       	subi	r30, 0x43	; 67
     ee6:	ff 4f       	sbci	r31, 0xFF	; 255
     ee8:	80 81       	ld	r24, Z
     eea:	80 32       	cpi	r24, 0x20	; 32
     eec:	08 f5       	brcc	.+66     	; 0xf30 <__stack+0x6d1>
			{
				SET_BIT(PORTD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
     eee:	a2 e3       	ldi	r26, 0x32	; 50
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e2 e3       	ldi	r30, 0x32	; 50
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	48 2f       	mov	r20, r24
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	28 2f       	mov	r18, r24
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	c9 01       	movw	r24, r18
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	82 0f       	add	r24, r18
     f08:	93 1f       	adc	r25, r19
     f0a:	fc 01       	movw	r30, r24
     f0c:	e3 54       	subi	r30, 0x43	; 67
     f0e:	ff 4f       	sbci	r31, 0xFF	; 255
     f10:	80 81       	ld	r24, Z
     f12:	88 2f       	mov	r24, r24
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	9c 01       	movw	r18, r24
     f18:	28 51       	subi	r18, 0x18	; 24
     f1a:	30 40       	sbci	r19, 0x00	; 0
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	02 2e       	mov	r0, r18
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <__stack+0x6c9>
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	0a 94       	dec	r0
     f2a:	e2 f7       	brpl	.-8      	; 0xf24 <__stack+0x6c5>
     f2c:	84 2b       	or	r24, r20
     f2e:	8c 93       	st	X, r24
*************************************************************************************************/
enuErrorStatus_t DIO_Init(void)
{
	uint8_t u8_i;

	for(u8_i=0; u8_i<DIO_GROUPS_NO; u8_i++)
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	8f 5f       	subi	r24, 0xFF	; 255
     f34:	89 83       	std	Y+1, r24	; 0x01
     f36:	89 81       	ldd	r24, Y+1	; 0x01
     f38:	8f 30       	cpi	r24, 0x0F	; 15
     f3a:	08 f4       	brcc	.+2      	; 0xf3e <__stack+0x6df>
     f3c:	fa cb       	rjmp	.-2060   	; 0x732 <DIO_Init+0xe>
				SET_BIT(PORTD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
			}//end else if
		}//end else if

	}//end for
    return E_OK;
     f3e:	81 e0       	ldi	r24, 0x01	; 1
}//end DIO_Init
     f40:	0f 90       	pop	r0
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <DIO_Write>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to write a digital value into the selected DIO pin
*************************************************************************************************/
enuErrorStatus_t DIO_Write(uint8_t u8_GroupId, uint8_t u8_Data)
{
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <DIO_Write+0x6>
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	89 83       	std	Y+1, r24	; 0x01
     f54:	6a 83       	std	Y+2, r22	; 0x02
//	if(DIO_Init() == E_ERROR)	return E_ERROR;
//	else{

		if (u8_Data == LOW)
     f56:	8a 81       	ldd	r24, Y+2	; 0x02
     f58:	88 23       	and	r24, r24
     f5a:	09 f0       	breq	.+2      	; 0xf5e <DIO_Write+0x16>
     f5c:	ed c0       	rjmp	.+474    	; 0x1138 <DIO_Write+0x1f0>
	    {
			if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 0) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 8))	//if porta
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	c9 01       	movw	r24, r18
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	82 0f       	add	r24, r18
     f6c:	93 1f       	adc	r25, r19
     f6e:	fc 01       	movw	r30, r24
     f70:	e3 54       	subi	r30, 0x43	; 67
     f72:	ff 4f       	sbci	r31, 0xFF	; 255
     f74:	80 81       	ld	r24, Z
     f76:	88 30       	cpi	r24, 0x08	; 8
     f78:	00 f5       	brcc	.+64     	; 0xfba <DIO_Write+0x72>
			{
				CLR_BIT(PORTA_R, astrDIOConfigParameters[u8_GroupId].enuPinNo);
     f7a:	ab e3       	ldi	r26, 0x3B	; 59
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	eb e3       	ldi	r30, 0x3B	; 59
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	48 2f       	mov	r20, r24
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	c9 01       	movw	r24, r18
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	82 0f       	add	r24, r18
     f94:	93 1f       	adc	r25, r19
     f96:	fc 01       	movw	r30, r24
     f98:	e3 54       	subi	r30, 0x43	; 67
     f9a:	ff 4f       	sbci	r31, 0xFF	; 255
     f9c:	80 81       	ld	r24, Z
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	02 2e       	mov	r0, r18
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <DIO_Write+0x66>
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	0a 94       	dec	r0
     fb0:	e2 f7       	brpl	.-8      	; 0xfaa <DIO_Write+0x62>
     fb2:	80 95       	com	r24
     fb4:	84 23       	and	r24, r20
     fb6:	8c 93       	st	X, r24
     fb8:	a9 c1       	rjmp	.+850    	; 0x130c <DIO_Write+0x3c4>
			}//end if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 8) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 16))	//if portb
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	c9 01       	movw	r24, r18
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	82 0f       	add	r24, r18
     fc8:	93 1f       	adc	r25, r19
     fca:	fc 01       	movw	r30, r24
     fcc:	e3 54       	subi	r30, 0x43	; 67
     fce:	ff 4f       	sbci	r31, 0xFF	; 255
     fd0:	80 81       	ld	r24, Z
     fd2:	88 30       	cpi	r24, 0x08	; 8
     fd4:	88 f1       	brcs	.+98     	; 0x1038 <DIO_Write+0xf0>
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	c9 01       	movw	r24, r18
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	82 0f       	add	r24, r18
     fe4:	93 1f       	adc	r25, r19
     fe6:	fc 01       	movw	r30, r24
     fe8:	e3 54       	subi	r30, 0x43	; 67
     fea:	ff 4f       	sbci	r31, 0xFF	; 255
     fec:	80 81       	ld	r24, Z
     fee:	80 31       	cpi	r24, 0x10	; 16
     ff0:	18 f5       	brcc	.+70     	; 0x1038 <DIO_Write+0xf0>
			{
				CLR_BIT(PORTB_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 8));
     ff2:	a8 e3       	ldi	r26, 0x38	; 56
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e8 e3       	ldi	r30, 0x38	; 56
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	48 2f       	mov	r20, r24
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	28 2f       	mov	r18, r24
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	c9 01       	movw	r24, r18
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	82 0f       	add	r24, r18
    100c:	93 1f       	adc	r25, r19
    100e:	fc 01       	movw	r30, r24
    1010:	e3 54       	subi	r30, 0x43	; 67
    1012:	ff 4f       	sbci	r31, 0xFF	; 255
    1014:	80 81       	ld	r24, Z
    1016:	88 2f       	mov	r24, r24
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	9c 01       	movw	r18, r24
    101c:	28 50       	subi	r18, 0x08	; 8
    101e:	30 40       	sbci	r19, 0x00	; 0
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	02 2e       	mov	r0, r18
    1026:	02 c0       	rjmp	.+4      	; 0x102c <DIO_Write+0xe4>
    1028:	88 0f       	add	r24, r24
    102a:	99 1f       	adc	r25, r25
    102c:	0a 94       	dec	r0
    102e:	e2 f7       	brpl	.-8      	; 0x1028 <DIO_Write+0xe0>
    1030:	80 95       	com	r24
    1032:	84 23       	and	r24, r20
    1034:	8c 93       	st	X, r24
    1036:	6a c1       	rjmp	.+724    	; 0x130c <DIO_Write+0x3c4>
			}//end else if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 16) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 24))	//if portc
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	28 2f       	mov	r18, r24
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	c9 01       	movw	r24, r18
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	82 0f       	add	r24, r18
    1046:	93 1f       	adc	r25, r19
    1048:	fc 01       	movw	r30, r24
    104a:	e3 54       	subi	r30, 0x43	; 67
    104c:	ff 4f       	sbci	r31, 0xFF	; 255
    104e:	80 81       	ld	r24, Z
    1050:	80 31       	cpi	r24, 0x10	; 16
    1052:	88 f1       	brcs	.+98     	; 0x10b6 <DIO_Write+0x16e>
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	c9 01       	movw	r24, r18
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	82 0f       	add	r24, r18
    1062:	93 1f       	adc	r25, r19
    1064:	fc 01       	movw	r30, r24
    1066:	e3 54       	subi	r30, 0x43	; 67
    1068:	ff 4f       	sbci	r31, 0xFF	; 255
    106a:	80 81       	ld	r24, Z
    106c:	88 31       	cpi	r24, 0x18	; 24
    106e:	18 f5       	brcc	.+70     	; 0x10b6 <DIO_Write+0x16e>
			{
				CLR_BIT(PORTC_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 16));
    1070:	a5 e3       	ldi	r26, 0x35	; 53
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	e5 e3       	ldi	r30, 0x35	; 53
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	48 2f       	mov	r20, r24
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	c9 01       	movw	r24, r18
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	82 0f       	add	r24, r18
    108a:	93 1f       	adc	r25, r19
    108c:	fc 01       	movw	r30, r24
    108e:	e3 54       	subi	r30, 0x43	; 67
    1090:	ff 4f       	sbci	r31, 0xFF	; 255
    1092:	80 81       	ld	r24, Z
    1094:	88 2f       	mov	r24, r24
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	9c 01       	movw	r18, r24
    109a:	20 51       	subi	r18, 0x10	; 16
    109c:	30 40       	sbci	r19, 0x00	; 0
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	02 2e       	mov	r0, r18
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <DIO_Write+0x162>
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	0a 94       	dec	r0
    10ac:	e2 f7       	brpl	.-8      	; 0x10a6 <DIO_Write+0x15e>
    10ae:	80 95       	com	r24
    10b0:	84 23       	and	r24, r20
    10b2:	8c 93       	st	X, r24
    10b4:	2b c1       	rjmp	.+598    	; 0x130c <DIO_Write+0x3c4>
			}//end else if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 24) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 32))	//if portd
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	c9 01       	movw	r24, r18
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	82 0f       	add	r24, r18
    10c4:	93 1f       	adc	r25, r19
    10c6:	fc 01       	movw	r30, r24
    10c8:	e3 54       	subi	r30, 0x43	; 67
    10ca:	ff 4f       	sbci	r31, 0xFF	; 255
    10cc:	80 81       	ld	r24, Z
    10ce:	88 31       	cpi	r24, 0x18	; 24
    10d0:	08 f4       	brcc	.+2      	; 0x10d4 <DIO_Write+0x18c>
    10d2:	1c c1       	rjmp	.+568    	; 0x130c <DIO_Write+0x3c4>
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	c9 01       	movw	r24, r18
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	82 0f       	add	r24, r18
    10e2:	93 1f       	adc	r25, r19
    10e4:	fc 01       	movw	r30, r24
    10e6:	e3 54       	subi	r30, 0x43	; 67
    10e8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ea:	80 81       	ld	r24, Z
    10ec:	80 32       	cpi	r24, 0x20	; 32
    10ee:	08 f0       	brcs	.+2      	; 0x10f2 <DIO_Write+0x1aa>
    10f0:	0d c1       	rjmp	.+538    	; 0x130c <DIO_Write+0x3c4>
			{
				CLR_BIT(PORTD_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 24));
    10f2:	a2 e3       	ldi	r26, 0x32	; 50
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	e2 e3       	ldi	r30, 0x32	; 50
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	48 2f       	mov	r20, r24
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	c9 01       	movw	r24, r18
    1106:	88 0f       	add	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	82 0f       	add	r24, r18
    110c:	93 1f       	adc	r25, r19
    110e:	fc 01       	movw	r30, r24
    1110:	e3 54       	subi	r30, 0x43	; 67
    1112:	ff 4f       	sbci	r31, 0xFF	; 255
    1114:	80 81       	ld	r24, Z
    1116:	88 2f       	mov	r24, r24
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	9c 01       	movw	r18, r24
    111c:	28 51       	subi	r18, 0x18	; 24
    111e:	30 40       	sbci	r19, 0x00	; 0
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	02 2e       	mov	r0, r18
    1126:	02 c0       	rjmp	.+4      	; 0x112c <DIO_Write+0x1e4>
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	0a 94       	dec	r0
    112e:	e2 f7       	brpl	.-8      	; 0x1128 <DIO_Write+0x1e0>
    1130:	80 95       	com	r24
    1132:	84 23       	and	r24, r20
    1134:	8c 93       	st	X, r24
    1136:	ea c0       	rjmp	.+468    	; 0x130c <DIO_Write+0x3c4>
			}//end else if
	    }//end if

	    else if(u8_Data == HIGH)
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	81 30       	cpi	r24, 0x01	; 1
    113c:	09 f0       	breq	.+2      	; 0x1140 <DIO_Write+0x1f8>
    113e:	e6 c0       	rjmp	.+460    	; 0x130c <DIO_Write+0x3c4>
	    {
			if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 0) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 8))	//if porta
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	c9 01       	movw	r24, r18
    1148:	88 0f       	add	r24, r24
    114a:	99 1f       	adc	r25, r25
    114c:	82 0f       	add	r24, r18
    114e:	93 1f       	adc	r25, r19
    1150:	fc 01       	movw	r30, r24
    1152:	e3 54       	subi	r30, 0x43	; 67
    1154:	ff 4f       	sbci	r31, 0xFF	; 255
    1156:	80 81       	ld	r24, Z
    1158:	88 30       	cpi	r24, 0x08	; 8
    115a:	f8 f4       	brcc	.+62     	; 0x119a <DIO_Write+0x252>
			{
				SET_BIT(PORTA_R, astrDIOConfigParameters[u8_GroupId].enuPinNo);
    115c:	ab e3       	ldi	r26, 0x3B	; 59
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	eb e3       	ldi	r30, 0x3B	; 59
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	80 81       	ld	r24, Z
    1166:	48 2f       	mov	r20, r24
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	28 2f       	mov	r18, r24
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	c9 01       	movw	r24, r18
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	82 0f       	add	r24, r18
    1176:	93 1f       	adc	r25, r19
    1178:	fc 01       	movw	r30, r24
    117a:	e3 54       	subi	r30, 0x43	; 67
    117c:	ff 4f       	sbci	r31, 0xFF	; 255
    117e:	80 81       	ld	r24, Z
    1180:	28 2f       	mov	r18, r24
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	02 2e       	mov	r0, r18
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <DIO_Write+0x248>
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	0a 94       	dec	r0
    1192:	e2 f7       	brpl	.-8      	; 0x118c <DIO_Write+0x244>
    1194:	84 2b       	or	r24, r20
    1196:	8c 93       	st	X, r24
    1198:	b9 c0       	rjmp	.+370    	; 0x130c <DIO_Write+0x3c4>
			}//end if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 8) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 16))	//if portb
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	c9 01       	movw	r24, r18
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	82 0f       	add	r24, r18
    11a8:	93 1f       	adc	r25, r19
    11aa:	fc 01       	movw	r30, r24
    11ac:	e3 54       	subi	r30, 0x43	; 67
    11ae:	ff 4f       	sbci	r31, 0xFF	; 255
    11b0:	80 81       	ld	r24, Z
    11b2:	88 30       	cpi	r24, 0x08	; 8
    11b4:	80 f1       	brcs	.+96     	; 0x1216 <DIO_Write+0x2ce>
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	c9 01       	movw	r24, r18
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	82 0f       	add	r24, r18
    11c4:	93 1f       	adc	r25, r19
    11c6:	fc 01       	movw	r30, r24
    11c8:	e3 54       	subi	r30, 0x43	; 67
    11ca:	ff 4f       	sbci	r31, 0xFF	; 255
    11cc:	80 81       	ld	r24, Z
    11ce:	80 31       	cpi	r24, 0x10	; 16
    11d0:	10 f5       	brcc	.+68     	; 0x1216 <DIO_Write+0x2ce>
			{
				SET_BIT(PORTB_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 8));
    11d2:	a8 e3       	ldi	r26, 0x38	; 56
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	e8 e3       	ldi	r30, 0x38	; 56
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	48 2f       	mov	r20, r24
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	28 2f       	mov	r18, r24
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	c9 01       	movw	r24, r18
    11e6:	88 0f       	add	r24, r24
    11e8:	99 1f       	adc	r25, r25
    11ea:	82 0f       	add	r24, r18
    11ec:	93 1f       	adc	r25, r19
    11ee:	fc 01       	movw	r30, r24
    11f0:	e3 54       	subi	r30, 0x43	; 67
    11f2:	ff 4f       	sbci	r31, 0xFF	; 255
    11f4:	80 81       	ld	r24, Z
    11f6:	88 2f       	mov	r24, r24
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	9c 01       	movw	r18, r24
    11fc:	28 50       	subi	r18, 0x08	; 8
    11fe:	30 40       	sbci	r19, 0x00	; 0
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	02 2e       	mov	r0, r18
    1206:	02 c0       	rjmp	.+4      	; 0x120c <DIO_Write+0x2c4>
    1208:	88 0f       	add	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	0a 94       	dec	r0
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <DIO_Write+0x2c0>
    1210:	84 2b       	or	r24, r20
    1212:	8c 93       	st	X, r24
    1214:	7b c0       	rjmp	.+246    	; 0x130c <DIO_Write+0x3c4>
			}//end else if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 16) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 24))	//if portc
    1216:	89 81       	ldd	r24, Y+1	; 0x01
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	c9 01       	movw	r24, r18
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	82 0f       	add	r24, r18
    1224:	93 1f       	adc	r25, r19
    1226:	fc 01       	movw	r30, r24
    1228:	e3 54       	subi	r30, 0x43	; 67
    122a:	ff 4f       	sbci	r31, 0xFF	; 255
    122c:	80 81       	ld	r24, Z
    122e:	80 31       	cpi	r24, 0x10	; 16
    1230:	80 f1       	brcs	.+96     	; 0x1292 <DIO_Write+0x34a>
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	c9 01       	movw	r24, r18
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	82 0f       	add	r24, r18
    1240:	93 1f       	adc	r25, r19
    1242:	fc 01       	movw	r30, r24
    1244:	e3 54       	subi	r30, 0x43	; 67
    1246:	ff 4f       	sbci	r31, 0xFF	; 255
    1248:	80 81       	ld	r24, Z
    124a:	88 31       	cpi	r24, 0x18	; 24
    124c:	10 f5       	brcc	.+68     	; 0x1292 <DIO_Write+0x34a>
			{
				SET_BIT(PORTC_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 16));
    124e:	a5 e3       	ldi	r26, 0x35	; 53
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e5 e3       	ldi	r30, 0x35	; 53
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	48 2f       	mov	r20, r24
    125a:	89 81       	ldd	r24, Y+1	; 0x01
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	c9 01       	movw	r24, r18
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	82 0f       	add	r24, r18
    1268:	93 1f       	adc	r25, r19
    126a:	fc 01       	movw	r30, r24
    126c:	e3 54       	subi	r30, 0x43	; 67
    126e:	ff 4f       	sbci	r31, 0xFF	; 255
    1270:	80 81       	ld	r24, Z
    1272:	88 2f       	mov	r24, r24
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	9c 01       	movw	r18, r24
    1278:	20 51       	subi	r18, 0x10	; 16
    127a:	30 40       	sbci	r19, 0x00	; 0
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	02 2e       	mov	r0, r18
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <DIO_Write+0x340>
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	0a 94       	dec	r0
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <DIO_Write+0x33c>
    128c:	84 2b       	or	r24, r20
    128e:	8c 93       	st	X, r24
    1290:	3d c0       	rjmp	.+122    	; 0x130c <DIO_Write+0x3c4>
			}//end else if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 24) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 32))	//if portd
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	c9 01       	movw	r24, r18
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	82 0f       	add	r24, r18
    12a0:	93 1f       	adc	r25, r19
    12a2:	fc 01       	movw	r30, r24
    12a4:	e3 54       	subi	r30, 0x43	; 67
    12a6:	ff 4f       	sbci	r31, 0xFF	; 255
    12a8:	80 81       	ld	r24, Z
    12aa:	88 31       	cpi	r24, 0x18	; 24
    12ac:	78 f1       	brcs	.+94     	; 0x130c <DIO_Write+0x3c4>
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	c9 01       	movw	r24, r18
    12b6:	88 0f       	add	r24, r24
    12b8:	99 1f       	adc	r25, r25
    12ba:	82 0f       	add	r24, r18
    12bc:	93 1f       	adc	r25, r19
    12be:	fc 01       	movw	r30, r24
    12c0:	e3 54       	subi	r30, 0x43	; 67
    12c2:	ff 4f       	sbci	r31, 0xFF	; 255
    12c4:	80 81       	ld	r24, Z
    12c6:	80 32       	cpi	r24, 0x20	; 32
    12c8:	08 f5       	brcc	.+66     	; 0x130c <DIO_Write+0x3c4>
			{
				SET_BIT(PORTD_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 24));
    12ca:	a2 e3       	ldi	r26, 0x32	; 50
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	e2 e3       	ldi	r30, 0x32	; 50
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	48 2f       	mov	r20, r24
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	c9 01       	movw	r24, r18
    12de:	88 0f       	add	r24, r24
    12e0:	99 1f       	adc	r25, r25
    12e2:	82 0f       	add	r24, r18
    12e4:	93 1f       	adc	r25, r19
    12e6:	fc 01       	movw	r30, r24
    12e8:	e3 54       	subi	r30, 0x43	; 67
    12ea:	ff 4f       	sbci	r31, 0xFF	; 255
    12ec:	80 81       	ld	r24, Z
    12ee:	88 2f       	mov	r24, r24
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	9c 01       	movw	r18, r24
    12f4:	28 51       	subi	r18, 0x18	; 24
    12f6:	30 40       	sbci	r19, 0x00	; 0
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	02 2e       	mov	r0, r18
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <DIO_Write+0x3bc>
    1300:	88 0f       	add	r24, r24
    1302:	99 1f       	adc	r25, r25
    1304:	0a 94       	dec	r0
    1306:	e2 f7       	brpl	.-8      	; 0x1300 <DIO_Write+0x3b8>
    1308:	84 2b       	or	r24, r20
    130a:	8c 93       	st	X, r24
			}//end else if
	    }//end else if
		return E_OK;
    130c:	81 e0       	ldi	r24, 0x01	; 1
}//end DIO_write
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	cf 91       	pop	r28
    1314:	df 91       	pop	r29
    1316:	08 95       	ret

00001318 <DIO_Read>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to read a digital value from the selected DIO pin
*************************************************************************************************/
enuErrorStatus_t DIO_Read(uint8_t u8_GroupId, uint8_t* pu8_Data)
{
    1318:	df 93       	push	r29
    131a:	cf 93       	push	r28
    131c:	00 d0       	rcall	.+0      	; 0x131e <DIO_Read+0x6>
    131e:	00 d0       	rcall	.+0      	; 0x1320 <DIO_Read+0x8>
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	89 83       	std	Y+1, r24	; 0x01
    1326:	7b 83       	std	Y+3, r23	; 0x03
    1328:	6a 83       	std	Y+2, r22	; 0x02
	if(pu8_Data == NULL_PTR)		return E_ERROR;
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	9b 81       	ldd	r25, Y+3	; 0x03
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	11 f4       	brne	.+4      	; 0x1336 <DIO_Read+0x1e>
    1332:	1c 82       	std	Y+4, r1	; 0x04
    1334:	e8 c0       	rjmp	.+464    	; 0x1506 <DIO_Read+0x1ee>
	else
	{
		if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 0) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 8))	//if porta
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	c9 01       	movw	r24, r18
    133e:	88 0f       	add	r24, r24
    1340:	99 1f       	adc	r25, r25
    1342:	82 0f       	add	r24, r18
    1344:	93 1f       	adc	r25, r19
    1346:	fc 01       	movw	r30, r24
    1348:	e3 54       	subi	r30, 0x43	; 67
    134a:	ff 4f       	sbci	r31, 0xFF	; 255
    134c:	80 81       	ld	r24, Z
    134e:	88 30       	cpi	r24, 0x08	; 8
    1350:	f8 f4       	brcc	.+62     	; 0x1390 <DIO_Read+0x78>
		{
			*pu8_Data = GET_BIT(PINA_R, astrDIOConfigParameters[u8_GroupId].enuPinNo);
    1352:	e9 e3       	ldi	r30, 0x39	; 57
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	48 2f       	mov	r20, r24
    135a:	89 81       	ldd	r24, Y+1	; 0x01
    135c:	28 2f       	mov	r18, r24
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	c9 01       	movw	r24, r18
    1362:	88 0f       	add	r24, r24
    1364:	99 1f       	adc	r25, r25
    1366:	82 0f       	add	r24, r18
    1368:	93 1f       	adc	r25, r19
    136a:	fc 01       	movw	r30, r24
    136c:	e3 54       	subi	r30, 0x43	; 67
    136e:	ff 4f       	sbci	r31, 0xFF	; 255
    1370:	80 81       	ld	r24, Z
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	02 2e       	mov	r0, r18
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <DIO_Read+0x6a>
    137e:	88 0f       	add	r24, r24
    1380:	99 1f       	adc	r25, r25
    1382:	0a 94       	dec	r0
    1384:	e2 f7       	brpl	.-8      	; 0x137e <DIO_Read+0x66>
    1386:	84 23       	and	r24, r20
    1388:	ea 81       	ldd	r30, Y+2	; 0x02
    138a:	fb 81       	ldd	r31, Y+3	; 0x03
    138c:	80 83       	st	Z, r24
    138e:	b9 c0       	rjmp	.+370    	; 0x1502 <DIO_Read+0x1ea>
		}//end if
		else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 8) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 16))	//if portb
    1390:	89 81       	ldd	r24, Y+1	; 0x01
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	c9 01       	movw	r24, r18
    1398:	88 0f       	add	r24, r24
    139a:	99 1f       	adc	r25, r25
    139c:	82 0f       	add	r24, r18
    139e:	93 1f       	adc	r25, r19
    13a0:	fc 01       	movw	r30, r24
    13a2:	e3 54       	subi	r30, 0x43	; 67
    13a4:	ff 4f       	sbci	r31, 0xFF	; 255
    13a6:	80 81       	ld	r24, Z
    13a8:	88 30       	cpi	r24, 0x08	; 8
    13aa:	80 f1       	brcs	.+96     	; 0x140c <DIO_Read+0xf4>
    13ac:	89 81       	ldd	r24, Y+1	; 0x01
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	c9 01       	movw	r24, r18
    13b4:	88 0f       	add	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	82 0f       	add	r24, r18
    13ba:	93 1f       	adc	r25, r19
    13bc:	fc 01       	movw	r30, r24
    13be:	e3 54       	subi	r30, 0x43	; 67
    13c0:	ff 4f       	sbci	r31, 0xFF	; 255
    13c2:	80 81       	ld	r24, Z
    13c4:	80 31       	cpi	r24, 0x10	; 16
    13c6:	10 f5       	brcc	.+68     	; 0x140c <DIO_Read+0xf4>
		{
			*pu8_Data = GET_BIT(PINB_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 8));
    13c8:	e6 e3       	ldi	r30, 0x36	; 54
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	48 2f       	mov	r20, r24
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	c9 01       	movw	r24, r18
    13d8:	88 0f       	add	r24, r24
    13da:	99 1f       	adc	r25, r25
    13dc:	82 0f       	add	r24, r18
    13de:	93 1f       	adc	r25, r19
    13e0:	fc 01       	movw	r30, r24
    13e2:	e3 54       	subi	r30, 0x43	; 67
    13e4:	ff 4f       	sbci	r31, 0xFF	; 255
    13e6:	80 81       	ld	r24, Z
    13e8:	88 2f       	mov	r24, r24
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	9c 01       	movw	r18, r24
    13ee:	28 50       	subi	r18, 0x08	; 8
    13f0:	30 40       	sbci	r19, 0x00	; 0
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	02 2e       	mov	r0, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <DIO_Read+0xe6>
    13fa:	88 0f       	add	r24, r24
    13fc:	99 1f       	adc	r25, r25
    13fe:	0a 94       	dec	r0
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <DIO_Read+0xe2>
    1402:	84 23       	and	r24, r20
    1404:	ea 81       	ldd	r30, Y+2	; 0x02
    1406:	fb 81       	ldd	r31, Y+3	; 0x03
    1408:	80 83       	st	Z, r24
    140a:	7b c0       	rjmp	.+246    	; 0x1502 <DIO_Read+0x1ea>
		}//end else if
		else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 16) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 24))	//if portc
    140c:	89 81       	ldd	r24, Y+1	; 0x01
    140e:	28 2f       	mov	r18, r24
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	c9 01       	movw	r24, r18
    1414:	88 0f       	add	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	82 0f       	add	r24, r18
    141a:	93 1f       	adc	r25, r19
    141c:	fc 01       	movw	r30, r24
    141e:	e3 54       	subi	r30, 0x43	; 67
    1420:	ff 4f       	sbci	r31, 0xFF	; 255
    1422:	80 81       	ld	r24, Z
    1424:	80 31       	cpi	r24, 0x10	; 16
    1426:	80 f1       	brcs	.+96     	; 0x1488 <DIO_Read+0x170>
    1428:	89 81       	ldd	r24, Y+1	; 0x01
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	c9 01       	movw	r24, r18
    1430:	88 0f       	add	r24, r24
    1432:	99 1f       	adc	r25, r25
    1434:	82 0f       	add	r24, r18
    1436:	93 1f       	adc	r25, r19
    1438:	fc 01       	movw	r30, r24
    143a:	e3 54       	subi	r30, 0x43	; 67
    143c:	ff 4f       	sbci	r31, 0xFF	; 255
    143e:	80 81       	ld	r24, Z
    1440:	88 31       	cpi	r24, 0x18	; 24
    1442:	10 f5       	brcc	.+68     	; 0x1488 <DIO_Read+0x170>
		{
			*pu8_Data = GET_BIT(PINC_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 16));
    1444:	e3 e3       	ldi	r30, 0x33	; 51
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	48 2f       	mov	r20, r24
    144c:	89 81       	ldd	r24, Y+1	; 0x01
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	c9 01       	movw	r24, r18
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	82 0f       	add	r24, r18
    145a:	93 1f       	adc	r25, r19
    145c:	fc 01       	movw	r30, r24
    145e:	e3 54       	subi	r30, 0x43	; 67
    1460:	ff 4f       	sbci	r31, 0xFF	; 255
    1462:	80 81       	ld	r24, Z
    1464:	88 2f       	mov	r24, r24
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	9c 01       	movw	r18, r24
    146a:	20 51       	subi	r18, 0x10	; 16
    146c:	30 40       	sbci	r19, 0x00	; 0
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	02 2e       	mov	r0, r18
    1474:	02 c0       	rjmp	.+4      	; 0x147a <DIO_Read+0x162>
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	0a 94       	dec	r0
    147c:	e2 f7       	brpl	.-8      	; 0x1476 <DIO_Read+0x15e>
    147e:	84 23       	and	r24, r20
    1480:	ea 81       	ldd	r30, Y+2	; 0x02
    1482:	fb 81       	ldd	r31, Y+3	; 0x03
    1484:	80 83       	st	Z, r24
    1486:	3d c0       	rjmp	.+122    	; 0x1502 <DIO_Read+0x1ea>
		}//end else if
		else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 24) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 32))	//if portd
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	c9 01       	movw	r24, r18
    1490:	88 0f       	add	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	82 0f       	add	r24, r18
    1496:	93 1f       	adc	r25, r19
    1498:	fc 01       	movw	r30, r24
    149a:	e3 54       	subi	r30, 0x43	; 67
    149c:	ff 4f       	sbci	r31, 0xFF	; 255
    149e:	80 81       	ld	r24, Z
    14a0:	88 31       	cpi	r24, 0x18	; 24
    14a2:	78 f1       	brcs	.+94     	; 0x1502 <DIO_Read+0x1ea>
    14a4:	89 81       	ldd	r24, Y+1	; 0x01
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	c9 01       	movw	r24, r18
    14ac:	88 0f       	add	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	82 0f       	add	r24, r18
    14b2:	93 1f       	adc	r25, r19
    14b4:	fc 01       	movw	r30, r24
    14b6:	e3 54       	subi	r30, 0x43	; 67
    14b8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ba:	80 81       	ld	r24, Z
    14bc:	80 32       	cpi	r24, 0x20	; 32
    14be:	08 f5       	brcc	.+66     	; 0x1502 <DIO_Read+0x1ea>
		{
			*pu8_Data = GET_BIT(PIND_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 24));
    14c0:	e0 e3       	ldi	r30, 0x30	; 48
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	48 2f       	mov	r20, r24
    14c8:	89 81       	ldd	r24, Y+1	; 0x01
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	c9 01       	movw	r24, r18
    14d0:	88 0f       	add	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	82 0f       	add	r24, r18
    14d6:	93 1f       	adc	r25, r19
    14d8:	fc 01       	movw	r30, r24
    14da:	e3 54       	subi	r30, 0x43	; 67
    14dc:	ff 4f       	sbci	r31, 0xFF	; 255
    14de:	80 81       	ld	r24, Z
    14e0:	88 2f       	mov	r24, r24
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	9c 01       	movw	r18, r24
    14e6:	28 51       	subi	r18, 0x18	; 24
    14e8:	30 40       	sbci	r19, 0x00	; 0
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	02 2e       	mov	r0, r18
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <DIO_Read+0x1de>
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	0a 94       	dec	r0
    14f8:	e2 f7       	brpl	.-8      	; 0x14f2 <DIO_Read+0x1da>
    14fa:	84 23       	and	r24, r20
    14fc:	ea 81       	ldd	r30, Y+2	; 0x02
    14fe:	fb 81       	ldd	r31, Y+3	; 0x03
    1500:	80 83       	st	Z, r24
		}//end else if

		return E_OK;
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	8c 83       	std	Y+4, r24	; 0x04
    1506:	8c 81       	ldd	r24, Y+4	; 0x04
	}//end else
}//end DIO_Read
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	08 95       	ret

00001516 <DIO_toggle>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to toggle the selected DIO pin
*************************************************************************************************/
enuErrorStatus_t DIO_toggle(uint8_t u8_GroupId)
{
    1516:	df 93       	push	r29
    1518:	cf 93       	push	r28
    151a:	0f 92       	push	r0
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    1520:	89 83       	std	Y+1, r24	; 0x01
	if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 0) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 8))	//if porta
    1522:	89 81       	ldd	r24, Y+1	; 0x01
    1524:	28 2f       	mov	r18, r24
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	c9 01       	movw	r24, r18
    152a:	88 0f       	add	r24, r24
    152c:	99 1f       	adc	r25, r25
    152e:	82 0f       	add	r24, r18
    1530:	93 1f       	adc	r25, r19
    1532:	fc 01       	movw	r30, r24
    1534:	e3 54       	subi	r30, 0x43	; 67
    1536:	ff 4f       	sbci	r31, 0xFF	; 255
    1538:	80 81       	ld	r24, Z
    153a:	88 30       	cpi	r24, 0x08	; 8
    153c:	f8 f4       	brcc	.+62     	; 0x157c <DIO_toggle+0x66>
	{
		TOGGLE_BIT(PORTA_R, astrDIOConfigParameters[u8_GroupId].enuPinNo);
    153e:	ab e3       	ldi	r26, 0x3B	; 59
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	eb e3       	ldi	r30, 0x3B	; 59
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	48 2f       	mov	r20, r24
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	c9 01       	movw	r24, r18
    1552:	88 0f       	add	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	82 0f       	add	r24, r18
    1558:	93 1f       	adc	r25, r19
    155a:	fc 01       	movw	r30, r24
    155c:	e3 54       	subi	r30, 0x43	; 67
    155e:	ff 4f       	sbci	r31, 0xFF	; 255
    1560:	80 81       	ld	r24, Z
    1562:	28 2f       	mov	r18, r24
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	02 2e       	mov	r0, r18
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <DIO_toggle+0x5c>
    156e:	88 0f       	add	r24, r24
    1570:	99 1f       	adc	r25, r25
    1572:	0a 94       	dec	r0
    1574:	e2 f7       	brpl	.-8      	; 0x156e <DIO_toggle+0x58>
    1576:	84 27       	eor	r24, r20
    1578:	8c 93       	st	X, r24
    157a:	b9 c0       	rjmp	.+370    	; 0x16ee <DIO_toggle+0x1d8>
	}//end if
	else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 8) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 16))	//if portb
    157c:	89 81       	ldd	r24, Y+1	; 0x01
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	c9 01       	movw	r24, r18
    1584:	88 0f       	add	r24, r24
    1586:	99 1f       	adc	r25, r25
    1588:	82 0f       	add	r24, r18
    158a:	93 1f       	adc	r25, r19
    158c:	fc 01       	movw	r30, r24
    158e:	e3 54       	subi	r30, 0x43	; 67
    1590:	ff 4f       	sbci	r31, 0xFF	; 255
    1592:	80 81       	ld	r24, Z
    1594:	88 30       	cpi	r24, 0x08	; 8
    1596:	80 f1       	brcs	.+96     	; 0x15f8 <DIO_toggle+0xe2>
    1598:	89 81       	ldd	r24, Y+1	; 0x01
    159a:	28 2f       	mov	r18, r24
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	c9 01       	movw	r24, r18
    15a0:	88 0f       	add	r24, r24
    15a2:	99 1f       	adc	r25, r25
    15a4:	82 0f       	add	r24, r18
    15a6:	93 1f       	adc	r25, r19
    15a8:	fc 01       	movw	r30, r24
    15aa:	e3 54       	subi	r30, 0x43	; 67
    15ac:	ff 4f       	sbci	r31, 0xFF	; 255
    15ae:	80 81       	ld	r24, Z
    15b0:	80 31       	cpi	r24, 0x10	; 16
    15b2:	10 f5       	brcc	.+68     	; 0x15f8 <DIO_toggle+0xe2>
	{
		TOGGLE_BIT(PORTB_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 8));
    15b4:	a8 e3       	ldi	r26, 0x38	; 56
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e8 e3       	ldi	r30, 0x38	; 56
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	48 2f       	mov	r20, r24
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	28 2f       	mov	r18, r24
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	c9 01       	movw	r24, r18
    15c8:	88 0f       	add	r24, r24
    15ca:	99 1f       	adc	r25, r25
    15cc:	82 0f       	add	r24, r18
    15ce:	93 1f       	adc	r25, r19
    15d0:	fc 01       	movw	r30, r24
    15d2:	e3 54       	subi	r30, 0x43	; 67
    15d4:	ff 4f       	sbci	r31, 0xFF	; 255
    15d6:	80 81       	ld	r24, Z
    15d8:	88 2f       	mov	r24, r24
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	9c 01       	movw	r18, r24
    15de:	28 50       	subi	r18, 0x08	; 8
    15e0:	30 40       	sbci	r19, 0x00	; 0
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	02 2e       	mov	r0, r18
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <DIO_toggle+0xd8>
    15ea:	88 0f       	add	r24, r24
    15ec:	99 1f       	adc	r25, r25
    15ee:	0a 94       	dec	r0
    15f0:	e2 f7       	brpl	.-8      	; 0x15ea <DIO_toggle+0xd4>
    15f2:	84 27       	eor	r24, r20
    15f4:	8c 93       	st	X, r24
    15f6:	7b c0       	rjmp	.+246    	; 0x16ee <DIO_toggle+0x1d8>
	}//end else if
	else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 16) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 24))	//if portc
    15f8:	89 81       	ldd	r24, Y+1	; 0x01
    15fa:	28 2f       	mov	r18, r24
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	c9 01       	movw	r24, r18
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	82 0f       	add	r24, r18
    1606:	93 1f       	adc	r25, r19
    1608:	fc 01       	movw	r30, r24
    160a:	e3 54       	subi	r30, 0x43	; 67
    160c:	ff 4f       	sbci	r31, 0xFF	; 255
    160e:	80 81       	ld	r24, Z
    1610:	80 31       	cpi	r24, 0x10	; 16
    1612:	80 f1       	brcs	.+96     	; 0x1674 <DIO_toggle+0x15e>
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	28 2f       	mov	r18, r24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	c9 01       	movw	r24, r18
    161c:	88 0f       	add	r24, r24
    161e:	99 1f       	adc	r25, r25
    1620:	82 0f       	add	r24, r18
    1622:	93 1f       	adc	r25, r19
    1624:	fc 01       	movw	r30, r24
    1626:	e3 54       	subi	r30, 0x43	; 67
    1628:	ff 4f       	sbci	r31, 0xFF	; 255
    162a:	80 81       	ld	r24, Z
    162c:	88 31       	cpi	r24, 0x18	; 24
    162e:	10 f5       	brcc	.+68     	; 0x1674 <DIO_toggle+0x15e>
	{
		TOGGLE_BIT(PORTC_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 16));
    1630:	a5 e3       	ldi	r26, 0x35	; 53
    1632:	b0 e0       	ldi	r27, 0x00	; 0
    1634:	e5 e3       	ldi	r30, 0x35	; 53
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	48 2f       	mov	r20, r24
    163c:	89 81       	ldd	r24, Y+1	; 0x01
    163e:	28 2f       	mov	r18, r24
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	c9 01       	movw	r24, r18
    1644:	88 0f       	add	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	82 0f       	add	r24, r18
    164a:	93 1f       	adc	r25, r19
    164c:	fc 01       	movw	r30, r24
    164e:	e3 54       	subi	r30, 0x43	; 67
    1650:	ff 4f       	sbci	r31, 0xFF	; 255
    1652:	80 81       	ld	r24, Z
    1654:	88 2f       	mov	r24, r24
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	9c 01       	movw	r18, r24
    165a:	20 51       	subi	r18, 0x10	; 16
    165c:	30 40       	sbci	r19, 0x00	; 0
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	02 2e       	mov	r0, r18
    1664:	02 c0       	rjmp	.+4      	; 0x166a <DIO_toggle+0x154>
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	0a 94       	dec	r0
    166c:	e2 f7       	brpl	.-8      	; 0x1666 <DIO_toggle+0x150>
    166e:	84 27       	eor	r24, r20
    1670:	8c 93       	st	X, r24
    1672:	3d c0       	rjmp	.+122    	; 0x16ee <DIO_toggle+0x1d8>
	}//end else if
	else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 24) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 32))	//if portd
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	c9 01       	movw	r24, r18
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	82 0f       	add	r24, r18
    1682:	93 1f       	adc	r25, r19
    1684:	fc 01       	movw	r30, r24
    1686:	e3 54       	subi	r30, 0x43	; 67
    1688:	ff 4f       	sbci	r31, 0xFF	; 255
    168a:	80 81       	ld	r24, Z
    168c:	88 31       	cpi	r24, 0x18	; 24
    168e:	78 f1       	brcs	.+94     	; 0x16ee <DIO_toggle+0x1d8>
    1690:	89 81       	ldd	r24, Y+1	; 0x01
    1692:	28 2f       	mov	r18, r24
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	c9 01       	movw	r24, r18
    1698:	88 0f       	add	r24, r24
    169a:	99 1f       	adc	r25, r25
    169c:	82 0f       	add	r24, r18
    169e:	93 1f       	adc	r25, r19
    16a0:	fc 01       	movw	r30, r24
    16a2:	e3 54       	subi	r30, 0x43	; 67
    16a4:	ff 4f       	sbci	r31, 0xFF	; 255
    16a6:	80 81       	ld	r24, Z
    16a8:	80 32       	cpi	r24, 0x20	; 32
    16aa:	08 f5       	brcc	.+66     	; 0x16ee <DIO_toggle+0x1d8>
	{
		TOGGLE_BIT(PORTD_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 24));
    16ac:	a2 e3       	ldi	r26, 0x32	; 50
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	e2 e3       	ldi	r30, 0x32	; 50
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	48 2f       	mov	r20, r24
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
    16ba:	28 2f       	mov	r18, r24
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	c9 01       	movw	r24, r18
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	82 0f       	add	r24, r18
    16c6:	93 1f       	adc	r25, r19
    16c8:	fc 01       	movw	r30, r24
    16ca:	e3 54       	subi	r30, 0x43	; 67
    16cc:	ff 4f       	sbci	r31, 0xFF	; 255
    16ce:	80 81       	ld	r24, Z
    16d0:	88 2f       	mov	r24, r24
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	9c 01       	movw	r18, r24
    16d6:	28 51       	subi	r18, 0x18	; 24
    16d8:	30 40       	sbci	r19, 0x00	; 0
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	02 2e       	mov	r0, r18
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <DIO_toggle+0x1d0>
    16e2:	88 0f       	add	r24, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	0a 94       	dec	r0
    16e8:	e2 f7       	brpl	.-8      	; 0x16e2 <DIO_toggle+0x1cc>
    16ea:	84 27       	eor	r24, r20
    16ec:	8c 93       	st	X, r24
	}//end else if

	return E_OK;
    16ee:	81 e0       	ldi	r24, 0x01	; 1
}//end DIO_toggle
    16f0:	0f 90       	pop	r0
    16f2:	cf 91       	pop	r28
    16f4:	df 91       	pop	r29
    16f6:	08 95       	ret

000016f8 <LED_Init>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to initialize the led
*************************************************************************************************/
enuErrorStatus_t	LED_Init(void)
{
    16f8:	df 93       	push	r29
    16fa:	cf 93       	push	r28
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
	return DIO_Init();
    1700:	0e 94 92 03 	call	0x724	; 0x724 <DIO_Init>
}//end LED_Init
    1704:	cf 91       	pop	r28
    1706:	df 91       	pop	r29
    1708:	08 95       	ret

0000170a <LED_ON>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to turn the led on
*************************************************************************************************/
enuErrorStatus_t	LED_ON(uint8_t u8_LedNum)
{
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	0f 92       	push	r0
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
    1714:	89 83       	std	Y+1, r24	; 0x01
	DIO_Write(u8_LedNum, HIGH);
    1716:	89 81       	ldd	r24, Y+1	; 0x01
    1718:	61 e0       	ldi	r22, 0x01	; 1
    171a:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_Write>
	return E_OK;
    171e:	81 e0       	ldi	r24, 0x01	; 1
}//end LED_ON
    1720:	0f 90       	pop	r0
    1722:	cf 91       	pop	r28
    1724:	df 91       	pop	r29
    1726:	08 95       	ret

00001728 <LED_OFF>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to turn the led off
*************************************************************************************************/
enuErrorStatus_t	LED_OFF(uint8_t u8_LedNum)
{
    1728:	df 93       	push	r29
    172a:	cf 93       	push	r28
    172c:	0f 92       	push	r0
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
    1732:	89 83       	std	Y+1, r24	; 0x01
	DIO_Write(u8_LedNum, LOW);
    1734:	89 81       	ldd	r24, Y+1	; 0x01
    1736:	60 e0       	ldi	r22, 0x00	; 0
    1738:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_Write>
	return E_OK;
    173c:	81 e0       	ldi	r24, 0x01	; 1

}//end LED_OFF
    173e:	0f 90       	pop	r0
    1740:	cf 91       	pop	r28
    1742:	df 91       	pop	r29
    1744:	08 95       	ret

00001746 <LED_toggle>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to toggle the led
*************************************************************************************************/
enuErrorStatus_t	LED_toggle(uint8_t u8_LedNum)
{
    1746:	df 93       	push	r29
    1748:	cf 93       	push	r28
    174a:	0f 92       	push	r0
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
    1750:	89 83       	std	Y+1, r24	; 0x01
	DIO_toggle(u8_LedNum);
    1752:	89 81       	ldd	r24, Y+1	; 0x01
    1754:	0e 94 8b 0a 	call	0x1516	; 0x1516 <DIO_toggle>
	return E_OK;
    1758:	81 e0       	ldi	r24, 0x01	; 1
}
    175a:	0f 90       	pop	r0
    175c:	cf 91       	pop	r28
    175e:	df 91       	pop	r29
    1760:	08 95       	ret

00001762 <DCMotor_Init>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to initialize the motor
*************************************************************************************************/
enuErrorStatus_t DCMotor_Init(void)
{
    1762:	df 93       	push	r29
    1764:	cf 93       	push	r28
    1766:	cd b7       	in	r28, 0x3d	; 61
    1768:	de b7       	in	r29, 0x3e	; 62
	//configure PB0,PB1(Motor pins) as output pins
	return DIO_Init();
    176a:	0e 94 92 03 	call	0x724	; 0x724 <DIO_Init>
}//end DCMotor_Init
    176e:	cf 91       	pop	r28
    1770:	df 91       	pop	r29
    1772:	08 95       	ret

00001774 <DCMotor_setDirection>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to set the motor direction
*************************************************************************************************/
enuErrorStatus_t DCMotor_setDirection(uint8_t u8_Motor, enuMotorDirection_t enuDirection)
{
    1774:	df 93       	push	r29
    1776:	cf 93       	push	r28
    1778:	00 d0       	rcall	.+0      	; 0x177a <DCMotor_setDirection+0x6>
    177a:	00 d0       	rcall	.+0      	; 0x177c <DCMotor_setDirection+0x8>
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62
    1780:	89 83       	std	Y+1, r24	; 0x01
    1782:	6a 83       	std	Y+2, r22	; 0x02
	switch(enuDirection)
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	28 2f       	mov	r18, r24
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	3c 83       	std	Y+4, r19	; 0x04
    178c:	2b 83       	std	Y+3, r18	; 0x03
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	9c 81       	ldd	r25, Y+4	; 0x04
    1792:	00 97       	sbiw	r24, 0x00	; 0
    1794:	31 f0       	breq	.+12     	; 0x17a2 <DCMotor_setDirection+0x2e>
    1796:	2b 81       	ldd	r18, Y+3	; 0x03
    1798:	3c 81       	ldd	r19, Y+4	; 0x04
    179a:	21 30       	cpi	r18, 0x01	; 1
    179c:	31 05       	cpc	r19, r1
    179e:	c9 f0       	breq	.+50     	; 0x17d2 <DCMotor_setDirection+0x5e>
    17a0:	2f c0       	rjmp	.+94     	; 0x1800 <DCMotor_setDirection+0x8c>
	{
	case FORWARD:

		if(u8_Motor == MOTOR1)
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
    17a4:	88 23       	and	r24, r24
    17a6:	49 f4       	brne	.+18     	; 0x17ba <DCMotor_setDirection+0x46>
		{
			DIO_Write(DC1_IN1, HIGH);
    17a8:	87 e0       	ldi	r24, 0x07	; 7
    17aa:	61 e0       	ldi	r22, 0x01	; 1
    17ac:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_Write>
			DIO_Write(DC1_IN2, LOW);
    17b0:	88 e0       	ldi	r24, 0x08	; 8
    17b2:	60 e0       	ldi	r22, 0x00	; 0
    17b4:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_Write>
    17b8:	23 c0       	rjmp	.+70     	; 0x1800 <DCMotor_setDirection+0x8c>
		}
		else if(u8_Motor == MOTOR2)
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	81 30       	cpi	r24, 0x01	; 1
    17be:	01 f5       	brne	.+64     	; 0x1800 <DCMotor_setDirection+0x8c>
		{
			DIO_Write(DC2_IN1, HIGH);
    17c0:	8a e0       	ldi	r24, 0x0A	; 10
    17c2:	61 e0       	ldi	r22, 0x01	; 1
    17c4:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_Write>
			DIO_Write(DC2_IN2, LOW);
    17c8:	8b e0       	ldi	r24, 0x0B	; 11
    17ca:	60 e0       	ldi	r22, 0x00	; 0
    17cc:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_Write>
    17d0:	17 c0       	rjmp	.+46     	; 0x1800 <DCMotor_setDirection+0x8c>
		}
		break;
	case BACKWARD:

		if(u8_Motor == MOTOR1)
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	88 23       	and	r24, r24
    17d6:	49 f4       	brne	.+18     	; 0x17ea <DCMotor_setDirection+0x76>
		{
			DIO_Write(DC1_IN1, LOW);
    17d8:	87 e0       	ldi	r24, 0x07	; 7
    17da:	60 e0       	ldi	r22, 0x00	; 0
    17dc:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_Write>
			DIO_Write(DC1_IN2, HIGH);
    17e0:	88 e0       	ldi	r24, 0x08	; 8
    17e2:	61 e0       	ldi	r22, 0x01	; 1
    17e4:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_Write>
    17e8:	0b c0       	rjmp	.+22     	; 0x1800 <DCMotor_setDirection+0x8c>
		}
		else if(u8_Motor == MOTOR2)
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	81 30       	cpi	r24, 0x01	; 1
    17ee:	41 f4       	brne	.+16     	; 0x1800 <DCMotor_setDirection+0x8c>
		{
			DIO_Write(DC2_IN1, LOW);
    17f0:	8a e0       	ldi	r24, 0x0A	; 10
    17f2:	60 e0       	ldi	r22, 0x00	; 0
    17f4:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_Write>
			DIO_Write(DC2_IN2, HIGH);
    17f8:	8b e0       	ldi	r24, 0x0B	; 11
    17fa:	61 e0       	ldi	r22, 0x01	; 1
    17fc:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_Write>
		}
		break;
	}//end switch
	return E_OK;
    1800:	81 e0       	ldi	r24, 0x01	; 1
}//end DCMotor_setDirection
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	0f 90       	pop	r0
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <DCMotor_setSpeed>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to set the motor speed
*************************************************************************************************/
enuErrorStatus_t DCMotor_setSpeed(uint8_t u8_Speed)
{
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	00 d0       	rcall	.+0      	; 0x1816 <DCMotor_setSpeed+0x6>
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
    181a:	89 83       	std	Y+1, r24	; 0x01
	if(u8_Speed > 100)
    181c:	89 81       	ldd	r24, Y+1	; 0x01
    181e:	85 36       	cpi	r24, 0x65	; 101
    1820:	10 f0       	brcs	.+4      	; 0x1826 <DCMotor_setSpeed+0x16>
	{
		return E_ERROR;
    1822:	1a 82       	std	Y+2, r1	; 0x02
    1824:	07 c0       	rjmp	.+14     	; 0x1834 <DCMotor_setSpeed+0x24>
	}//end if
	PWM_Init();
    1826:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <PWM_Init>
	PWM_Start(u8_Speed);
    182a:	89 81       	ldd	r24, Y+1	; 0x01
    182c:	0e 94 32 03 	call	0x664	; 0x664 <PWM_Start>

	return E_OK;
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	8a 83       	std	Y+2, r24	; 0x02
    1834:	8a 81       	ldd	r24, Y+2	; 0x02

}//end DCMotor_setSpeed
    1836:	0f 90       	pop	r0
    1838:	0f 90       	pop	r0
    183a:	cf 91       	pop	r28
    183c:	df 91       	pop	r29
    183e:	08 95       	ret

00001840 <DCMotor_stop>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to stop the motor
*************************************************************************************************/
enuErrorStatus_t DCMotor_stop(uint8_t u8_Motor)
{
    1840:	df 93       	push	r29
    1842:	cf 93       	push	r28
    1844:	0f 92       	push	r0
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
    184a:	89 83       	std	Y+1, r24	; 0x01
	if(u8_Motor == MOTOR1)
    184c:	89 81       	ldd	r24, Y+1	; 0x01
    184e:	88 23       	and	r24, r24
    1850:	49 f4       	brne	.+18     	; 0x1864 <DCMotor_stop+0x24>
	{
		DIO_Write(DC1_IN1, LOW);
    1852:	87 e0       	ldi	r24, 0x07	; 7
    1854:	60 e0       	ldi	r22, 0x00	; 0
    1856:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_Write>
		DIO_Write(DC1_IN2, LOW);
    185a:	88 e0       	ldi	r24, 0x08	; 8
    185c:	60 e0       	ldi	r22, 0x00	; 0
    185e:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_Write>
    1862:	0b c0       	rjmp	.+22     	; 0x187a <DCMotor_stop+0x3a>
	}
	else if(u8_Motor == MOTOR2)
    1864:	89 81       	ldd	r24, Y+1	; 0x01
    1866:	81 30       	cpi	r24, 0x01	; 1
    1868:	41 f4       	brne	.+16     	; 0x187a <DCMotor_stop+0x3a>
	{
		DIO_Write(DC2_IN1, LOW);
    186a:	8a e0       	ldi	r24, 0x0A	; 10
    186c:	60 e0       	ldi	r22, 0x00	; 0
    186e:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_Write>
		DIO_Write(DC2_IN2, LOW);
    1872:	8b e0       	ldi	r24, 0x0B	; 11
    1874:	60 e0       	ldi	r22, 0x00	; 0
    1876:	0e 94 a4 07 	call	0xf48	; 0xf48 <DIO_Write>
	}

	return E_OK;
    187a:	81 e0       	ldi	r24, 0x01	; 1
}//end DCMotor_stop
    187c:	0f 90       	pop	r0
    187e:	cf 91       	pop	r28
    1880:	df 91       	pop	r29
    1882:	08 95       	ret

00001884 <BTN_Init>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to initialize the button
*************************************************************************************************/
enuErrorStatus_t	BTN_Init(void)
{
    1884:	df 93       	push	r29
    1886:	cf 93       	push	r28
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
	return DIO_Init();
    188c:	0e 94 92 03 	call	0x724	; 0x724 <DIO_Init>
}//end BTN_Init
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	08 95       	ret

00001896 <BTN_getState>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to read the button status (pressed, not_pressed)
*************************************************************************************************/
enuErrorStatus_t	BTN_getState(uint8_t u8_BtnNum, enuBTNStatus_t* enuBTNStatus)
{
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
    189e:	e8 97       	sbiw	r28, 0x38	; 56
    18a0:	0f b6       	in	r0, 0x3f	; 63
    18a2:	f8 94       	cli
    18a4:	de bf       	out	0x3e, r29	; 62
    18a6:	0f be       	out	0x3f, r0	; 63
    18a8:	cd bf       	out	0x3d, r28	; 61
    18aa:	8a 87       	std	Y+10, r24	; 0x0a
    18ac:	7c 87       	std	Y+12, r23	; 0x0c
    18ae:	6b 87       	std	Y+11, r22	; 0x0b

	static uint8_t u8_HeldFlag=0;
	uint64_t u64_Counter=0;
    18b0:	19 82       	std	Y+1, r1	; 0x01
    18b2:	1a 82       	std	Y+2, r1	; 0x02
    18b4:	1b 82       	std	Y+3, r1	; 0x03
    18b6:	1c 82       	std	Y+4, r1	; 0x04
    18b8:	1d 82       	std	Y+5, r1	; 0x05
    18ba:	1e 82       	std	Y+6, r1	; 0x06
    18bc:	1f 82       	std	Y+7, r1	; 0x07
    18be:	18 86       	std	Y+8, r1	; 0x08

	if(enuBTNStatus == NULL_PTR)	return E_ERROR;
    18c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    18c2:	9c 85       	ldd	r25, Y+12	; 0x0c
    18c4:	00 97       	sbiw	r24, 0x00	; 0
    18c6:	11 f4       	brne	.+4      	; 0x18cc <BTN_getState+0x36>
    18c8:	1d 86       	std	Y+13, r1	; 0x0d
    18ca:	a3 c1       	rjmp	.+838    	; 0x1c12 <BTN_getState+0x37c>
	else
	{
		uint8_t u8_Data;

		DIO_Read(u8_BtnNum, &u8_Data);
    18cc:	9e 01       	movw	r18, r28
    18ce:	27 5f       	subi	r18, 0xF7	; 247
    18d0:	3f 4f       	sbci	r19, 0xFF	; 255
    18d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    18d4:	b9 01       	movw	r22, r18
    18d6:	0e 94 8c 09 	call	0x1318	; 0x1318 <DIO_Read>
    18da:	eb c0       	rjmp	.+470    	; 0x1ab2 <BTN_getState+0x21c>

		while(u8_Data == LOW && u64_Counter < 10000)
		{
			u64_Counter++;
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	8e 87       	std	Y+14, r24	; 0x0e
    18e0:	9a 81       	ldd	r25, Y+2	; 0x02
    18e2:	9f 87       	std	Y+15, r25	; 0x0f
    18e4:	8b 81       	ldd	r24, Y+3	; 0x03
    18e6:	88 8b       	std	Y+16, r24	; 0x10
    18e8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ea:	99 8b       	std	Y+17, r25	; 0x11
    18ec:	8d 81       	ldd	r24, Y+5	; 0x05
    18ee:	8a 8b       	std	Y+18, r24	; 0x12
    18f0:	9e 81       	ldd	r25, Y+6	; 0x06
    18f2:	9b 8b       	std	Y+19, r25	; 0x13
    18f4:	8f 81       	ldd	r24, Y+7	; 0x07
    18f6:	8c 8b       	std	Y+20, r24	; 0x14
    18f8:	98 85       	ldd	r25, Y+8	; 0x08
    18fa:	9d 8b       	std	Y+21, r25	; 0x15
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	8e 8b       	std	Y+22, r24	; 0x16
    1900:	1f 8a       	std	Y+23, r1	; 0x17
    1902:	18 8e       	std	Y+24, r1	; 0x18
    1904:	19 8e       	std	Y+25, r1	; 0x19
    1906:	1a 8e       	std	Y+26, r1	; 0x1a
    1908:	1b 8e       	std	Y+27, r1	; 0x1b
    190a:	1c 8e       	std	Y+28, r1	; 0x1c
    190c:	1d 8e       	std	Y+29, r1	; 0x1d
    190e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1910:	8e 89       	ldd	r24, Y+22	; 0x16
    1912:	98 0f       	add	r25, r24
    1914:	9e 8f       	std	Y+30, r25	; 0x1e
    1916:	91 e0       	ldi	r25, 0x01	; 1
    1918:	9e a3       	std	Y+38, r25	; 0x26
    191a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    191c:	9e 85       	ldd	r25, Y+14	; 0x0e
    191e:	89 17       	cp	r24, r25
    1920:	08 f0       	brcs	.+2      	; 0x1924 <BTN_getState+0x8e>
    1922:	1e a2       	std	Y+38, r1	; 0x26
    1924:	8f 85       	ldd	r24, Y+15	; 0x0f
    1926:	9f 89       	ldd	r25, Y+23	; 0x17
    1928:	89 0f       	add	r24, r25
    192a:	8f 8f       	std	Y+31, r24	; 0x1f
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	8f a3       	std	Y+39, r24	; 0x27
    1930:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1932:	8f 85       	ldd	r24, Y+15	; 0x0f
    1934:	98 17       	cp	r25, r24
    1936:	08 f0       	brcs	.+2      	; 0x193a <BTN_getState+0xa4>
    1938:	1f a2       	std	Y+39, r1	; 0x27
    193a:	9e a1       	ldd	r25, Y+38	; 0x26
    193c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    193e:	98 0f       	add	r25, r24
    1940:	98 a7       	std	Y+40, r25	; 0x28
    1942:	91 e0       	ldi	r25, 0x01	; 1
    1944:	99 a7       	std	Y+41, r25	; 0x29
    1946:	88 a5       	ldd	r24, Y+40	; 0x28
    1948:	9f 8d       	ldd	r25, Y+31	; 0x1f
    194a:	89 17       	cp	r24, r25
    194c:	08 f0       	brcs	.+2      	; 0x1950 <BTN_getState+0xba>
    194e:	19 a6       	std	Y+41, r1	; 0x29
    1950:	8f a1       	ldd	r24, Y+39	; 0x27
    1952:	99 a5       	ldd	r25, Y+41	; 0x29
    1954:	89 2b       	or	r24, r25
    1956:	8f a3       	std	Y+39, r24	; 0x27
    1958:	88 a5       	ldd	r24, Y+40	; 0x28
    195a:	8f 8f       	std	Y+31, r24	; 0x1f
    195c:	98 89       	ldd	r25, Y+16	; 0x10
    195e:	88 8d       	ldd	r24, Y+24	; 0x18
    1960:	98 0f       	add	r25, r24
    1962:	98 a3       	std	Y+32, r25	; 0x20
    1964:	91 e0       	ldi	r25, 0x01	; 1
    1966:	9a a7       	std	Y+42, r25	; 0x2a
    1968:	88 a1       	ldd	r24, Y+32	; 0x20
    196a:	98 89       	ldd	r25, Y+16	; 0x10
    196c:	89 17       	cp	r24, r25
    196e:	08 f0       	brcs	.+2      	; 0x1972 <BTN_getState+0xdc>
    1970:	1a a6       	std	Y+42, r1	; 0x2a
    1972:	8f a1       	ldd	r24, Y+39	; 0x27
    1974:	98 a1       	ldd	r25, Y+32	; 0x20
    1976:	89 0f       	add	r24, r25
    1978:	8b a7       	std	Y+43, r24	; 0x2b
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	8c a7       	std	Y+44, r24	; 0x2c
    197e:	9b a5       	ldd	r25, Y+43	; 0x2b
    1980:	88 a1       	ldd	r24, Y+32	; 0x20
    1982:	98 17       	cp	r25, r24
    1984:	08 f0       	brcs	.+2      	; 0x1988 <BTN_getState+0xf2>
    1986:	1c a6       	std	Y+44, r1	; 0x2c
    1988:	9a a5       	ldd	r25, Y+42	; 0x2a
    198a:	8c a5       	ldd	r24, Y+44	; 0x2c
    198c:	98 2b       	or	r25, r24
    198e:	9a a7       	std	Y+42, r25	; 0x2a
    1990:	9b a5       	ldd	r25, Y+43	; 0x2b
    1992:	98 a3       	std	Y+32, r25	; 0x20
    1994:	89 89       	ldd	r24, Y+17	; 0x11
    1996:	99 8d       	ldd	r25, Y+25	; 0x19
    1998:	89 0f       	add	r24, r25
    199a:	89 a3       	std	Y+33, r24	; 0x21
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	8d a7       	std	Y+45, r24	; 0x2d
    19a0:	99 a1       	ldd	r25, Y+33	; 0x21
    19a2:	89 89       	ldd	r24, Y+17	; 0x11
    19a4:	98 17       	cp	r25, r24
    19a6:	08 f0       	brcs	.+2      	; 0x19aa <BTN_getState+0x114>
    19a8:	1d a6       	std	Y+45, r1	; 0x2d
    19aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    19ac:	89 a1       	ldd	r24, Y+33	; 0x21
    19ae:	98 0f       	add	r25, r24
    19b0:	9e a7       	std	Y+46, r25	; 0x2e
    19b2:	91 e0       	ldi	r25, 0x01	; 1
    19b4:	9f a7       	std	Y+47, r25	; 0x2f
    19b6:	8e a5       	ldd	r24, Y+46	; 0x2e
    19b8:	99 a1       	ldd	r25, Y+33	; 0x21
    19ba:	89 17       	cp	r24, r25
    19bc:	08 f0       	brcs	.+2      	; 0x19c0 <BTN_getState+0x12a>
    19be:	1f a6       	std	Y+47, r1	; 0x2f
    19c0:	8d a5       	ldd	r24, Y+45	; 0x2d
    19c2:	9f a5       	ldd	r25, Y+47	; 0x2f
    19c4:	89 2b       	or	r24, r25
    19c6:	8d a7       	std	Y+45, r24	; 0x2d
    19c8:	8e a5       	ldd	r24, Y+46	; 0x2e
    19ca:	89 a3       	std	Y+33, r24	; 0x21
    19cc:	9a 89       	ldd	r25, Y+18	; 0x12
    19ce:	8a 8d       	ldd	r24, Y+26	; 0x1a
    19d0:	98 0f       	add	r25, r24
    19d2:	9a a3       	std	Y+34, r25	; 0x22
    19d4:	91 e0       	ldi	r25, 0x01	; 1
    19d6:	98 ab       	std	Y+48, r25	; 0x30
    19d8:	8a a1       	ldd	r24, Y+34	; 0x22
    19da:	9a 89       	ldd	r25, Y+18	; 0x12
    19dc:	89 17       	cp	r24, r25
    19de:	08 f0       	brcs	.+2      	; 0x19e2 <BTN_getState+0x14c>
    19e0:	18 aa       	std	Y+48, r1	; 0x30
    19e2:	8d a5       	ldd	r24, Y+45	; 0x2d
    19e4:	9a a1       	ldd	r25, Y+34	; 0x22
    19e6:	89 0f       	add	r24, r25
    19e8:	89 ab       	std	Y+49, r24	; 0x31
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	8a ab       	std	Y+50, r24	; 0x32
    19ee:	99 a9       	ldd	r25, Y+49	; 0x31
    19f0:	8a a1       	ldd	r24, Y+34	; 0x22
    19f2:	98 17       	cp	r25, r24
    19f4:	08 f0       	brcs	.+2      	; 0x19f8 <BTN_getState+0x162>
    19f6:	1a aa       	std	Y+50, r1	; 0x32
    19f8:	98 a9       	ldd	r25, Y+48	; 0x30
    19fa:	8a a9       	ldd	r24, Y+50	; 0x32
    19fc:	98 2b       	or	r25, r24
    19fe:	98 ab       	std	Y+48, r25	; 0x30
    1a00:	99 a9       	ldd	r25, Y+49	; 0x31
    1a02:	9a a3       	std	Y+34, r25	; 0x22
    1a04:	8b 89       	ldd	r24, Y+19	; 0x13
    1a06:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1a08:	89 0f       	add	r24, r25
    1a0a:	8b a3       	std	Y+35, r24	; 0x23
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	8b ab       	std	Y+51, r24	; 0x33
    1a10:	9b a1       	ldd	r25, Y+35	; 0x23
    1a12:	8b 89       	ldd	r24, Y+19	; 0x13
    1a14:	98 17       	cp	r25, r24
    1a16:	08 f0       	brcs	.+2      	; 0x1a1a <BTN_getState+0x184>
    1a18:	1b aa       	std	Y+51, r1	; 0x33
    1a1a:	98 a9       	ldd	r25, Y+48	; 0x30
    1a1c:	8b a1       	ldd	r24, Y+35	; 0x23
    1a1e:	98 0f       	add	r25, r24
    1a20:	9c ab       	std	Y+52, r25	; 0x34
    1a22:	91 e0       	ldi	r25, 0x01	; 1
    1a24:	9d ab       	std	Y+53, r25	; 0x35
    1a26:	8c a9       	ldd	r24, Y+52	; 0x34
    1a28:	9b a1       	ldd	r25, Y+35	; 0x23
    1a2a:	89 17       	cp	r24, r25
    1a2c:	08 f0       	brcs	.+2      	; 0x1a30 <BTN_getState+0x19a>
    1a2e:	1d aa       	std	Y+53, r1	; 0x35
    1a30:	8b a9       	ldd	r24, Y+51	; 0x33
    1a32:	9d a9       	ldd	r25, Y+53	; 0x35
    1a34:	89 2b       	or	r24, r25
    1a36:	8b ab       	std	Y+51, r24	; 0x33
    1a38:	8c a9       	ldd	r24, Y+52	; 0x34
    1a3a:	8b a3       	std	Y+35, r24	; 0x23
    1a3c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a3e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a40:	98 0f       	add	r25, r24
    1a42:	9c a3       	std	Y+36, r25	; 0x24
    1a44:	91 e0       	ldi	r25, 0x01	; 1
    1a46:	9e ab       	std	Y+54, r25	; 0x36
    1a48:	8c a1       	ldd	r24, Y+36	; 0x24
    1a4a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a4c:	89 17       	cp	r24, r25
    1a4e:	08 f0       	brcs	.+2      	; 0x1a52 <BTN_getState+0x1bc>
    1a50:	1e aa       	std	Y+54, r1	; 0x36
    1a52:	8b a9       	ldd	r24, Y+51	; 0x33
    1a54:	9c a1       	ldd	r25, Y+36	; 0x24
    1a56:	89 0f       	add	r24, r25
    1a58:	8f ab       	std	Y+55, r24	; 0x37
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	88 af       	std	Y+56, r24	; 0x38
    1a5e:	9f a9       	ldd	r25, Y+55	; 0x37
    1a60:	8c a1       	ldd	r24, Y+36	; 0x24
    1a62:	98 17       	cp	r25, r24
    1a64:	08 f0       	brcs	.+2      	; 0x1a68 <BTN_getState+0x1d2>
    1a66:	18 ae       	std	Y+56, r1	; 0x38
    1a68:	9e a9       	ldd	r25, Y+54	; 0x36
    1a6a:	88 ad       	ldd	r24, Y+56	; 0x38
    1a6c:	98 2b       	or	r25, r24
    1a6e:	9e ab       	std	Y+54, r25	; 0x36
    1a70:	9f a9       	ldd	r25, Y+55	; 0x37
    1a72:	9c a3       	std	Y+36, r25	; 0x24
    1a74:	8d 89       	ldd	r24, Y+21	; 0x15
    1a76:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1a78:	89 0f       	add	r24, r25
    1a7a:	8d a3       	std	Y+37, r24	; 0x25
    1a7c:	8e a9       	ldd	r24, Y+54	; 0x36
    1a7e:	9d a1       	ldd	r25, Y+37	; 0x25
    1a80:	89 0f       	add	r24, r25
    1a82:	8d a3       	std	Y+37, r24	; 0x25
    1a84:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a86:	89 83       	std	Y+1, r24	; 0x01
    1a88:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a8a:	9a 83       	std	Y+2, r25	; 0x02
    1a8c:	88 a1       	ldd	r24, Y+32	; 0x20
    1a8e:	8b 83       	std	Y+3, r24	; 0x03
    1a90:	99 a1       	ldd	r25, Y+33	; 0x21
    1a92:	9c 83       	std	Y+4, r25	; 0x04
    1a94:	8a a1       	ldd	r24, Y+34	; 0x22
    1a96:	8d 83       	std	Y+5, r24	; 0x05
    1a98:	9b a1       	ldd	r25, Y+35	; 0x23
    1a9a:	9e 83       	std	Y+6, r25	; 0x06
    1a9c:	8c a1       	ldd	r24, Y+36	; 0x24
    1a9e:	8f 83       	std	Y+7, r24	; 0x07
    1aa0:	9d a1       	ldd	r25, Y+37	; 0x25
    1aa2:	98 87       	std	Y+8, r25	; 0x08
			DIO_Read(u8_BtnNum, &u8_Data);
    1aa4:	9e 01       	movw	r18, r28
    1aa6:	27 5f       	subi	r18, 0xF7	; 247
    1aa8:	3f 4f       	sbci	r19, 0xFF	; 255
    1aaa:	8a 85       	ldd	r24, Y+10	; 0x0a
    1aac:	b9 01       	movw	r22, r18
    1aae:	0e 94 8c 09 	call	0x1318	; 0x1318 <DIO_Read>
	{
		uint8_t u8_Data;

		DIO_Read(u8_BtnNum, &u8_Data);

		while(u8_Data == LOW && u64_Counter < 10000)
    1ab2:	89 85       	ldd	r24, Y+9	; 0x09
    1ab4:	88 23       	and	r24, r24
    1ab6:	a9 f5       	brne	.+106    	; 0x1b22 <BTN_getState+0x28c>
    1ab8:	88 85       	ldd	r24, Y+8	; 0x08
    1aba:	88 23       	and	r24, r24
    1abc:	91 f5       	brne	.+100    	; 0x1b22 <BTN_getState+0x28c>
    1abe:	88 85       	ldd	r24, Y+8	; 0x08
    1ac0:	88 23       	and	r24, r24
    1ac2:	09 f0       	breq	.+2      	; 0x1ac6 <BTN_getState+0x230>
    1ac4:	0b cf       	rjmp	.-490    	; 0x18dc <BTN_getState+0x46>
    1ac6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ac8:	88 23       	and	r24, r24
    1aca:	59 f5       	brne	.+86     	; 0x1b22 <BTN_getState+0x28c>
    1acc:	8f 81       	ldd	r24, Y+7	; 0x07
    1ace:	88 23       	and	r24, r24
    1ad0:	09 f0       	breq	.+2      	; 0x1ad4 <BTN_getState+0x23e>
    1ad2:	04 cf       	rjmp	.-504    	; 0x18dc <BTN_getState+0x46>
    1ad4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ad6:	88 23       	and	r24, r24
    1ad8:	21 f5       	brne	.+72     	; 0x1b22 <BTN_getState+0x28c>
    1ada:	8e 81       	ldd	r24, Y+6	; 0x06
    1adc:	88 23       	and	r24, r24
    1ade:	09 f0       	breq	.+2      	; 0x1ae2 <BTN_getState+0x24c>
    1ae0:	fd ce       	rjmp	.-518    	; 0x18dc <BTN_getState+0x46>
    1ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae4:	88 23       	and	r24, r24
    1ae6:	e9 f4       	brne	.+58     	; 0x1b22 <BTN_getState+0x28c>
    1ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aea:	88 23       	and	r24, r24
    1aec:	09 f0       	breq	.+2      	; 0x1af0 <BTN_getState+0x25a>
    1aee:	f6 ce       	rjmp	.-532    	; 0x18dc <BTN_getState+0x46>
    1af0:	8c 81       	ldd	r24, Y+4	; 0x04
    1af2:	88 23       	and	r24, r24
    1af4:	b1 f4       	brne	.+44     	; 0x1b22 <BTN_getState+0x28c>
    1af6:	8c 81       	ldd	r24, Y+4	; 0x04
    1af8:	88 23       	and	r24, r24
    1afa:	09 f0       	breq	.+2      	; 0x1afe <BTN_getState+0x268>
    1afc:	ef ce       	rjmp	.-546    	; 0x18dc <BTN_getState+0x46>
    1afe:	8b 81       	ldd	r24, Y+3	; 0x03
    1b00:	88 23       	and	r24, r24
    1b02:	79 f4       	brne	.+30     	; 0x1b22 <BTN_getState+0x28c>
    1b04:	8b 81       	ldd	r24, Y+3	; 0x03
    1b06:	88 23       	and	r24, r24
    1b08:	09 f0       	breq	.+2      	; 0x1b0c <BTN_getState+0x276>
    1b0a:	e8 ce       	rjmp	.-560    	; 0x18dc <BTN_getState+0x46>
    1b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0e:	88 32       	cpi	r24, 0x28	; 40
    1b10:	40 f4       	brcc	.+16     	; 0x1b22 <BTN_getState+0x28c>
    1b12:	8a 81       	ldd	r24, Y+2	; 0x02
    1b14:	87 32       	cpi	r24, 0x27	; 39
    1b16:	09 f0       	breq	.+2      	; 0x1b1a <BTN_getState+0x284>
    1b18:	e1 ce       	rjmp	.-574    	; 0x18dc <BTN_getState+0x46>
    1b1a:	89 81       	ldd	r24, Y+1	; 0x01
    1b1c:	80 31       	cpi	r24, 0x10	; 16
    1b1e:	08 f4       	brcc	.+2      	; 0x1b22 <BTN_getState+0x28c>
    1b20:	dd ce       	rjmp	.-582    	; 0x18dc <BTN_getState+0x46>
		{
			u64_Counter++;
			DIO_Read(u8_BtnNum, &u8_Data);
		}
		if(u64_Counter == 10000)
    1b22:	89 81       	ldd	r24, Y+1	; 0x01
    1b24:	80 31       	cpi	r24, 0x10	; 16
    1b26:	e9 f4       	brne	.+58     	; 0x1b62 <BTN_getState+0x2cc>
    1b28:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2a:	87 32       	cpi	r24, 0x27	; 39
    1b2c:	d1 f4       	brne	.+52     	; 0x1b62 <BTN_getState+0x2cc>
    1b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b30:	88 23       	and	r24, r24
    1b32:	b9 f4       	brne	.+46     	; 0x1b62 <BTN_getState+0x2cc>
    1b34:	8c 81       	ldd	r24, Y+4	; 0x04
    1b36:	88 23       	and	r24, r24
    1b38:	a1 f4       	brne	.+40     	; 0x1b62 <BTN_getState+0x2cc>
    1b3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3c:	88 23       	and	r24, r24
    1b3e:	89 f4       	brne	.+34     	; 0x1b62 <BTN_getState+0x2cc>
    1b40:	8e 81       	ldd	r24, Y+6	; 0x06
    1b42:	88 23       	and	r24, r24
    1b44:	71 f4       	brne	.+28     	; 0x1b62 <BTN_getState+0x2cc>
    1b46:	8f 81       	ldd	r24, Y+7	; 0x07
    1b48:	88 23       	and	r24, r24
    1b4a:	59 f4       	brne	.+22     	; 0x1b62 <BTN_getState+0x2cc>
    1b4c:	88 85       	ldd	r24, Y+8	; 0x08
    1b4e:	88 23       	and	r24, r24
    1b50:	41 f4       	brne	.+16     	; 0x1b62 <BTN_getState+0x2cc>
		{
			*enuBTNStatus = HELD;
    1b52:	eb 85       	ldd	r30, Y+11	; 0x0b
    1b54:	fc 85       	ldd	r31, Y+12	; 0x0c
    1b56:	82 e0       	ldi	r24, 0x02	; 2
    1b58:	80 83       	st	Z, r24
			u8_HeldFlag = 1;
    1b5a:	81 e0       	ldi	r24, 0x01	; 1
    1b5c:	80 93 ec 00 	sts	0x00EC, r24
    1b60:	4e c0       	rjmp	.+156    	; 0x1bfe <BTN_getState+0x368>
		}
		else if(u64_Counter < 10000 && u64_Counter > 0 && u8_HeldFlag == 0)
    1b62:	88 85       	ldd	r24, Y+8	; 0x08
    1b64:	88 23       	and	r24, r24
    1b66:	09 f0       	breq	.+2      	; 0x1b6a <BTN_getState+0x2d4>
    1b68:	44 c0       	rjmp	.+136    	; 0x1bf2 <BTN_getState+0x35c>
    1b6a:	88 85       	ldd	r24, Y+8	; 0x08
    1b6c:	88 23       	and	r24, r24
    1b6e:	41 f5       	brne	.+80     	; 0x1bc0 <BTN_getState+0x32a>
    1b70:	8f 81       	ldd	r24, Y+7	; 0x07
    1b72:	88 23       	and	r24, r24
    1b74:	09 f0       	breq	.+2      	; 0x1b78 <BTN_getState+0x2e2>
    1b76:	3d c0       	rjmp	.+122    	; 0x1bf2 <BTN_getState+0x35c>
    1b78:	8f 81       	ldd	r24, Y+7	; 0x07
    1b7a:	88 23       	and	r24, r24
    1b7c:	09 f5       	brne	.+66     	; 0x1bc0 <BTN_getState+0x32a>
    1b7e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b80:	88 23       	and	r24, r24
    1b82:	b9 f5       	brne	.+110    	; 0x1bf2 <BTN_getState+0x35c>
    1b84:	8e 81       	ldd	r24, Y+6	; 0x06
    1b86:	88 23       	and	r24, r24
    1b88:	d9 f4       	brne	.+54     	; 0x1bc0 <BTN_getState+0x32a>
    1b8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b8c:	88 23       	and	r24, r24
    1b8e:	89 f5       	brne	.+98     	; 0x1bf2 <BTN_getState+0x35c>
    1b90:	8d 81       	ldd	r24, Y+5	; 0x05
    1b92:	88 23       	and	r24, r24
    1b94:	a9 f4       	brne	.+42     	; 0x1bc0 <BTN_getState+0x32a>
    1b96:	8c 81       	ldd	r24, Y+4	; 0x04
    1b98:	88 23       	and	r24, r24
    1b9a:	59 f5       	brne	.+86     	; 0x1bf2 <BTN_getState+0x35c>
    1b9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b9e:	88 23       	and	r24, r24
    1ba0:	79 f4       	brne	.+30     	; 0x1bc0 <BTN_getState+0x32a>
    1ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba4:	88 23       	and	r24, r24
    1ba6:	29 f5       	brne	.+74     	; 0x1bf2 <BTN_getState+0x35c>
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	88 23       	and	r24, r24
    1bac:	49 f4       	brne	.+18     	; 0x1bc0 <BTN_getState+0x32a>
    1bae:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb0:	88 32       	cpi	r24, 0x28	; 40
    1bb2:	f8 f4       	brcc	.+62     	; 0x1bf2 <BTN_getState+0x35c>
    1bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb6:	87 32       	cpi	r24, 0x27	; 39
    1bb8:	19 f4       	brne	.+6      	; 0x1bc0 <BTN_getState+0x32a>
    1bba:	89 81       	ldd	r24, Y+1	; 0x01
    1bbc:	80 31       	cpi	r24, 0x10	; 16
    1bbe:	c8 f4       	brcc	.+50     	; 0x1bf2 <BTN_getState+0x35c>
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
    1bc2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc4:	89 2b       	or	r24, r25
    1bc6:	9b 81       	ldd	r25, Y+3	; 0x03
    1bc8:	89 2b       	or	r24, r25
    1bca:	9c 81       	ldd	r25, Y+4	; 0x04
    1bcc:	89 2b       	or	r24, r25
    1bce:	9d 81       	ldd	r25, Y+5	; 0x05
    1bd0:	89 2b       	or	r24, r25
    1bd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd4:	89 2b       	or	r24, r25
    1bd6:	9f 81       	ldd	r25, Y+7	; 0x07
    1bd8:	89 2b       	or	r24, r25
    1bda:	98 85       	ldd	r25, Y+8	; 0x08
    1bdc:	89 2b       	or	r24, r25
    1bde:	88 23       	and	r24, r24
    1be0:	41 f0       	breq	.+16     	; 0x1bf2 <BTN_getState+0x35c>
    1be2:	80 91 ec 00 	lds	r24, 0x00EC
    1be6:	88 23       	and	r24, r24
    1be8:	21 f4       	brne	.+8      	; 0x1bf2 <BTN_getState+0x35c>
		{
			*enuBTNStatus = PRESSED;
    1bea:	eb 85       	ldd	r30, Y+11	; 0x0b
    1bec:	fc 85       	ldd	r31, Y+12	; 0x0c
    1bee:	10 82       	st	Z, r1
    1bf0:	06 c0       	rjmp	.+12     	; 0x1bfe <BTN_getState+0x368>
		}
		else
		{
			*enuBTNStatus = NOT_PRESSED;
    1bf2:	eb 85       	ldd	r30, Y+11	; 0x0b
    1bf4:	fc 85       	ldd	r31, Y+12	; 0x0c
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	80 83       	st	Z, r24
			u8_HeldFlag = 0;
    1bfa:	10 92 ec 00 	sts	0x00EC, r1
		}//end else if
		u64_Counter = 0;
    1bfe:	19 82       	std	Y+1, r1	; 0x01
    1c00:	1a 82       	std	Y+2, r1	; 0x02
    1c02:	1b 82       	std	Y+3, r1	; 0x03
    1c04:	1c 82       	std	Y+4, r1	; 0x04
    1c06:	1d 82       	std	Y+5, r1	; 0x05
    1c08:	1e 82       	std	Y+6, r1	; 0x06
    1c0a:	1f 82       	std	Y+7, r1	; 0x07
    1c0c:	18 86       	std	Y+8, r1	; 0x08

		return E_OK;
    1c0e:	81 e0       	ldi	r24, 0x01	; 1
    1c10:	8d 87       	std	Y+13, r24	; 0x0d
    1c12:	8d 85       	ldd	r24, Y+13	; 0x0d
	}//end else
}//end BTN_getState
    1c14:	e8 96       	adiw	r28, 0x38	; 56
    1c16:	0f b6       	in	r0, 0x3f	; 63
    1c18:	f8 94       	cli
    1c1a:	de bf       	out	0x3e, r29	; 62
    1c1c:	0f be       	out	0x3f, r0	; 63
    1c1e:	cd bf       	out	0x3d, r28	; 61
    1c20:	cf 91       	pop	r28
    1c22:	df 91       	pop	r29
    1c24:	08 95       	ret

00001c26 <TrafficLight_Init>:
* Parameters (out): None
* Return Value    : void
* Description     : A function to initialize the application
*************************************************************************************************/
void TrafficLight_Init(void)
{
    1c26:	df 93       	push	r29
    1c28:	cf 93       	push	r28
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
	DIO_Init();
    1c2e:	0e 94 92 03 	call	0x724	; 0x724 <DIO_Init>
	LED_Init();
    1c32:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <LED_Init>
	UART_Init(9600);
    1c36:	80 e8       	ldi	r24, 0x80	; 128
    1c38:	95 e2       	ldi	r25, 0x25	; 37
    1c3a:	0e 94 49 00 	call	0x92	; 0x92 <UART_Init>
}//end TrafficLight_Init
    1c3e:	cf 91       	pop	r28
    1c40:	df 91       	pop	r29
    1c42:	08 95       	ret

00001c44 <TrafficLight_Update>:
* Parameters (out): None
* Return Value    : void
* Description     : A function to update the application
*************************************************************************************************/
void TrafficLight_Update(void)
{
    1c44:	df 93       	push	r29
    1c46:	cf 93       	push	r28
    1c48:	00 d0       	rcall	.+0      	; 0x1c4a <TrafficLight_Update+0x6>
    1c4a:	00 d0       	rcall	.+0      	; 0x1c4c <TrafficLight_Update+0x8>
    1c4c:	0f 92       	push	r0
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62
	uint8_t* u8_String = NULL_PTR;
    1c52:	1b 82       	std	Y+3, r1	; 0x03
    1c54:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t i=0;
    1c56:	19 82       	std	Y+1, r1	; 0x01
	UART_ReceiveString(&u8_String);
    1c58:	ce 01       	movw	r24, r28
    1c5a:	02 96       	adiw	r24, 0x02	; 2
    1c5c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <UART_ReceiveString>

	if(strcmp(&u8_String, "start")==0)
    1c60:	ce 01       	movw	r24, r28
    1c62:	02 96       	adiw	r24, 0x02	; 2
    1c64:	26 e6       	ldi	r18, 0x66	; 102
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	b9 01       	movw	r22, r18
    1c6a:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <strcmp>
    1c6e:	00 97       	sbiw	r24, 0x00	; 0
    1c70:	19 f4       	brne	.+6      	; 0x1c78 <TrafficLight_Update+0x34>
	{
		i = 1;
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	89 83       	std	Y+1, r24	; 0x01
    1c76:	23 c0       	rjmp	.+70     	; 0x1cbe <TrafficLight_Update+0x7a>
	}//end if

	else if(strcmp(&u8_String, "wait")==0)
    1c78:	ce 01       	movw	r24, r28
    1c7a:	02 96       	adiw	r24, 0x02	; 2
    1c7c:	2c e6       	ldi	r18, 0x6C	; 108
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	b9 01       	movw	r22, r18
    1c82:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <strcmp>
    1c86:	00 97       	sbiw	r24, 0x00	; 0
    1c88:	19 f4       	brne	.+6      	; 0x1c90 <TrafficLight_Update+0x4c>
	{
		i = 2;
    1c8a:	82 e0       	ldi	r24, 0x02	; 2
    1c8c:	89 83       	std	Y+1, r24	; 0x01
    1c8e:	17 c0       	rjmp	.+46     	; 0x1cbe <TrafficLight_Update+0x7a>
	}//end else if
	else if(strcmp(&u8_String, "stop")==0)
    1c90:	ce 01       	movw	r24, r28
    1c92:	02 96       	adiw	r24, 0x02	; 2
    1c94:	21 e7       	ldi	r18, 0x71	; 113
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	b9 01       	movw	r22, r18
    1c9a:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <strcmp>
    1c9e:	00 97       	sbiw	r24, 0x00	; 0
    1ca0:	19 f4       	brne	.+6      	; 0x1ca8 <TrafficLight_Update+0x64>
	{
		i = 3;
    1ca2:	83 e0       	ldi	r24, 0x03	; 3
    1ca4:	89 83       	std	Y+1, r24	; 0x01
    1ca6:	0b c0       	rjmp	.+22     	; 0x1cbe <TrafficLight_Update+0x7a>
	}//end else if
	else if(strcmp(&u8_String, "AT")==0)
    1ca8:	ce 01       	movw	r24, r28
    1caa:	02 96       	adiw	r24, 0x02	; 2
    1cac:	26 e7       	ldi	r18, 0x76	; 118
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	b9 01       	movw	r22, r18
    1cb2:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <strcmp>
    1cb6:	00 97       	sbiw	r24, 0x00	; 0
    1cb8:	11 f4       	brne	.+4      	; 0x1cbe <TrafficLight_Update+0x7a>
	{
		i = 4;
    1cba:	84 e0       	ldi	r24, 0x04	; 4
    1cbc:	89 83       	std	Y+1, r24	; 0x01
	}//end else if

	switch(i)
    1cbe:	89 81       	ldd	r24, Y+1	; 0x01
    1cc0:	28 2f       	mov	r18, r24
    1cc2:	30 e0       	ldi	r19, 0x00	; 0
    1cc4:	3d 83       	std	Y+5, r19	; 0x05
    1cc6:	2c 83       	std	Y+4, r18	; 0x04
    1cc8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cca:	9d 81       	ldd	r25, Y+5	; 0x05
    1ccc:	82 30       	cpi	r24, 0x02	; 2
    1cce:	91 05       	cpc	r25, r1
    1cd0:	31 f1       	breq	.+76     	; 0x1d1e <TrafficLight_Update+0xda>
    1cd2:	2c 81       	ldd	r18, Y+4	; 0x04
    1cd4:	3d 81       	ldd	r19, Y+5	; 0x05
    1cd6:	23 30       	cpi	r18, 0x03	; 3
    1cd8:	31 05       	cpc	r19, r1
    1cda:	34 f4       	brge	.+12     	; 0x1ce8 <TrafficLight_Update+0xa4>
    1cdc:	8c 81       	ldd	r24, Y+4	; 0x04
    1cde:	9d 81       	ldd	r25, Y+5	; 0x05
    1ce0:	81 30       	cpi	r24, 0x01	; 1
    1ce2:	91 05       	cpc	r25, r1
    1ce4:	61 f0       	breq	.+24     	; 0x1cfe <TrafficLight_Update+0xba>
    1ce6:	42 c0       	rjmp	.+132    	; 0x1d6c <TrafficLight_Update+0x128>
    1ce8:	2c 81       	ldd	r18, Y+4	; 0x04
    1cea:	3d 81       	ldd	r19, Y+5	; 0x05
    1cec:	23 30       	cpi	r18, 0x03	; 3
    1cee:	31 05       	cpc	r19, r1
    1cf0:	31 f1       	breq	.+76     	; 0x1d3e <TrafficLight_Update+0xfa>
    1cf2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cf4:	9d 81       	ldd	r25, Y+5	; 0x05
    1cf6:	84 30       	cpi	r24, 0x04	; 4
    1cf8:	91 05       	cpc	r25, r1
    1cfa:	89 f1       	breq	.+98     	; 0x1d5e <TrafficLight_Update+0x11a>
    1cfc:	37 c0       	rjmp	.+110    	; 0x1d6c <TrafficLight_Update+0x128>
	{
	case 1:
		u8_String = NULL_PTR;
    1cfe:	1b 82       	std	Y+3, r1	; 0x03
    1d00:	1a 82       	std	Y+2, r1	; 0x02
		LED_ON(LED0);
    1d02:	86 e0       	ldi	r24, 0x06	; 6
    1d04:	0e 94 85 0b 	call	0x170a	; 0x170a <LED_ON>
		LED_OFF(LED1);
    1d08:	84 e0       	ldi	r24, 0x04	; 4
    1d0a:	0e 94 94 0b 	call	0x1728	; 0x1728 <LED_OFF>
		LED_OFF(LED2);
    1d0e:	85 e0       	ldi	r24, 0x05	; 5
    1d10:	0e 94 94 0b 	call	0x1728	; 0x1728 <LED_OFF>
		UART_SendString((uint8_t*)"Green LED is on");
    1d14:	89 e7       	ldi	r24, 0x79	; 121
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	0e 94 36 01 	call	0x26c	; 0x26c <UART_SendString>
    1d1c:	36 c0       	rjmp	.+108    	; 0x1d8a <TrafficLight_Update+0x146>
		break;
	case 2:
		u8_String = NULL_PTR;
    1d1e:	1b 82       	std	Y+3, r1	; 0x03
    1d20:	1a 82       	std	Y+2, r1	; 0x02
		LED_OFF(LED0);
    1d22:	86 e0       	ldi	r24, 0x06	; 6
    1d24:	0e 94 94 0b 	call	0x1728	; 0x1728 <LED_OFF>
		LED_OFF(LED1);
    1d28:	84 e0       	ldi	r24, 0x04	; 4
    1d2a:	0e 94 94 0b 	call	0x1728	; 0x1728 <LED_OFF>
		LED_ON(LED2);
    1d2e:	85 e0       	ldi	r24, 0x05	; 5
    1d30:	0e 94 85 0b 	call	0x170a	; 0x170a <LED_ON>
		UART_SendString((uint8_t*)"Yellow LED is on");
    1d34:	89 e8       	ldi	r24, 0x89	; 137
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	0e 94 36 01 	call	0x26c	; 0x26c <UART_SendString>
    1d3c:	26 c0       	rjmp	.+76     	; 0x1d8a <TrafficLight_Update+0x146>
		break;
	case 3:
		u8_String = NULL_PTR;
    1d3e:	1b 82       	std	Y+3, r1	; 0x03
    1d40:	1a 82       	std	Y+2, r1	; 0x02
		LED_OFF(LED0);
    1d42:	86 e0       	ldi	r24, 0x06	; 6
    1d44:	0e 94 94 0b 	call	0x1728	; 0x1728 <LED_OFF>
		LED_ON(LED1);
    1d48:	84 e0       	ldi	r24, 0x04	; 4
    1d4a:	0e 94 85 0b 	call	0x170a	; 0x170a <LED_ON>
		LED_OFF(LED2);
    1d4e:	85 e0       	ldi	r24, 0x05	; 5
    1d50:	0e 94 94 0b 	call	0x1728	; 0x1728 <LED_OFF>
		UART_SendString((uint8_t*)"Red LED is on");
    1d54:	8a e9       	ldi	r24, 0x9A	; 154
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	0e 94 36 01 	call	0x26c	; 0x26c <UART_SendString>
    1d5c:	16 c0       	rjmp	.+44     	; 0x1d8a <TrafficLight_Update+0x146>
		break;
	case 4:
		u8_String = NULL_PTR;
    1d5e:	1b 82       	std	Y+3, r1	; 0x03
    1d60:	1a 82       	std	Y+2, r1	; 0x02
		UART_SendString((uint8_t*)"OK");
    1d62:	88 ea       	ldi	r24, 0xA8	; 168
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	0e 94 36 01 	call	0x26c	; 0x26c <UART_SendString>
    1d6a:	0f c0       	rjmp	.+30     	; 0x1d8a <TrafficLight_Update+0x146>
		break;
	default:
		u8_String = NULL_PTR;
    1d6c:	1b 82       	std	Y+3, r1	; 0x03
    1d6e:	1a 82       	std	Y+2, r1	; 0x02
		LED_OFF(LED0);
    1d70:	86 e0       	ldi	r24, 0x06	; 6
    1d72:	0e 94 94 0b 	call	0x1728	; 0x1728 <LED_OFF>
		LED_OFF(LED1);
    1d76:	84 e0       	ldi	r24, 0x04	; 4
    1d78:	0e 94 94 0b 	call	0x1728	; 0x1728 <LED_OFF>
		LED_OFF(LED2);
    1d7c:	85 e0       	ldi	r24, 0x05	; 5
    1d7e:	0e 94 94 0b 	call	0x1728	; 0x1728 <LED_OFF>
		UART_SendString((uint8_t*)"Wrong input");
    1d82:	8b ea       	ldi	r24, 0xAB	; 171
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	0e 94 36 01 	call	0x26c	; 0x26c <UART_SendString>
		break;
	}//end switch
}//end TrafficLight_Update
    1d8a:	0f 90       	pop	r0
    1d8c:	0f 90       	pop	r0
    1d8e:	0f 90       	pop	r0
    1d90:	0f 90       	pop	r0
    1d92:	0f 90       	pop	r0
    1d94:	cf 91       	pop	r28
    1d96:	df 91       	pop	r29
    1d98:	08 95       	ret

00001d9a <App_Init>:
* Parameters (out): None
* Return Value    : void
* Description     : A function to initialize the application
*************************************************************************************************/
void App_Init(void)
{
    1d9a:	df 93       	push	r29
    1d9c:	cf 93       	push	r28
    1d9e:	cd b7       	in	r28, 0x3d	; 61
    1da0:	de b7       	in	r29, 0x3e	; 62
	DIO_Init();
    1da2:	0e 94 92 03 	call	0x724	; 0x724 <DIO_Init>
	PWM_Init();
    1da6:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <PWM_Init>
	BTN_Init();
    1daa:	0e 94 42 0c 	call	0x1884	; 0x1884 <BTN_Init>
}//end App_Init
    1dae:	cf 91       	pop	r28
    1db0:	df 91       	pop	r29
    1db2:	08 95       	ret

00001db4 <App_Update>:
* Parameters (out): None
* Return Value    : void
* Description     : A function to update the application
*************************************************************************************************/
void App_Update(void)
{
    1db4:	df 93       	push	r29
    1db6:	cf 93       	push	r28
    1db8:	00 d0       	rcall	.+0      	; 0x1dba <App_Update+0x6>
    1dba:	00 d0       	rcall	.+0      	; 0x1dbc <App_Update+0x8>
    1dbc:	00 d0       	rcall	.+0      	; 0x1dbe <App_Update+0xa>
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
	enuBTNStatus_t enuButton3State;
	static enuCarSpeed_t enuCarSpeed = SPEED_0;
	static uint8_t u8DutyCycle = 0;


	BTN_getState(BTN0, &enuButton0State);
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	9e 01       	movw	r18, r28
    1dc6:	2f 5f       	subi	r18, 0xFF	; 255
    1dc8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dca:	b9 01       	movw	r22, r18
    1dcc:	0e 94 4b 0c 	call	0x1896	; 0x1896 <BTN_getState>
	BTN_getState(BTN1, &enuButton1State);
    1dd0:	9e 01       	movw	r18, r28
    1dd2:	2e 5f       	subi	r18, 0xFE	; 254
    1dd4:	3f 4f       	sbci	r19, 0xFF	; 255
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	b9 01       	movw	r22, r18
    1dda:	0e 94 4b 0c 	call	0x1896	; 0x1896 <BTN_getState>
	BTN_getState(BTN2, &enuButton2State);
    1dde:	9e 01       	movw	r18, r28
    1de0:	2d 5f       	subi	r18, 0xFD	; 253
    1de2:	3f 4f       	sbci	r19, 0xFF	; 255
    1de4:	82 e0       	ldi	r24, 0x02	; 2
    1de6:	b9 01       	movw	r22, r18
    1de8:	0e 94 4b 0c 	call	0x1896	; 0x1896 <BTN_getState>
	BTN_getState(BTN3, &enuButton3State);
    1dec:	9e 01       	movw	r18, r28
    1dee:	2c 5f       	subi	r18, 0xFC	; 252
    1df0:	3f 4f       	sbci	r19, 0xFF	; 255
    1df2:	83 e0       	ldi	r24, 0x03	; 3
    1df4:	b9 01       	movw	r22, r18
    1df6:	0e 94 4b 0c 	call	0x1896	; 0x1896 <BTN_getState>
	/* Forward Direction */
	if(enuButton0State == HELD)
    1dfa:	89 81       	ldd	r24, Y+1	; 0x01
    1dfc:	82 30       	cpi	r24, 0x02	; 2
    1dfe:	89 f4       	brne	.+34     	; 0x1e22 <App_Update+0x6e>
	{
		DCMotor_setDirection(MOTOR1, genuMotorDirection);
    1e00:	90 91 ee 00 	lds	r25, 0x00EE
    1e04:	80 e0       	ldi	r24, 0x00	; 0
    1e06:	69 2f       	mov	r22, r25
    1e08:	0e 94 ba 0b 	call	0x1774	; 0x1774 <DCMotor_setDirection>
		DCMotor_setDirection(MOTOR2, genuMotorDirection);
    1e0c:	90 91 ee 00 	lds	r25, 0x00EE
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	69 2f       	mov	r22, r25
    1e14:	0e 94 ba 0b 	call	0x1774	; 0x1774 <DCMotor_setDirection>
		DCMotor_setSpeed(u8DutyCycle);
    1e18:	80 91 ed 00 	lds	r24, 0x00ED
    1e1c:	0e 94 08 0c 	call	0x1810	; 0x1810 <DCMotor_setSpeed>
    1e20:	7b c0       	rjmp	.+246    	; 0x1f18 <App_Update+0x164>
	}
	/* Turn Right */
	else if(enuButton1State == HELD)
    1e22:	8a 81       	ldd	r24, Y+2	; 0x02
    1e24:	82 30       	cpi	r24, 0x02	; 2
    1e26:	61 f4       	brne	.+24     	; 0x1e40 <App_Update+0x8c>
	{
		DCMotor_setDirection(MOTOR1, FORWARD);
    1e28:	80 e0       	ldi	r24, 0x00	; 0
    1e2a:	60 e0       	ldi	r22, 0x00	; 0
    1e2c:	0e 94 ba 0b 	call	0x1774	; 0x1774 <DCMotor_setDirection>
		DCMotor_setDirection(MOTOR2, BACKWARD);
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	61 e0       	ldi	r22, 0x01	; 1
    1e34:	0e 94 ba 0b 	call	0x1774	; 0x1774 <DCMotor_setDirection>
		DCMotor_setSpeed(30);
    1e38:	8e e1       	ldi	r24, 0x1E	; 30
    1e3a:	0e 94 08 0c 	call	0x1810	; 0x1810 <DCMotor_setSpeed>
    1e3e:	6c c0       	rjmp	.+216    	; 0x1f18 <App_Update+0x164>
	}
	/*Turn Left */
	else if(enuButton2State == HELD)
    1e40:	8b 81       	ldd	r24, Y+3	; 0x03
    1e42:	82 30       	cpi	r24, 0x02	; 2
    1e44:	61 f4       	brne	.+24     	; 0x1e5e <App_Update+0xaa>
	{
		DCMotor_setDirection(MOTOR2, FORWARD);
    1e46:	81 e0       	ldi	r24, 0x01	; 1
    1e48:	60 e0       	ldi	r22, 0x00	; 0
    1e4a:	0e 94 ba 0b 	call	0x1774	; 0x1774 <DCMotor_setDirection>
		DCMotor_setDirection(MOTOR1, BACKWARD);
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	61 e0       	ldi	r22, 0x01	; 1
    1e52:	0e 94 ba 0b 	call	0x1774	; 0x1774 <DCMotor_setDirection>
		DCMotor_setSpeed(30);
    1e56:	8e e1       	ldi	r24, 0x1E	; 30
    1e58:	0e 94 08 0c 	call	0x1810	; 0x1810 <DCMotor_setSpeed>
    1e5c:	5d c0       	rjmp	.+186    	; 0x1f18 <App_Update+0x164>
	}
	/* Change Speed and Direction */
	else if(enuButton3State == PRESSED)
    1e5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e60:	88 23       	and	r24, r24
    1e62:	09 f0       	breq	.+2      	; 0x1e66 <App_Update+0xb2>
    1e64:	57 c0       	rjmp	.+174    	; 0x1f14 <App_Update+0x160>
	{
		DCMotor_stop(MOTOR1);
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	0e 94 20 0c 	call	0x1840	; 0x1840 <DCMotor_stop>
		DCMotor_stop(MOTOR2);
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	0e 94 20 0c 	call	0x1840	; 0x1840 <DCMotor_stop>
		switch(enuCarSpeed)
    1e72:	80 91 b7 00 	lds	r24, 0x00B7
    1e76:	28 2f       	mov	r18, r24
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	3e 83       	std	Y+6, r19	; 0x06
    1e7c:	2d 83       	std	Y+5, r18	; 0x05
    1e7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e80:	9e 81       	ldd	r25, Y+6	; 0x06
    1e82:	82 30       	cpi	r24, 0x02	; 2
    1e84:	91 05       	cpc	r25, r1
    1e86:	59 f1       	breq	.+86     	; 0x1ede <App_Update+0x12a>
    1e88:	2d 81       	ldd	r18, Y+5	; 0x05
    1e8a:	3e 81       	ldd	r19, Y+6	; 0x06
    1e8c:	23 30       	cpi	r18, 0x03	; 3
    1e8e:	31 05       	cpc	r19, r1
    1e90:	54 f4       	brge	.+20     	; 0x1ea6 <App_Update+0xf2>
    1e92:	8d 81       	ldd	r24, Y+5	; 0x05
    1e94:	9e 81       	ldd	r25, Y+6	; 0x06
    1e96:	00 97       	sbiw	r24, 0x00	; 0
    1e98:	89 f0       	breq	.+34     	; 0x1ebc <App_Update+0x108>
    1e9a:	2d 81       	ldd	r18, Y+5	; 0x05
    1e9c:	3e 81       	ldd	r19, Y+6	; 0x06
    1e9e:	21 30       	cpi	r18, 0x01	; 1
    1ea0:	31 05       	cpc	r19, r1
    1ea2:	a1 f0       	breq	.+40     	; 0x1ecc <App_Update+0x118>
    1ea4:	39 c0       	rjmp	.+114    	; 0x1f18 <App_Update+0x164>
    1ea6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eaa:	83 30       	cpi	r24, 0x03	; 3
    1eac:	91 05       	cpc	r25, r1
    1eae:	01 f1       	breq	.+64     	; 0x1ef0 <App_Update+0x13c>
    1eb0:	2d 81       	ldd	r18, Y+5	; 0x05
    1eb2:	3e 81       	ldd	r19, Y+6	; 0x06
    1eb4:	24 30       	cpi	r18, 0x04	; 4
    1eb6:	31 05       	cpc	r19, r1
    1eb8:	21 f1       	breq	.+72     	; 0x1f02 <App_Update+0x14e>
    1eba:	2e c0       	rjmp	.+92     	; 0x1f18 <App_Update+0x164>
		{
			case SPEED_NEG_30:
			{
				u8DutyCycle = 0;
    1ebc:	10 92 ed 00 	sts	0x00ED, r1
				enuCarSpeed = SPEED_0;
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	80 93 b7 00 	sts	0x00B7, r24
				genuMotorDirection = FORWARD;
    1ec6:	10 92 ee 00 	sts	0x00EE, r1
    1eca:	26 c0       	rjmp	.+76     	; 0x1f18 <App_Update+0x164>
			}
			break;
			case SPEED_0:
			{
				u8DutyCycle = 30;
    1ecc:	8e e1       	ldi	r24, 0x1E	; 30
    1ece:	80 93 ed 00 	sts	0x00ED, r24
				enuCarSpeed = SPEED_30;
    1ed2:	82 e0       	ldi	r24, 0x02	; 2
    1ed4:	80 93 b7 00 	sts	0x00B7, r24
				genuMotorDirection = FORWARD;
    1ed8:	10 92 ee 00 	sts	0x00EE, r1
    1edc:	1d c0       	rjmp	.+58     	; 0x1f18 <App_Update+0x164>
			}
			break;
			case SPEED_30:
			{
				u8DutyCycle = 60;
    1ede:	8c e3       	ldi	r24, 0x3C	; 60
    1ee0:	80 93 ed 00 	sts	0x00ED, r24
				enuCarSpeed = SPEED_60;
    1ee4:	83 e0       	ldi	r24, 0x03	; 3
    1ee6:	80 93 b7 00 	sts	0x00B7, r24
				genuMotorDirection = FORWARD;
    1eea:	10 92 ee 00 	sts	0x00EE, r1
    1eee:	14 c0       	rjmp	.+40     	; 0x1f18 <App_Update+0x164>
			}
			break;
			case SPEED_60:
			{
				u8DutyCycle = 90;
    1ef0:	8a e5       	ldi	r24, 0x5A	; 90
    1ef2:	80 93 ed 00 	sts	0x00ED, r24
				enuCarSpeed = SPEED_90;
    1ef6:	84 e0       	ldi	r24, 0x04	; 4
    1ef8:	80 93 b7 00 	sts	0x00B7, r24
				genuMotorDirection = FORWARD;
    1efc:	10 92 ee 00 	sts	0x00EE, r1
    1f00:	0b c0       	rjmp	.+22     	; 0x1f18 <App_Update+0x164>
			}
			break;
			case SPEED_90:
			{
				/* Toggling the direction of car movement */
				u8DutyCycle = 30;
    1f02:	8e e1       	ldi	r24, 0x1E	; 30
    1f04:	80 93 ed 00 	sts	0x00ED, r24
				enuCarSpeed = SPEED_NEG_30;
    1f08:	10 92 b7 00 	sts	0x00B7, r1
				genuMotorDirection = BACKWARD;
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	80 93 ee 00 	sts	0x00EE, r24
    1f12:	02 c0       	rjmp	.+4      	; 0x1f18 <App_Update+0x164>
			break;
		}
	}
	else
	{
		PWM_Stop();
    1f14:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <PWM_Stop>
	}
}
    1f18:	26 96       	adiw	r28, 0x06	; 6
    1f1a:	0f b6       	in	r0, 0x3f	; 63
    1f1c:	f8 94       	cli
    1f1e:	de bf       	out	0x3e, r29	; 62
    1f20:	0f be       	out	0x3f, r0	; 63
    1f22:	cd bf       	out	0x3d, r28	; 61
    1f24:	cf 91       	pop	r28
    1f26:	df 91       	pop	r29
    1f28:	08 95       	ret

00001f2a <main>:
#include "Traffic_Light_System/TrafficLight.h"
#include <string.h>

/*- MAIN FUNCTION----------------------------------------------*/
int main(void)
{
    1f2a:	df 93       	push	r29
    1f2c:	cf 93       	push	r28
    1f2e:	00 d0       	rcall	.+0      	; 0x1f30 <main+0x6>
    1f30:	0f 92       	push	r0
    1f32:	cd b7       	in	r28, 0x3d	; 61
    1f34:	de b7       	in	r29, 0x3e	; 62
	uint8_t* u8_String;
	uint8_t i =0;
    1f36:	19 82       	std	Y+1, r1	; 0x01
	TrafficLight_Init();
    1f38:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <TrafficLight_Init>
////		i = strcmp(&u8_String, "start");
//		if(strcmp(&u8_String, "start")==0)
//		{
//			LED_ON(LED0);
//		}
		TrafficLight_Update();
    1f3c:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <TrafficLight_Update>
    1f40:	fd cf       	rjmp	.-6      	; 0x1f3c <main+0x12>

00001f42 <__divmodhi4>:
    1f42:	97 fb       	bst	r25, 7
    1f44:	09 2e       	mov	r0, r25
    1f46:	07 26       	eor	r0, r23
    1f48:	0a d0       	rcall	.+20     	; 0x1f5e <__divmodhi4_neg1>
    1f4a:	77 fd       	sbrc	r23, 7
    1f4c:	04 d0       	rcall	.+8      	; 0x1f56 <__divmodhi4_neg2>
    1f4e:	0c d0       	rcall	.+24     	; 0x1f68 <__udivmodhi4>
    1f50:	06 d0       	rcall	.+12     	; 0x1f5e <__divmodhi4_neg1>
    1f52:	00 20       	and	r0, r0
    1f54:	1a f4       	brpl	.+6      	; 0x1f5c <__divmodhi4_exit>

00001f56 <__divmodhi4_neg2>:
    1f56:	70 95       	com	r23
    1f58:	61 95       	neg	r22
    1f5a:	7f 4f       	sbci	r23, 0xFF	; 255

00001f5c <__divmodhi4_exit>:
    1f5c:	08 95       	ret

00001f5e <__divmodhi4_neg1>:
    1f5e:	f6 f7       	brtc	.-4      	; 0x1f5c <__divmodhi4_exit>
    1f60:	90 95       	com	r25
    1f62:	81 95       	neg	r24
    1f64:	9f 4f       	sbci	r25, 0xFF	; 255
    1f66:	08 95       	ret

00001f68 <__udivmodhi4>:
    1f68:	aa 1b       	sub	r26, r26
    1f6a:	bb 1b       	sub	r27, r27
    1f6c:	51 e1       	ldi	r21, 0x11	; 17
    1f6e:	07 c0       	rjmp	.+14     	; 0x1f7e <__udivmodhi4_ep>

00001f70 <__udivmodhi4_loop>:
    1f70:	aa 1f       	adc	r26, r26
    1f72:	bb 1f       	adc	r27, r27
    1f74:	a6 17       	cp	r26, r22
    1f76:	b7 07       	cpc	r27, r23
    1f78:	10 f0       	brcs	.+4      	; 0x1f7e <__udivmodhi4_ep>
    1f7a:	a6 1b       	sub	r26, r22
    1f7c:	b7 0b       	sbc	r27, r23

00001f7e <__udivmodhi4_ep>:
    1f7e:	88 1f       	adc	r24, r24
    1f80:	99 1f       	adc	r25, r25
    1f82:	5a 95       	dec	r21
    1f84:	a9 f7       	brne	.-22     	; 0x1f70 <__udivmodhi4_loop>
    1f86:	80 95       	com	r24
    1f88:	90 95       	com	r25
    1f8a:	bc 01       	movw	r22, r24
    1f8c:	cd 01       	movw	r24, r26
    1f8e:	08 95       	ret

00001f90 <strcmp>:
    1f90:	fb 01       	movw	r30, r22
    1f92:	dc 01       	movw	r26, r24
    1f94:	8d 91       	ld	r24, X+
    1f96:	01 90       	ld	r0, Z+
    1f98:	80 19       	sub	r24, r0
    1f9a:	01 10       	cpse	r0, r1
    1f9c:	d9 f3       	breq	.-10     	; 0x1f94 <strcmp+0x4>
    1f9e:	99 0b       	sbc	r25, r25
    1fa0:	08 95       	ret

00001fa2 <_exit>:
    1fa2:	f8 94       	cli

00001fa4 <__stop_program>:
    1fa4:	ff cf       	rjmp	.-2      	; 0x1fa4 <__stop_program>
