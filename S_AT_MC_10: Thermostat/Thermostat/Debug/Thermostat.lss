
Thermostat.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003fc0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000090  00800060  00003fc0  00004054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000f0  008000f0  000040e4  2**0
                  ALLOC
  3 .stab         00003dc8  00000000  00000000  000040e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002476  00000000  00000000  00007eac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000a322  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000a462  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000a5d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000c21b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000d106  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000deb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000e014  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000e2a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ea6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ec       	ldi	r30, 0xC0	; 192
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3f       	cpi	r26, 0xF0	; 240
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 ef       	ldi	r26, 0xF0	; 240
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3f       	cpi	r26, 0xF2	; 242
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 27 1f 	call	0x3e4e	; 0x3e4e <main>
      8a:	0c 94 de 1f 	jmp	0x3fbc	; 0x3fbc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 76 1f 	jmp	0x3eec	; 0x3eec <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e8       	ldi	r26, 0x8F	; 143
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 92 1f 	jmp	0x3f24	; 0x3f24 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 82 1f 	jmp	0x3f04	; 0x3f04 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9e 1f 	jmp	0x3f3c	; 0x3f3c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 82 1f 	jmp	0x3f04	; 0x3f04 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9e 1f 	jmp	0x3f3c	; 0x3f3c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 76 1f 	jmp	0x3eec	; 0x3eec <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e8       	ldi	r24, 0x8F	; 143
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 92 1f 	jmp	0x3f24	; 0x3f24 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 82 1f 	jmp	0x3f04	; 0x3f04 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 9e 1f 	jmp	0x3f3c	; 0x3f3c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 82 1f 	jmp	0x3f04	; 0x3f04 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 9e 1f 	jmp	0x3f3c	; 0x3f3c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 82 1f 	jmp	0x3f04	; 0x3f04 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 9e 1f 	jmp	0x3f3c	; 0x3f3c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 86 1f 	jmp	0x3f0c	; 0x3f0c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a2 1f 	jmp	0x3f44	; 0x3f44 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_Init>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to initialize the UART protocol
*************************************************************************************************/
enuErrorStatus_t UART_Init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
//    UBRRH_R = (BAUDRATE>>8);                      // shift the register right by 8 bits
//    UBRRL_R = BAUDRATE;                           // set baud


	//uart double speed node
	SET_BIT(UCSRA_R, U2X_B);
     b4e:	ab e2       	ldi	r26, 0x2B	; 43
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	eb e2       	ldi	r30, 0x2B	; 43
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	82 60       	ori	r24, 0x02	; 2
     b5a:	8c 93       	st	X, r24
	// UART receiver enable
	SET_BIT(UCSRB_R, RXEN_B);
     b5c:	aa e2       	ldi	r26, 0x2A	; 42
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	ea e2       	ldi	r30, 0x2A	; 42
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 61       	ori	r24, 0x10	; 16
     b68:	8c 93       	st	X, r24

	//UART Transmit enable
	SET_BIT(UCSRB_R, TXEN_B);
     b6a:	aa e2       	ldi	r26, 0x2A	; 42
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	ea e2       	ldi	r30, 0x2A	; 42
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	88 60       	ori	r24, 0x08	; 8
     b76:	8c 93       	st	X, r24

	//UART Asynchronous
	CLR_BIT(UCSRC_R, UMSEL_B);
     b78:	a0 e4       	ldi	r26, 0x40	; 64
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e0 e4       	ldi	r30, 0x40	; 64
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	8f 7b       	andi	r24, 0xBF	; 191
     b84:	8c 93       	st	X, r24

	//parity disable
	CLR_BIT(UCSRC_R, UPM1_B);
     b86:	a0 e4       	ldi	r26, 0x40	; 64
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e0 e4       	ldi	r30, 0x40	; 64
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	8f 7d       	andi	r24, 0xDF	; 223
     b92:	8c 93       	st	X, r24
	CLR_BIT(UCSRC_R, UPM0_B);
     b94:	a0 e4       	ldi	r26, 0x40	; 64
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e0 e4       	ldi	r30, 0x40	; 64
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	8f 7e       	andi	r24, 0xEF	; 239
     ba0:	8c 93       	st	X, r24

	//STOP bit selection 1 stop bit selected here
	CLR_BIT(UCSRC_R, USBS_B);
     ba2:	a0 e4       	ldi	r26, 0x40	; 64
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e0 e4       	ldi	r30, 0x40	; 64
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	87 7f       	andi	r24, 0xF7	; 247
     bae:	8c 93       	st	X, r24

	// Character size selection (8 bit data selected here)
	SET_BIT(UCSRC_R, UCSZ0_B);
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e0 e4       	ldi	r30, 0x40	; 64
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	82 60       	ori	r24, 0x02	; 2
     bbc:	8c 93       	st	X, r24
	SET_BIT(UCSRC_R, UCSZ1_B);
     bbe:	a0 e4       	ldi	r26, 0x40	; 64
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e0 e4       	ldi	r30, 0x40	; 64
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	84 60       	ori	r24, 0x04	; 4
     bca:	8c 93       	st	X, r24
	SET_BIT(UCSRB_R, UCSZ2_B);
     bcc:	aa e2       	ldi	r26, 0x2A	; 42
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	ea e2       	ldi	r30, 0x2A	; 42
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	84 60       	ori	r24, 0x04	; 4
     bd8:	8c 93       	st	X, r24

	//Set baud rate

	// Baud rate= 9600 .. F_cpu 8MHz
	UBRRH_R=0;
     bda:	e0 e4       	ldi	r30, 0x40	; 64
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	10 82       	st	Z, r1
	UBRRL_R=103;
     be0:	e9 e2       	ldi	r30, 0x29	; 41
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	87 e6       	ldi	r24, 0x67	; 103
     be6:	80 83       	st	Z, r24

	genuUARTInitStatus = E_OK;
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	80 93 f0 00 	sts	0x00F0, r24
	//Set baud rate
//	uint16_t UBRRVAL=(F_CPU/(u16_Baudrate*16UL))-1;
//	UBRRL_R=UBRRVAL; 			//low byte
//	UBRRH_R=(UBRRVAL>>8); 	//high byte

	return genuUARTInitStatus;
     bee:	80 91 f0 00 	lds	r24, 0x00F0
}//end UART_Init
     bf2:	cf 91       	pop	r28
     bf4:	df 91       	pop	r29
     bf6:	08 95       	ret

00000bf8 <UART_SendData>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to send data via UART
*************************************************************************************************/
enuErrorStatus_t UART_SendData(uint8_t u16Data)
{
     bf8:	df 93       	push	r29
     bfa:	cf 93       	push	r28
     bfc:	00 d0       	rcall	.+0      	; 0xbfe <UART_SendData+0x6>
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
     c02:	89 83       	std	Y+1, r24	; 0x01
	if(genuUARTInitStatus == E_ERROR)
     c04:	80 91 f0 00 	lds	r24, 0x00F0
     c08:	88 23       	and	r24, r24
     c0a:	11 f4       	brne	.+4      	; 0xc10 <UART_SendData+0x18>
	{
		//if uart is not initialized
		return E_ERROR;
     c0c:	1a 82       	std	Y+2, r1	; 0x02
     c0e:	0f c0       	rjmp	.+30     	; 0xc2e <UART_SendData+0x36>
	}//end if

	/* Wait for empty transmit buffer */
	while (!(GET_BIT(UCSRA_R, UDRE_B)));
     c10:	eb e2       	ldi	r30, 0x2B	; 43
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	88 2f       	mov	r24, r24
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	80 72       	andi	r24, 0x20	; 32
     c1c:	90 70       	andi	r25, 0x00	; 0
     c1e:	00 97       	sbiw	r24, 0x00	; 0
     c20:	b9 f3       	breq	.-18     	; 0xc10 <UART_SendData+0x18>

	/* Put data into buffer, sends the data */
	UDR_R = (uint8_t)u16Data;
     c22:	ec e2       	ldi	r30, 0x2C	; 44
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	89 81       	ldd	r24, Y+1	; 0x01
     c28:	80 83       	st	Z, r24

	return E_OK;
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	8a 83       	std	Y+2, r24	; 0x02
     c2e:	8a 81       	ldd	r24, Y+2	; 0x02
}//end UART_SendData
     c30:	0f 90       	pop	r0
     c32:	0f 90       	pop	r0
     c34:	cf 91       	pop	r28
     c36:	df 91       	pop	r29
     c38:	08 95       	ret

00000c3a <UART_ReceiveData>:
* Parameters (out): pu16Data
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to receive data via UART
*************************************************************************************************/
enuErrorStatus_t UART_ReceiveData(uint8_t* pu16Data)
{
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	00 d0       	rcall	.+0      	; 0xc40 <UART_ReceiveData+0x6>
     c40:	0f 92       	push	r0
     c42:	cd b7       	in	r28, 0x3d	; 61
     c44:	de b7       	in	r29, 0x3e	; 62
     c46:	9a 83       	std	Y+2, r25	; 0x02
     c48:	89 83       	std	Y+1, r24	; 0x01
	if(genuUARTInitStatus == E_ERROR)
     c4a:	80 91 f0 00 	lds	r24, 0x00F0
     c4e:	88 23       	and	r24, r24
     c50:	11 f4       	brne	.+4      	; 0xc56 <UART_ReceiveData+0x1c>
	{
		//if uart is not initialized
		return E_ERROR;
     c52:	1b 82       	std	Y+3, r1	; 0x03
     c54:	0d c0       	rjmp	.+26     	; 0xc70 <UART_ReceiveData+0x36>
	}//end if

	/* Wait for data to be received */
	while(!(GET_BIT(UCSRA_R, RXC_B)));
     c56:	eb e2       	ldi	r30, 0x2B	; 43
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	88 23       	and	r24, r24
     c5e:	dc f7       	brge	.-10     	; 0xc56 <UART_ReceiveData+0x1c>

	/* Get and return received data from buffer */
	*pu16Data = UDR_R;
     c60:	ec e2       	ldi	r30, 0x2C	; 44
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	80 81       	ld	r24, Z
     c66:	e9 81       	ldd	r30, Y+1	; 0x01
     c68:	fa 81       	ldd	r31, Y+2	; 0x02
     c6a:	80 83       	st	Z, r24

	return E_OK;
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	8b 83       	std	Y+3, r24	; 0x03
     c70:	8b 81       	ldd	r24, Y+3	; 0x03
}//end UART_ReceiveData
     c72:	0f 90       	pop	r0
     c74:	0f 90       	pop	r0
     c76:	0f 90       	pop	r0
     c78:	cf 91       	pop	r28
     c7a:	df 91       	pop	r29
     c7c:	08 95       	ret

00000c7e <UART_RecieveDataNoBLOCK>:
* Parameters (out): pu16Data
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to receive data via UART
*************************************************************************************************/
enuErrorStatus_t UART_RecieveDataNoBLOCK(uint8_t* pu16Data)
{
     c7e:	df 93       	push	r29
     c80:	cf 93       	push	r28
     c82:	00 d0       	rcall	.+0      	; 0xc84 <UART_RecieveDataNoBLOCK+0x6>
     c84:	00 d0       	rcall	.+0      	; 0xc86 <UART_RecieveDataNoBLOCK+0x8>
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	9b 83       	std	Y+3, r25	; 0x03
     c8c:	8a 83       	std	Y+2, r24	; 0x02
	if(genuUARTInitStatus == E_ERROR)
     c8e:	80 91 f0 00 	lds	r24, 0x00F0
     c92:	88 23       	and	r24, r24
     c94:	11 f4       	brne	.+4      	; 0xc9a <UART_RecieveDataNoBLOCK+0x1c>
	{
		//if uart is not initialized
		return E_ERROR;
     c96:	1c 82       	std	Y+4, r1	; 0x04
     c98:	10 c0       	rjmp	.+32     	; 0xcba <UART_RecieveDataNoBLOCK+0x3c>
	}//end if

	enuErrorStatus_t enuStatus = E_ERROR;
     c9a:	19 82       	std	Y+1, r1	; 0x01

    if (GET_BIT(UCSRA_R, RXC_B))
     c9c:	eb e2       	ldi	r30, 0x2B	; 43
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	88 23       	and	r24, r24
     ca4:	44 f4       	brge	.+16     	; 0xcb6 <UART_RecieveDataNoBLOCK+0x38>
    {
        *pu16Data = UDR_R;
     ca6:	ec e2       	ldi	r30, 0x2C	; 44
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	80 81       	ld	r24, Z
     cac:	ea 81       	ldd	r30, Y+2	; 0x02
     cae:	fb 81       	ldd	r31, Y+3	; 0x03
     cb0:	80 83       	st	Z, r24
        enuStatus = E_OK;
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	89 83       	std	Y+1, r24	; 0x01
    }
    else
    {
        /* do nothing */
    }
    return enuStatus;
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	8c 83       	std	Y+4, r24	; 0x04
     cba:	8c 81       	ldd	r24, Y+4	; 0x04

	return E_OK;
}//end UART_RecieveDataNoBLOCKING
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	0f 90       	pop	r0
     cc2:	0f 90       	pop	r0
     cc4:	cf 91       	pop	r28
     cc6:	df 91       	pop	r29
     cc8:	08 95       	ret

00000cca <UART_SendDataNoBLOCK>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to send data via UART without blocking the system
*************************************************************************************************/
enuErrorStatus_t UART_SendDataNoBLOCK(uint8_t u16Data)
{
     cca:	df 93       	push	r29
     ccc:	cf 93       	push	r28
     cce:	00 d0       	rcall	.+0      	; 0xcd0 <UART_SendDataNoBLOCK+0x6>
     cd0:	0f 92       	push	r0
     cd2:	cd b7       	in	r28, 0x3d	; 61
     cd4:	de b7       	in	r29, 0x3e	; 62
     cd6:	8a 83       	std	Y+2, r24	; 0x02
	if(genuUARTInitStatus == E_ERROR)
     cd8:	80 91 f0 00 	lds	r24, 0x00F0
     cdc:	88 23       	and	r24, r24
     cde:	11 f4       	brne	.+4      	; 0xce4 <UART_SendDataNoBLOCK+0x1a>
	{
		//if uart is not initialized
		return E_ERROR;
     ce0:	1b 82       	std	Y+3, r1	; 0x03
     ce2:	12 c0       	rjmp	.+36     	; 0xd08 <UART_SendDataNoBLOCK+0x3e>
	}//end if

	enuErrorStatus_t enuStatus = E_ERROR;
     ce4:	19 82       	std	Y+1, r1	; 0x01

    if (GET_BIT(UCSRA_R, UDRE_B))
     ce6:	eb e2       	ldi	r30, 0x2B	; 43
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	88 2f       	mov	r24, r24
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	80 72       	andi	r24, 0x20	; 32
     cf2:	90 70       	andi	r25, 0x00	; 0
     cf4:	00 97       	sbiw	r24, 0x00	; 0
     cf6:	31 f0       	breq	.+12     	; 0xd04 <UART_SendDataNoBLOCK+0x3a>
    {
        UDR_R = (uint8_t)u16Data;
     cf8:	ec e2       	ldi	r30, 0x2C	; 44
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	8a 81       	ldd	r24, Y+2	; 0x02
     cfe:	80 83       	st	Z, r24
        enuStatus = E_OK;
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	89 83       	std	Y+1, r24	; 0x01
    }
    else
    {
        /* do nothing */
    }
    return enuStatus;
     d04:	89 81       	ldd	r24, Y+1	; 0x01
     d06:	8b 83       	std	Y+3, r24	; 0x03
     d08:	8b 81       	ldd	r24, Y+3	; 0x03

	return E_OK;
}//end UART_RecieveDataNoBLOCKING
     d0a:	0f 90       	pop	r0
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	cf 91       	pop	r28
     d12:	df 91       	pop	r29
     d14:	08 95       	ret

00000d16 <UART_SendString>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to send string via UART
*************************************************************************************************/
enuErrorStatus_t UART_SendString(uint8_t* pu8String)
{
     d16:	df 93       	push	r29
     d18:	cf 93       	push	r28
     d1a:	00 d0       	rcall	.+0      	; 0xd1c <UART_SendString+0x6>
     d1c:	00 d0       	rcall	.+0      	; 0xd1e <UART_SendString+0x8>
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
     d22:	9b 83       	std	Y+3, r25	; 0x03
     d24:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8i=0;
     d26:	19 82       	std	Y+1, r1	; 0x01

	if(genuUARTInitStatus == E_ERROR || pu8String == NULL_PTR)
     d28:	80 91 f0 00 	lds	r24, 0x00F0
     d2c:	88 23       	and	r24, r24
     d2e:	21 f0       	breq	.+8      	; 0xd38 <UART_SendString+0x22>
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	9b 81       	ldd	r25, Y+3	; 0x03
     d34:	00 97       	sbiw	r24, 0x00	; 0
     d36:	11 f4       	brne	.+4      	; 0xd3c <UART_SendString+0x26>
	{
		//if uart is not initialized
		return E_ERROR;
     d38:	1c 82       	std	Y+4, r1	; 0x04
     d3a:	26 c0       	rjmp	.+76     	; 0xd88 <UART_SendString+0x72>
	}//end if

	for(u8i=0; u8i<MAXSIZE; u8i++)
     d3c:	19 82       	std	Y+1, r1	; 0x01
     d3e:	19 c0       	rjmp	.+50     	; 0xd72 <UART_SendString+0x5c>
	{
		UART_SendData(pu8String[u8i]);
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	8a 81       	ldd	r24, Y+2	; 0x02
     d48:	9b 81       	ldd	r25, Y+3	; 0x03
     d4a:	fc 01       	movw	r30, r24
     d4c:	e2 0f       	add	r30, r18
     d4e:	f3 1f       	adc	r31, r19
     d50:	80 81       	ld	r24, Z
     d52:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <UART_SendData>
		if(pu8String[u8i] =='\0')
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	28 2f       	mov	r18, r24
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	8a 81       	ldd	r24, Y+2	; 0x02
     d5e:	9b 81       	ldd	r25, Y+3	; 0x03
     d60:	fc 01       	movw	r30, r24
     d62:	e2 0f       	add	r30, r18
     d64:	f3 1f       	adc	r31, r19
     d66:	80 81       	ld	r24, Z
     d68:	88 23       	and	r24, r24
     d6a:	31 f0       	breq	.+12     	; 0xd78 <UART_SendString+0x62>
	{
		//if uart is not initialized
		return E_ERROR;
	}//end if

	for(u8i=0; u8i<MAXSIZE; u8i++)
     d6c:	89 81       	ldd	r24, Y+1	; 0x01
     d6e:	8f 5f       	subi	r24, 0xFF	; 255
     d70:	89 83       	std	Y+1, r24	; 0x01
     d72:	89 81       	ldd	r24, Y+1	; 0x01
     d74:	8f 3f       	cpi	r24, 0xFF	; 255
     d76:	21 f7       	brne	.-56     	; 0xd40 <UART_SendString+0x2a>
		if(pu8String[u8i] =='\0')
		{
			break;
		}
	}
	UART_SendData('\r');
     d78:	8d e0       	ldi	r24, 0x0D	; 13
     d7a:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <UART_SendData>
	UART_SendData('\n');
     d7e:	8a e0       	ldi	r24, 0x0A	; 10
     d80:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <UART_SendData>

	return E_OK;
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	8c 83       	std	Y+4, r24	; 0x04
     d88:	8c 81       	ldd	r24, Y+4	; 0x04
}//end UART_SendString
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	0f 90       	pop	r0
     d90:	0f 90       	pop	r0
     d92:	cf 91       	pop	r28
     d94:	df 91       	pop	r29
     d96:	08 95       	ret

00000d98 <UART_ReceiveString>:
* Parameters (out): pu8String
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to receive string via UART
*************************************************************************************************/
enuErrorStatus_t UART_ReceiveString(uint8_t* pu8String)
{
     d98:	df 93       	push	r29
     d9a:	cf 93       	push	r28
     d9c:	00 d0       	rcall	.+0      	; 0xd9e <UART_ReceiveString+0x6>
     d9e:	00 d0       	rcall	.+0      	; 0xda0 <UART_ReceiveString+0x8>
     da0:	cd b7       	in	r28, 0x3d	; 61
     da2:	de b7       	in	r29, 0x3e	; 62
     da4:	9b 83       	std	Y+3, r25	; 0x03
     da6:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8i=0;
     da8:	19 82       	std	Y+1, r1	; 0x01

	if(genuUARTInitStatus == E_ERROR)
     daa:	80 91 f0 00 	lds	r24, 0x00F0
     dae:	88 23       	and	r24, r24
     db0:	11 f4       	brne	.+4      	; 0xdb6 <UART_ReceiveString+0x1e>
	{
		//if uart is not initialized
		return E_ERROR;
     db2:	1c 82       	std	Y+4, r1	; 0x04
     db4:	32 c0       	rjmp	.+100    	; 0xe1a <UART_ReceiveString+0x82>
	}//end if

	for(u8i=0; u8i<MAXSIZE; u8i++)
     db6:	19 82       	std	Y+1, r1	; 0x01
     db8:	22 c0       	rjmp	.+68     	; 0xdfe <UART_ReceiveString+0x66>
	{
		UART_ReceiveData(&pu8String[u8i]);
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	8a 81       	ldd	r24, Y+2	; 0x02
     dc2:	9b 81       	ldd	r25, Y+3	; 0x03
     dc4:	82 0f       	add	r24, r18
     dc6:	93 1f       	adc	r25, r19
     dc8:	0e 94 1d 06 	call	0xc3a	; 0xc3a <UART_ReceiveData>
		if(pu8String[u8i] =='\r' || pu8String[u8i] =='\n')
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	28 2f       	mov	r18, r24
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	8a 81       	ldd	r24, Y+2	; 0x02
     dd4:	9b 81       	ldd	r25, Y+3	; 0x03
     dd6:	fc 01       	movw	r30, r24
     dd8:	e2 0f       	add	r30, r18
     dda:	f3 1f       	adc	r31, r19
     ddc:	80 81       	ld	r24, Z
     dde:	8d 30       	cpi	r24, 0x0D	; 13
     de0:	89 f0       	breq	.+34     	; 0xe04 <UART_ReceiveString+0x6c>
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	8a 81       	ldd	r24, Y+2	; 0x02
     dea:	9b 81       	ldd	r25, Y+3	; 0x03
     dec:	fc 01       	movw	r30, r24
     dee:	e2 0f       	add	r30, r18
     df0:	f3 1f       	adc	r31, r19
     df2:	80 81       	ld	r24, Z
     df4:	8a 30       	cpi	r24, 0x0A	; 10
     df6:	31 f0       	breq	.+12     	; 0xe04 <UART_ReceiveString+0x6c>
	{
		//if uart is not initialized
		return E_ERROR;
	}//end if

	for(u8i=0; u8i<MAXSIZE; u8i++)
     df8:	89 81       	ldd	r24, Y+1	; 0x01
     dfa:	8f 5f       	subi	r24, 0xFF	; 255
     dfc:	89 83       	std	Y+1, r24	; 0x01
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	8f 3f       	cpi	r24, 0xFF	; 255
     e02:	d9 f6       	brne	.-74     	; 0xdba <UART_ReceiveString+0x22>
		if(pu8String[u8i] =='\r' || pu8String[u8i] =='\n')
		{
			break;
		}
	}
	pu8String[u8i]='\0';
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	28 2f       	mov	r18, r24
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	8a 81       	ldd	r24, Y+2	; 0x02
     e0c:	9b 81       	ldd	r25, Y+3	; 0x03
     e0e:	fc 01       	movw	r30, r24
     e10:	e2 0f       	add	r30, r18
     e12:	f3 1f       	adc	r31, r19
     e14:	10 82       	st	Z, r1
	return E_OK;
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	8c 83       	std	Y+4, r24	; 0x04
     e1a:	8c 81       	ldd	r24, Y+4	; 0x04
}//end UART_ReceiveString
     e1c:	0f 90       	pop	r0
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	08 95       	ret

00000e2a <Test_UART_Init>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to test UART initialization
*************************************************************************************************/
enuErrorStatus_t Test_UART_Init(void)
{
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
	return genuUARTInitStatus;
     e32:	80 91 f0 00 	lds	r24, 0x00F0
}//end Test_UART_Init
     e36:	cf 91       	pop	r28
     e38:	df 91       	pop	r29
     e3a:	08 95       	ret

00000e3c <Test_UART_SendData>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to test sending data via UART
*************************************************************************************************/
enuErrorStatus_t Test_UART_SendData(void)
{
     e3c:	df 93       	push	r29
     e3e:	cf 93       	push	r28
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
	return UART_SendData('k');
     e44:	8b e6       	ldi	r24, 0x6B	; 107
     e46:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <UART_SendData>
}//end Test_UART_Init
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <Test_UART_SendString>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to test sending string via UART
*************************************************************************************************/
enuErrorStatus_t Test_UART_SendString(void)
{
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
	return UART_SendString((uint8_t*)"Hello");
     e58:	80 e6       	ldi	r24, 0x60	; 96
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	0e 94 8b 06 	call	0xd16	; 0xd16 <UART_SendString>
}//end Test_UART_Init
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	08 95       	ret

00000e66 <Test_UART_ReceiveData>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to test receiving data via UART
*************************************************************************************************/
enuErrorStatus_t Test_UART_ReceiveData(void)
{
     e66:	df 93       	push	r29
     e68:	cf 93       	push	r28
     e6a:	0f 92       	push	r0
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
	uint8_t pu8_Data;
	return UART_ReceiveData(&pu8_Data);
     e70:	ce 01       	movw	r24, r28
     e72:	01 96       	adiw	r24, 0x01	; 1
     e74:	0e 94 1d 06 	call	0xc3a	; 0xc3a <UART_ReceiveData>
}//end Test_UART_Init
     e78:	0f 90       	pop	r0
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	08 95       	ret

00000e80 <Test_UART_ReceiveString>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to test receiving string via UART
*************************************************************************************************/
enuErrorStatus_t Test_UART_ReceiveString(void)
{
     e80:	df 93       	push	r29
     e82:	cf 93       	push	r28
     e84:	00 d0       	rcall	.+0      	; 0xe86 <Test_UART_ReceiveString+0x6>
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
	uint8_t *u8_String;
	return UART_ReceiveString(&u8_String);
     e8a:	ce 01       	movw	r24, r28
     e8c:	01 96       	adiw	r24, 0x01	; 1
     e8e:	0e 94 cc 06 	call	0xd98	; 0xd98 <UART_ReceiveString>
}//end Test_UART_Init
     e92:	0f 90       	pop	r0
     e94:	0f 90       	pop	r0
     e96:	cf 91       	pop	r28
     e98:	df 91       	pop	r29
     e9a:	08 95       	ret

00000e9c <PWM_Init>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to initialize the PWM
*************************************************************************************************/
enuErrorStatus_t PWM_Init(void)
{
     e9c:	df 93       	push	r29
     e9e:	cf 93       	push	r28
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
	if(strpwmConfig.enuTimer == TIMER0)
     ea4:	80 91 97 00 	lds	r24, 0x0097
     ea8:	88 23       	and	r24, r24
     eaa:	09 f0       	breq	.+2      	; 0xeae <PWM_Init+0x12>
     eac:	4a c0       	rjmp	.+148    	; 0xf42 <PWM_Init+0xa6>
	{
		//Select PWM mode
		if(strpwmConfig.enuPWMMode == FAST_PWM)
     eae:	80 91 98 00 	lds	r24, 0x0098
     eb2:	88 23       	and	r24, r24
     eb4:	79 f4       	brne	.+30     	; 0xed4 <PWM_Init+0x38>
		{
			SET_BIT(TCCR0_R, WGM00_BIT);
     eb6:	a3 e5       	ldi	r26, 0x53	; 83
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e3 e5       	ldi	r30, 0x53	; 83
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	80 81       	ld	r24, Z
     ec0:	80 64       	ori	r24, 0x40	; 64
     ec2:	8c 93       	st	X, r24
			SET_BIT(TCCR0_R, WGM01_BIT);
     ec4:	a3 e5       	ldi	r26, 0x53	; 83
     ec6:	b0 e0       	ldi	r27, 0x00	; 0
     ec8:	e3 e5       	ldi	r30, 0x53	; 83
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	88 60       	ori	r24, 0x08	; 8
     ed0:	8c 93       	st	X, r24
     ed2:	12 c0       	rjmp	.+36     	; 0xef8 <PWM_Init+0x5c>
		}
		else if(strpwmConfig.enuPWMMode == PC_PWM)
     ed4:	80 91 98 00 	lds	r24, 0x0098
     ed8:	81 30       	cpi	r24, 0x01	; 1
     eda:	71 f4       	brne	.+28     	; 0xef8 <PWM_Init+0x5c>
		{
			SET_BIT(TCCR0_R, WGM00_BIT);
     edc:	a3 e5       	ldi	r26, 0x53	; 83
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e3 e5       	ldi	r30, 0x53	; 83
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	80 64       	ori	r24, 0x40	; 64
     ee8:	8c 93       	st	X, r24
			CLR_BIT(TCCR0_R, WGM01_BIT);
     eea:	a3 e5       	ldi	r26, 0x53	; 83
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e3 e5       	ldi	r30, 0x53	; 83
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	87 7f       	andi	r24, 0xF7	; 247
     ef6:	8c 93       	st	X, r24
		}//end else if

		//select OC0 mode
		if(strpwmConfig.enuOCMode == NON_INVERTING)
     ef8:	80 91 9b 00 	lds	r24, 0x009B
     efc:	88 23       	and	r24, r24
     efe:	79 f4       	brne	.+30     	; 0xf1e <PWM_Init+0x82>
		{
			CLR_BIT(TCCR0_R, COM00_BIT);
     f00:	a3 e5       	ldi	r26, 0x53	; 83
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e3 e5       	ldi	r30, 0x53	; 83
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	8f 7e       	andi	r24, 0xEF	; 239
     f0c:	8c 93       	st	X, r24
			SET_BIT(TCCR0_R, COM01_BIT);
     f0e:	a3 e5       	ldi	r26, 0x53	; 83
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e3 e5       	ldi	r30, 0x53	; 83
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	80 62       	ori	r24, 0x20	; 32
     f1a:	8c 93       	st	X, r24
     f1c:	12 c0       	rjmp	.+36     	; 0xf42 <PWM_Init+0xa6>
		}//end if
		else if(strpwmConfig.enuOCMode == INVERTING)
     f1e:	80 91 9b 00 	lds	r24, 0x009B
     f22:	81 30       	cpi	r24, 0x01	; 1
     f24:	71 f4       	brne	.+28     	; 0xf42 <PWM_Init+0xa6>
		{
			SET_BIT(TCCR0_R, COM00_BIT);
     f26:	a3 e5       	ldi	r26, 0x53	; 83
     f28:	b0 e0       	ldi	r27, 0x00	; 0
     f2a:	e3 e5       	ldi	r30, 0x53	; 83
     f2c:	f0 e0       	ldi	r31, 0x00	; 0
     f2e:	80 81       	ld	r24, Z
     f30:	80 61       	ori	r24, 0x10	; 16
     f32:	8c 93       	st	X, r24
			SET_BIT(TCCR0_R, COM01_BIT);
     f34:	a3 e5       	ldi	r26, 0x53	; 83
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	e3 e5       	ldi	r30, 0x53	; 83
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	80 62       	ori	r24, 0x20	; 32
     f40:	8c 93       	st	X, r24
		}//end else if
	}//end if for timer0

	return E_OK;
     f42:	81 e0       	ldi	r24, 0x01	; 1
}//end PWM_Init
     f44:	cf 91       	pop	r28
     f46:	df 91       	pop	r29
     f48:	08 95       	ret

00000f4a <setPrescaler>:

//private function to set prescaler
static void setPrescaler(void)
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <setPrescaler+0x6>
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
	switch(strpwmConfig.enuPWMPrescal)
     f54:	80 91 99 00 	lds	r24, 0x0099
     f58:	28 2f       	mov	r18, r24
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	3a 83       	std	Y+2, r19	; 0x02
     f5e:	29 83       	std	Y+1, r18	; 0x01
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	9a 81       	ldd	r25, Y+2	; 0x02
     f64:	83 30       	cpi	r24, 0x03	; 3
     f66:	91 05       	cpc	r25, r1
     f68:	09 f4       	brne	.+2      	; 0xf6c <setPrescaler+0x22>
     f6a:	70 c0       	rjmp	.+224    	; 0x104c <setPrescaler+0x102>
     f6c:	29 81       	ldd	r18, Y+1	; 0x01
     f6e:	3a 81       	ldd	r19, Y+2	; 0x02
     f70:	24 30       	cpi	r18, 0x04	; 4
     f72:	31 05       	cpc	r19, r1
     f74:	84 f4       	brge	.+32     	; 0xf96 <setPrescaler+0x4c>
     f76:	89 81       	ldd	r24, Y+1	; 0x01
     f78:	9a 81       	ldd	r25, Y+2	; 0x02
     f7a:	81 30       	cpi	r24, 0x01	; 1
     f7c:	91 05       	cpc	r25, r1
     f7e:	d1 f1       	breq	.+116    	; 0xff4 <setPrescaler+0xaa>
     f80:	29 81       	ldd	r18, Y+1	; 0x01
     f82:	3a 81       	ldd	r19, Y+2	; 0x02
     f84:	22 30       	cpi	r18, 0x02	; 2
     f86:	31 05       	cpc	r19, r1
     f88:	0c f0       	brlt	.+2      	; 0xf8c <setPrescaler+0x42>
     f8a:	4a c0       	rjmp	.+148    	; 0x1020 <setPrescaler+0xd6>
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	9a 81       	ldd	r25, Y+2	; 0x02
     f90:	00 97       	sbiw	r24, 0x00	; 0
     f92:	d1 f0       	breq	.+52     	; 0xfc8 <setPrescaler+0x7e>
     f94:	c8 c0       	rjmp	.+400    	; 0x1126 <setPrescaler+0x1dc>
     f96:	29 81       	ldd	r18, Y+1	; 0x01
     f98:	3a 81       	ldd	r19, Y+2	; 0x02
     f9a:	25 30       	cpi	r18, 0x05	; 5
     f9c:	31 05       	cpc	r19, r1
     f9e:	09 f4       	brne	.+2      	; 0xfa2 <setPrescaler+0x58>
     fa0:	81 c0       	rjmp	.+258    	; 0x10a4 <setPrescaler+0x15a>
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	9a 81       	ldd	r25, Y+2	; 0x02
     fa6:	85 30       	cpi	r24, 0x05	; 5
     fa8:	91 05       	cpc	r25, r1
     faa:	0c f4       	brge	.+2      	; 0xfae <setPrescaler+0x64>
     fac:	65 c0       	rjmp	.+202    	; 0x1078 <setPrescaler+0x12e>
     fae:	29 81       	ldd	r18, Y+1	; 0x01
     fb0:	3a 81       	ldd	r19, Y+2	; 0x02
     fb2:	26 30       	cpi	r18, 0x06	; 6
     fb4:	31 05       	cpc	r19, r1
     fb6:	09 f4       	brne	.+2      	; 0xfba <setPrescaler+0x70>
     fb8:	8b c0       	rjmp	.+278    	; 0x10d0 <setPrescaler+0x186>
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	9a 81       	ldd	r25, Y+2	; 0x02
     fbe:	87 30       	cpi	r24, 0x07	; 7
     fc0:	91 05       	cpc	r25, r1
     fc2:	09 f4       	brne	.+2      	; 0xfc6 <setPrescaler+0x7c>
     fc4:	9b c0       	rjmp	.+310    	; 0x10fc <setPrescaler+0x1b2>
     fc6:	af c0       	rjmp	.+350    	; 0x1126 <setPrescaler+0x1dc>
	{
	case NO_CLOCK:
		CLR_BIT(TCCR0_R, CS00_BIT);
     fc8:	a3 e5       	ldi	r26, 0x53	; 83
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e3 e5       	ldi	r30, 0x53	; 83
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	8e 7f       	andi	r24, 0xFE	; 254
     fd4:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_R, CS01_BIT);
     fd6:	a3 e5       	ldi	r26, 0x53	; 83
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	e3 e5       	ldi	r30, 0x53	; 83
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	8d 7f       	andi	r24, 0xFD	; 253
     fe2:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_R, CS02_BIT);
     fe4:	a3 e5       	ldi	r26, 0x53	; 83
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e3 e5       	ldi	r30, 0x53	; 83
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	8b 7f       	andi	r24, 0xFB	; 251
     ff0:	8c 93       	st	X, r24
     ff2:	99 c0       	rjmp	.+306    	; 0x1126 <setPrescaler+0x1dc>
		break;
	case NO_PRESCALER:
		SET_BIT(TCCR0_R, CS00_BIT);
     ff4:	a3 e5       	ldi	r26, 0x53	; 83
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	e3 e5       	ldi	r30, 0x53	; 83
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	81 60       	ori	r24, 0x01	; 1
    1000:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_R, CS01_BIT);
    1002:	a3 e5       	ldi	r26, 0x53	; 83
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e3 e5       	ldi	r30, 0x53	; 83
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	8d 7f       	andi	r24, 0xFD	; 253
    100e:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_R, CS02_BIT);
    1010:	a3 e5       	ldi	r26, 0x53	; 83
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	e3 e5       	ldi	r30, 0x53	; 83
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	8b 7f       	andi	r24, 0xFB	; 251
    101c:	8c 93       	st	X, r24
    101e:	83 c0       	rjmp	.+262    	; 0x1126 <setPrescaler+0x1dc>
		break;
	case PRESCALER_8:
		CLR_BIT(TCCR0_R, CS00_BIT);
    1020:	a3 e5       	ldi	r26, 0x53	; 83
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	e3 e5       	ldi	r30, 0x53	; 83
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	8e 7f       	andi	r24, 0xFE	; 254
    102c:	8c 93       	st	X, r24
		SET_BIT(TCCR0_R, CS01_BIT);
    102e:	a3 e5       	ldi	r26, 0x53	; 83
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e3 e5       	ldi	r30, 0x53	; 83
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	82 60       	ori	r24, 0x02	; 2
    103a:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_R, CS02_BIT);
    103c:	a3 e5       	ldi	r26, 0x53	; 83
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	e3 e5       	ldi	r30, 0x53	; 83
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	8b 7f       	andi	r24, 0xFB	; 251
    1048:	8c 93       	st	X, r24
    104a:	6d c0       	rjmp	.+218    	; 0x1126 <setPrescaler+0x1dc>
		break;
	case PRESCALER_64:
		SET_BIT(TCCR0_R, CS00_BIT);
    104c:	a3 e5       	ldi	r26, 0x53	; 83
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e3 e5       	ldi	r30, 0x53	; 83
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	81 60       	ori	r24, 0x01	; 1
    1058:	8c 93       	st	X, r24
		SET_BIT(TCCR0_R, CS01_BIT);
    105a:	a3 e5       	ldi	r26, 0x53	; 83
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e3 e5       	ldi	r30, 0x53	; 83
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	82 60       	ori	r24, 0x02	; 2
    1066:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_R, CS02_BIT);
    1068:	a3 e5       	ldi	r26, 0x53	; 83
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e3 e5       	ldi	r30, 0x53	; 83
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	8b 7f       	andi	r24, 0xFB	; 251
    1074:	8c 93       	st	X, r24
    1076:	57 c0       	rjmp	.+174    	; 0x1126 <setPrescaler+0x1dc>
		break;
	case PRESCALER_256:
		CLR_BIT(TCCR0_R, CS00_BIT);
    1078:	a3 e5       	ldi	r26, 0x53	; 83
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e3 e5       	ldi	r30, 0x53	; 83
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	8e 7f       	andi	r24, 0xFE	; 254
    1084:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_R, CS01_BIT);
    1086:	a3 e5       	ldi	r26, 0x53	; 83
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	e3 e5       	ldi	r30, 0x53	; 83
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	8d 7f       	andi	r24, 0xFD	; 253
    1092:	8c 93       	st	X, r24
		SET_BIT(TCCR0_R, CS02_BIT);
    1094:	a3 e5       	ldi	r26, 0x53	; 83
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	e3 e5       	ldi	r30, 0x53	; 83
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	84 60       	ori	r24, 0x04	; 4
    10a0:	8c 93       	st	X, r24
    10a2:	41 c0       	rjmp	.+130    	; 0x1126 <setPrescaler+0x1dc>
		break;
	case PRESCALER_1024:
		SET_BIT(TCCR0_R, CS00_BIT);
    10a4:	a3 e5       	ldi	r26, 0x53	; 83
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e3 e5       	ldi	r30, 0x53	; 83
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	81 60       	ori	r24, 0x01	; 1
    10b0:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_R, CS01_BIT);
    10b2:	a3 e5       	ldi	r26, 0x53	; 83
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e3 e5       	ldi	r30, 0x53	; 83
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	8d 7f       	andi	r24, 0xFD	; 253
    10be:	8c 93       	st	X, r24
		SET_BIT(TCCR0_R, CS02_BIT);
    10c0:	a3 e5       	ldi	r26, 0x53	; 83
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e3 e5       	ldi	r30, 0x53	; 83
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	84 60       	ori	r24, 0x04	; 4
    10cc:	8c 93       	st	X, r24
    10ce:	2b c0       	rjmp	.+86     	; 0x1126 <setPrescaler+0x1dc>
		break;
	case EXTERNAL_CLOCK_FALL_EDGE:
		CLR_BIT(TCCR0_R, CS00_BIT);
    10d0:	a3 e5       	ldi	r26, 0x53	; 83
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	e3 e5       	ldi	r30, 0x53	; 83
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	8e 7f       	andi	r24, 0xFE	; 254
    10dc:	8c 93       	st	X, r24
		SET_BIT(TCCR0_R, CS01_BIT);
    10de:	a3 e5       	ldi	r26, 0x53	; 83
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e3 e5       	ldi	r30, 0x53	; 83
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	82 60       	ori	r24, 0x02	; 2
    10ea:	8c 93       	st	X, r24
		SET_BIT(TCCR0_R, CS02_BIT);
    10ec:	a3 e5       	ldi	r26, 0x53	; 83
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	e3 e5       	ldi	r30, 0x53	; 83
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	84 60       	ori	r24, 0x04	; 4
    10f8:	8c 93       	st	X, r24
    10fa:	15 c0       	rjmp	.+42     	; 0x1126 <setPrescaler+0x1dc>
		break;
	case EXTERNAL_CLOCK_RISE_EDGE:
		SET_BIT(TCCR0_R, CS00_BIT);
    10fc:	a3 e5       	ldi	r26, 0x53	; 83
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e3 e5       	ldi	r30, 0x53	; 83
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	81 60       	ori	r24, 0x01	; 1
    1108:	8c 93       	st	X, r24
		SET_BIT(TCCR0_R, CS01_BIT);
    110a:	a3 e5       	ldi	r26, 0x53	; 83
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	e3 e5       	ldi	r30, 0x53	; 83
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	82 60       	ori	r24, 0x02	; 2
    1116:	8c 93       	st	X, r24
		SET_BIT(TCCR0_R, CS02_BIT);
    1118:	a3 e5       	ldi	r26, 0x53	; 83
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e3 e5       	ldi	r30, 0x53	; 83
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	84 60       	ori	r24, 0x04	; 4
    1124:	8c 93       	st	X, r24
		break;
	default:
		break;
	}//end switch for prescaler
}//end setPrescaler
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	cf 91       	pop	r28
    112c:	df 91       	pop	r29
    112e:	08 95       	ret

00001130 <PWM_Start>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to start generating PWM wave
*************************************************************************************************/
enuErrorStatus_t PWM_Start(uint8_t u8_Duty)
{
    1130:	df 93       	push	r29
    1132:	cf 93       	push	r28
    1134:	00 d0       	rcall	.+0      	; 0x1136 <PWM_Start+0x6>
    1136:	0f 92       	push	r0
    1138:	cd b7       	in	r28, 0x3d	; 61
    113a:	de b7       	in	r29, 0x3e	; 62
    113c:	89 83       	std	Y+1, r24	; 0x01
	switch(strpwmConfig.enuOCMode)
    113e:	80 91 9b 00 	lds	r24, 0x009B
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	3b 83       	std	Y+3, r19	; 0x03
    1148:	2a 83       	std	Y+2, r18	; 0x02
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	9b 81       	ldd	r25, Y+3	; 0x03
    114e:	00 97       	sbiw	r24, 0x00	; 0
    1150:	31 f0       	breq	.+12     	; 0x115e <PWM_Start+0x2e>
    1152:	2a 81       	ldd	r18, Y+2	; 0x02
    1154:	3b 81       	ldd	r19, Y+3	; 0x03
    1156:	21 30       	cpi	r18, 0x01	; 1
    1158:	31 05       	cpc	r19, r1
    115a:	e1 f0       	breq	.+56     	; 0x1194 <PWM_Start+0x64>
    115c:	2a c0       	rjmp	.+84     	; 0x11b2 <PWM_Start+0x82>
    {
    case NON_INVERTING:
        OCR0_R = ((u8_Duty *255)/100);
    115e:	ec e5       	ldi	r30, 0x5C	; 92
    1160:	f0 e0       	ldi	r31, 0x00	; 0
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	48 2f       	mov	r20, r24
    1166:	50 e0       	ldi	r21, 0x00	; 0
    1168:	ca 01       	movw	r24, r20
    116a:	9c 01       	movw	r18, r24
    116c:	22 0f       	add	r18, r18
    116e:	33 1f       	adc	r19, r19
    1170:	c9 01       	movw	r24, r18
    1172:	96 95       	lsr	r25
    1174:	98 2f       	mov	r25, r24
    1176:	88 27       	eor	r24, r24
    1178:	97 95       	ror	r25
    117a:	87 95       	ror	r24
    117c:	82 1b       	sub	r24, r18
    117e:	93 0b       	sbc	r25, r19
    1180:	84 0f       	add	r24, r20
    1182:	95 1f       	adc	r25, r21
    1184:	24 e6       	ldi	r18, 0x64	; 100
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	b9 01       	movw	r22, r18
    118a:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__divmodhi4>
    118e:	cb 01       	movw	r24, r22
    1190:	80 83       	st	Z, r24
    1192:	0f c0       	rjmp	.+30     	; 0x11b2 <PWM_Start+0x82>
        break;
    case INVERTING:
        OCR0_R = 255 - ((256 * u8_Duty)/100);
    1194:	ec e5       	ldi	r30, 0x5C	; 92
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	89 81       	ldd	r24, Y+1	; 0x01
    119a:	88 2f       	mov	r24, r24
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	98 2f       	mov	r25, r24
    11a0:	88 27       	eor	r24, r24
    11a2:	24 e6       	ldi	r18, 0x64	; 100
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	b9 01       	movw	r22, r18
    11a8:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__divmodhi4>
    11ac:	cb 01       	movw	r24, r22
    11ae:	80 95       	com	r24
    11b0:	80 83       	st	Z, r24
    break;
    }
    setPrescaler();
    11b2:	0e 94 a5 07 	call	0xf4a	; 0xf4a <setPrescaler>
	return E_OK;
    11b6:	81 e0       	ldi	r24, 0x01	; 1
}//end PWM_Start
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	cf 91       	pop	r28
    11c0:	df 91       	pop	r29
    11c2:	08 95       	ret

000011c4 <PWM_Stop>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A stop generating PWM wave
*************************************************************************************************/
enuErrorStatus_t PWM_Stop(void)
{
    11c4:	df 93       	push	r29
    11c6:	cf 93       	push	r28
    11c8:	cd b7       	in	r28, 0x3d	; 61
    11ca:	de b7       	in	r29, 0x3e	; 62
//	CLR_BIT(TCCR0_R, CS00_BIT);
//	CLR_BIT(TCCR0_R, CS01_BIT);
//	CLR_BIT(TCCR0_R, CS02_BIT);
	CLR_BIT(TCCR0_R, COM00_BIT);
    11cc:	a3 e5       	ldi	r26, 0x53	; 83
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	e3 e5       	ldi	r30, 0x53	; 83
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	8f 7e       	andi	r24, 0xEF	; 239
    11d8:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_R, COM01_BIT);
    11da:	a3 e5       	ldi	r26, 0x53	; 83
    11dc:	b0 e0       	ldi	r27, 0x00	; 0
    11de:	e3 e5       	ldi	r30, 0x53	; 83
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	80 81       	ld	r24, Z
    11e4:	8f 7d       	andi	r24, 0xDF	; 223
    11e6:	8c 93       	st	X, r24
	return E_OK;
    11e8:	81 e0       	ldi	r24, 0x01	; 1
}//end PWM_Stop
    11ea:	cf 91       	pop	r28
    11ec:	df 91       	pop	r29
    11ee:	08 95       	ret

000011f0 <DIO_Init>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to initialize all the DIO groups according to the configuration
*************************************************************************************************/
enuErrorStatus_t DIO_Init(void)
{
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	0f 92       	push	r0
    11f6:	cd b7       	in	r28, 0x3d	; 61
    11f8:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_i;

	for(u8_i=0; u8_i<DIO_GROUPS_NO; u8_i++)
    11fa:	19 82       	std	Y+1, r1	; 0x01
    11fc:	02 c4       	rjmp	.+2052   	; 0x1a02 <DIO_Init+0x812>
	{
		//set the pin direction (input, output)
		if(astrDIOConfigParameters[u8_i].enuPinDir == INPUT)
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	c9 01       	movw	r24, r18
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	82 0f       	add	r24, r18
    120c:	93 1f       	adc	r25, r19
    120e:	fc 01       	movw	r30, r24
    1210:	e3 56       	subi	r30, 0x63	; 99
    1212:	ff 4f       	sbci	r31, 0xFF	; 255
    1214:	80 81       	ld	r24, Z
    1216:	88 23       	and	r24, r24
    1218:	09 f0       	breq	.+2      	; 0x121c <DIO_Init+0x2c>
    121a:	ed c0       	rjmp	.+474    	; 0x13f6 <DIO_Init+0x206>
		{
			//if PORTA
			if((astrDIOConfigParameters[u8_i].enuPinNo >= 0) && (astrDIOConfigParameters[u8_i].enuPinNo < 8))
    121c:	89 81       	ldd	r24, Y+1	; 0x01
    121e:	28 2f       	mov	r18, r24
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	c9 01       	movw	r24, r18
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	82 0f       	add	r24, r18
    122a:	93 1f       	adc	r25, r19
    122c:	fc 01       	movw	r30, r24
    122e:	e4 56       	subi	r30, 0x64	; 100
    1230:	ff 4f       	sbci	r31, 0xFF	; 255
    1232:	80 81       	ld	r24, Z
    1234:	88 30       	cpi	r24, 0x08	; 8
    1236:	00 f5       	brcc	.+64     	; 0x1278 <DIO_Init+0x88>
			{
				CLR_BIT(DDRA_R, astrDIOConfigParameters[u8_i].enuPinNo);
    1238:	aa e3       	ldi	r26, 0x3A	; 58
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	ea e3       	ldi	r30, 0x3A	; 58
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	48 2f       	mov	r20, r24
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	c9 01       	movw	r24, r18
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	82 0f       	add	r24, r18
    1252:	93 1f       	adc	r25, r19
    1254:	fc 01       	movw	r30, r24
    1256:	e4 56       	subi	r30, 0x64	; 100
    1258:	ff 4f       	sbci	r31, 0xFF	; 255
    125a:	80 81       	ld	r24, Z
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	02 2e       	mov	r0, r18
    1266:	02 c0       	rjmp	.+4      	; 0x126c <DIO_Init+0x7c>
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	0a 94       	dec	r0
    126e:	e2 f7       	brpl	.-8      	; 0x1268 <DIO_Init+0x78>
    1270:	80 95       	com	r24
    1272:	84 23       	and	r24, r20
    1274:	8c 93       	st	X, r24
    1276:	b3 c1       	rjmp	.+870    	; 0x15de <DIO_Init+0x3ee>
			}//end if

			//if PORTB
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 8) && (astrDIOConfigParameters[u8_i].enuPinNo < 16))
    1278:	89 81       	ldd	r24, Y+1	; 0x01
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	c9 01       	movw	r24, r18
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	82 0f       	add	r24, r18
    1286:	93 1f       	adc	r25, r19
    1288:	fc 01       	movw	r30, r24
    128a:	e4 56       	subi	r30, 0x64	; 100
    128c:	ff 4f       	sbci	r31, 0xFF	; 255
    128e:	80 81       	ld	r24, Z
    1290:	88 30       	cpi	r24, 0x08	; 8
    1292:	88 f1       	brcs	.+98     	; 0x12f6 <DIO_Init+0x106>
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	c9 01       	movw	r24, r18
    129c:	88 0f       	add	r24, r24
    129e:	99 1f       	adc	r25, r25
    12a0:	82 0f       	add	r24, r18
    12a2:	93 1f       	adc	r25, r19
    12a4:	fc 01       	movw	r30, r24
    12a6:	e4 56       	subi	r30, 0x64	; 100
    12a8:	ff 4f       	sbci	r31, 0xFF	; 255
    12aa:	80 81       	ld	r24, Z
    12ac:	80 31       	cpi	r24, 0x10	; 16
    12ae:	18 f5       	brcc	.+70     	; 0x12f6 <DIO_Init+0x106>
			{
				CLR_BIT(DDRB_R,(astrDIOConfigParameters[u8_i].enuPinNo - 8));
    12b0:	a7 e3       	ldi	r26, 0x37	; 55
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	e7 e3       	ldi	r30, 0x37	; 55
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	48 2f       	mov	r20, r24
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	c9 01       	movw	r24, r18
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	82 0f       	add	r24, r18
    12ca:	93 1f       	adc	r25, r19
    12cc:	fc 01       	movw	r30, r24
    12ce:	e4 56       	subi	r30, 0x64	; 100
    12d0:	ff 4f       	sbci	r31, 0xFF	; 255
    12d2:	80 81       	ld	r24, Z
    12d4:	88 2f       	mov	r24, r24
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	9c 01       	movw	r18, r24
    12da:	28 50       	subi	r18, 0x08	; 8
    12dc:	30 40       	sbci	r19, 0x00	; 0
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	02 2e       	mov	r0, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <DIO_Init+0xfa>
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	0a 94       	dec	r0
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <DIO_Init+0xf6>
    12ee:	80 95       	com	r24
    12f0:	84 23       	and	r24, r20
    12f2:	8c 93       	st	X, r24
    12f4:	74 c1       	rjmp	.+744    	; 0x15de <DIO_Init+0x3ee>
			}//end else if

			//if PORTC
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 16) && (astrDIOConfigParameters[u8_i].enuPinNo < 24))
    12f6:	89 81       	ldd	r24, Y+1	; 0x01
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	c9 01       	movw	r24, r18
    12fe:	88 0f       	add	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	82 0f       	add	r24, r18
    1304:	93 1f       	adc	r25, r19
    1306:	fc 01       	movw	r30, r24
    1308:	e4 56       	subi	r30, 0x64	; 100
    130a:	ff 4f       	sbci	r31, 0xFF	; 255
    130c:	80 81       	ld	r24, Z
    130e:	80 31       	cpi	r24, 0x10	; 16
    1310:	88 f1       	brcs	.+98     	; 0x1374 <DIO_Init+0x184>
    1312:	89 81       	ldd	r24, Y+1	; 0x01
    1314:	28 2f       	mov	r18, r24
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	c9 01       	movw	r24, r18
    131a:	88 0f       	add	r24, r24
    131c:	99 1f       	adc	r25, r25
    131e:	82 0f       	add	r24, r18
    1320:	93 1f       	adc	r25, r19
    1322:	fc 01       	movw	r30, r24
    1324:	e4 56       	subi	r30, 0x64	; 100
    1326:	ff 4f       	sbci	r31, 0xFF	; 255
    1328:	80 81       	ld	r24, Z
    132a:	88 31       	cpi	r24, 0x18	; 24
    132c:	18 f5       	brcc	.+70     	; 0x1374 <DIO_Init+0x184>
			{
				CLR_BIT(DDRC_R,(astrDIOConfigParameters[u8_i].enuPinNo - 16));
    132e:	a4 e3       	ldi	r26, 0x34	; 52
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	e4 e3       	ldi	r30, 0x34	; 52
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	48 2f       	mov	r20, r24
    133a:	89 81       	ldd	r24, Y+1	; 0x01
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	c9 01       	movw	r24, r18
    1342:	88 0f       	add	r24, r24
    1344:	99 1f       	adc	r25, r25
    1346:	82 0f       	add	r24, r18
    1348:	93 1f       	adc	r25, r19
    134a:	fc 01       	movw	r30, r24
    134c:	e4 56       	subi	r30, 0x64	; 100
    134e:	ff 4f       	sbci	r31, 0xFF	; 255
    1350:	80 81       	ld	r24, Z
    1352:	88 2f       	mov	r24, r24
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	9c 01       	movw	r18, r24
    1358:	20 51       	subi	r18, 0x10	; 16
    135a:	30 40       	sbci	r19, 0x00	; 0
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	02 2e       	mov	r0, r18
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <DIO_Init+0x178>
    1364:	88 0f       	add	r24, r24
    1366:	99 1f       	adc	r25, r25
    1368:	0a 94       	dec	r0
    136a:	e2 f7       	brpl	.-8      	; 0x1364 <DIO_Init+0x174>
    136c:	80 95       	com	r24
    136e:	84 23       	and	r24, r20
    1370:	8c 93       	st	X, r24
    1372:	35 c1       	rjmp	.+618    	; 0x15de <DIO_Init+0x3ee>
			}//end else if

			//if PORTD
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 24) && (astrDIOConfigParameters[u8_i].enuPinNo < 32))
    1374:	89 81       	ldd	r24, Y+1	; 0x01
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	c9 01       	movw	r24, r18
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	82 0f       	add	r24, r18
    1382:	93 1f       	adc	r25, r19
    1384:	fc 01       	movw	r30, r24
    1386:	e4 56       	subi	r30, 0x64	; 100
    1388:	ff 4f       	sbci	r31, 0xFF	; 255
    138a:	80 81       	ld	r24, Z
    138c:	88 31       	cpi	r24, 0x18	; 24
    138e:	08 f4       	brcc	.+2      	; 0x1392 <DIO_Init+0x1a2>
    1390:	26 c1       	rjmp	.+588    	; 0x15de <DIO_Init+0x3ee>
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	c9 01       	movw	r24, r18
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	82 0f       	add	r24, r18
    13a0:	93 1f       	adc	r25, r19
    13a2:	fc 01       	movw	r30, r24
    13a4:	e4 56       	subi	r30, 0x64	; 100
    13a6:	ff 4f       	sbci	r31, 0xFF	; 255
    13a8:	80 81       	ld	r24, Z
    13aa:	80 32       	cpi	r24, 0x20	; 32
    13ac:	08 f0       	brcs	.+2      	; 0x13b0 <DIO_Init+0x1c0>
    13ae:	17 c1       	rjmp	.+558    	; 0x15de <DIO_Init+0x3ee>
			{
				CLR_BIT(DDRD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
    13b0:	a1 e3       	ldi	r26, 0x31	; 49
    13b2:	b0 e0       	ldi	r27, 0x00	; 0
    13b4:	e1 e3       	ldi	r30, 0x31	; 49
    13b6:	f0 e0       	ldi	r31, 0x00	; 0
    13b8:	80 81       	ld	r24, Z
    13ba:	48 2f       	mov	r20, r24
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
    13be:	28 2f       	mov	r18, r24
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	c9 01       	movw	r24, r18
    13c4:	88 0f       	add	r24, r24
    13c6:	99 1f       	adc	r25, r25
    13c8:	82 0f       	add	r24, r18
    13ca:	93 1f       	adc	r25, r19
    13cc:	fc 01       	movw	r30, r24
    13ce:	e4 56       	subi	r30, 0x64	; 100
    13d0:	ff 4f       	sbci	r31, 0xFF	; 255
    13d2:	80 81       	ld	r24, Z
    13d4:	88 2f       	mov	r24, r24
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	9c 01       	movw	r18, r24
    13da:	28 51       	subi	r18, 0x18	; 24
    13dc:	30 40       	sbci	r19, 0x00	; 0
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	02 2e       	mov	r0, r18
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <DIO_Init+0x1fa>
    13e6:	88 0f       	add	r24, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	0a 94       	dec	r0
    13ec:	e2 f7       	brpl	.-8      	; 0x13e6 <DIO_Init+0x1f6>
    13ee:	80 95       	com	r24
    13f0:	84 23       	and	r24, r20
    13f2:	8c 93       	st	X, r24
    13f4:	f4 c0       	rjmp	.+488    	; 0x15de <DIO_Init+0x3ee>
			}//end else if
		}//end if

		else if(astrDIOConfigParameters[u8_i].enuPinDir == OUTPUT)
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	c9 01       	movw	r24, r18
    13fe:	88 0f       	add	r24, r24
    1400:	99 1f       	adc	r25, r25
    1402:	82 0f       	add	r24, r18
    1404:	93 1f       	adc	r25, r19
    1406:	fc 01       	movw	r30, r24
    1408:	e3 56       	subi	r30, 0x63	; 99
    140a:	ff 4f       	sbci	r31, 0xFF	; 255
    140c:	80 81       	ld	r24, Z
    140e:	81 30       	cpi	r24, 0x01	; 1
    1410:	09 f0       	breq	.+2      	; 0x1414 <DIO_Init+0x224>
    1412:	e5 c0       	rjmp	.+458    	; 0x15de <DIO_Init+0x3ee>
		{
			if((astrDIOConfigParameters[u8_i].enuPinNo >= 0) && (astrDIOConfigParameters[u8_i].enuPinNo < 8))	//if porta
    1414:	89 81       	ldd	r24, Y+1	; 0x01
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	c9 01       	movw	r24, r18
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	82 0f       	add	r24, r18
    1422:	93 1f       	adc	r25, r19
    1424:	fc 01       	movw	r30, r24
    1426:	e4 56       	subi	r30, 0x64	; 100
    1428:	ff 4f       	sbci	r31, 0xFF	; 255
    142a:	80 81       	ld	r24, Z
    142c:	88 30       	cpi	r24, 0x08	; 8
    142e:	f8 f4       	brcc	.+62     	; 0x146e <DIO_Init+0x27e>
			{
				SET_BIT(DDRA_R, astrDIOConfigParameters[u8_i].enuPinNo);
    1430:	aa e3       	ldi	r26, 0x3A	; 58
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	ea e3       	ldi	r30, 0x3A	; 58
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	48 2f       	mov	r20, r24
    143c:	89 81       	ldd	r24, Y+1	; 0x01
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	c9 01       	movw	r24, r18
    1444:	88 0f       	add	r24, r24
    1446:	99 1f       	adc	r25, r25
    1448:	82 0f       	add	r24, r18
    144a:	93 1f       	adc	r25, r19
    144c:	fc 01       	movw	r30, r24
    144e:	e4 56       	subi	r30, 0x64	; 100
    1450:	ff 4f       	sbci	r31, 0xFF	; 255
    1452:	80 81       	ld	r24, Z
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	02 2e       	mov	r0, r18
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <DIO_Init+0x274>
    1460:	88 0f       	add	r24, r24
    1462:	99 1f       	adc	r25, r25
    1464:	0a 94       	dec	r0
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <DIO_Init+0x270>
    1468:	84 2b       	or	r24, r20
    146a:	8c 93       	st	X, r24
    146c:	b8 c0       	rjmp	.+368    	; 0x15de <DIO_Init+0x3ee>
			}//end if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 8) && (astrDIOConfigParameters[u8_i].enuPinNo < 16))	//if portb
    146e:	89 81       	ldd	r24, Y+1	; 0x01
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	c9 01       	movw	r24, r18
    1476:	88 0f       	add	r24, r24
    1478:	99 1f       	adc	r25, r25
    147a:	82 0f       	add	r24, r18
    147c:	93 1f       	adc	r25, r19
    147e:	fc 01       	movw	r30, r24
    1480:	e4 56       	subi	r30, 0x64	; 100
    1482:	ff 4f       	sbci	r31, 0xFF	; 255
    1484:	80 81       	ld	r24, Z
    1486:	88 30       	cpi	r24, 0x08	; 8
    1488:	80 f1       	brcs	.+96     	; 0x14ea <DIO_Init+0x2fa>
    148a:	89 81       	ldd	r24, Y+1	; 0x01
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	c9 01       	movw	r24, r18
    1492:	88 0f       	add	r24, r24
    1494:	99 1f       	adc	r25, r25
    1496:	82 0f       	add	r24, r18
    1498:	93 1f       	adc	r25, r19
    149a:	fc 01       	movw	r30, r24
    149c:	e4 56       	subi	r30, 0x64	; 100
    149e:	ff 4f       	sbci	r31, 0xFF	; 255
    14a0:	80 81       	ld	r24, Z
    14a2:	80 31       	cpi	r24, 0x10	; 16
    14a4:	10 f5       	brcc	.+68     	; 0x14ea <DIO_Init+0x2fa>
			{
				SET_BIT(DDRB_R,(astrDIOConfigParameters[u8_i].enuPinNo - 8));
    14a6:	a7 e3       	ldi	r26, 0x37	; 55
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e7 e3       	ldi	r30, 0x37	; 55
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	48 2f       	mov	r20, r24
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	c9 01       	movw	r24, r18
    14ba:	88 0f       	add	r24, r24
    14bc:	99 1f       	adc	r25, r25
    14be:	82 0f       	add	r24, r18
    14c0:	93 1f       	adc	r25, r19
    14c2:	fc 01       	movw	r30, r24
    14c4:	e4 56       	subi	r30, 0x64	; 100
    14c6:	ff 4f       	sbci	r31, 0xFF	; 255
    14c8:	80 81       	ld	r24, Z
    14ca:	88 2f       	mov	r24, r24
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	9c 01       	movw	r18, r24
    14d0:	28 50       	subi	r18, 0x08	; 8
    14d2:	30 40       	sbci	r19, 0x00	; 0
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	02 2e       	mov	r0, r18
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <DIO_Init+0x2f0>
    14dc:	88 0f       	add	r24, r24
    14de:	99 1f       	adc	r25, r25
    14e0:	0a 94       	dec	r0
    14e2:	e2 f7       	brpl	.-8      	; 0x14dc <DIO_Init+0x2ec>
    14e4:	84 2b       	or	r24, r20
    14e6:	8c 93       	st	X, r24
    14e8:	7a c0       	rjmp	.+244    	; 0x15de <DIO_Init+0x3ee>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 16) && (astrDIOConfigParameters[u8_i].enuPinNo < 24))	//if portc
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	c9 01       	movw	r24, r18
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	82 0f       	add	r24, r18
    14f8:	93 1f       	adc	r25, r19
    14fa:	fc 01       	movw	r30, r24
    14fc:	e4 56       	subi	r30, 0x64	; 100
    14fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1500:	80 81       	ld	r24, Z
    1502:	80 31       	cpi	r24, 0x10	; 16
    1504:	80 f1       	brcs	.+96     	; 0x1566 <DIO_Init+0x376>
    1506:	89 81       	ldd	r24, Y+1	; 0x01
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	c9 01       	movw	r24, r18
    150e:	88 0f       	add	r24, r24
    1510:	99 1f       	adc	r25, r25
    1512:	82 0f       	add	r24, r18
    1514:	93 1f       	adc	r25, r19
    1516:	fc 01       	movw	r30, r24
    1518:	e4 56       	subi	r30, 0x64	; 100
    151a:	ff 4f       	sbci	r31, 0xFF	; 255
    151c:	80 81       	ld	r24, Z
    151e:	88 31       	cpi	r24, 0x18	; 24
    1520:	10 f5       	brcc	.+68     	; 0x1566 <DIO_Init+0x376>
			{
				SET_BIT(DDRC_R,(astrDIOConfigParameters[u8_i].enuPinNo - 16));
    1522:	a4 e3       	ldi	r26, 0x34	; 52
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	e4 e3       	ldi	r30, 0x34	; 52
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	48 2f       	mov	r20, r24
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	28 2f       	mov	r18, r24
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	c9 01       	movw	r24, r18
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	82 0f       	add	r24, r18
    153c:	93 1f       	adc	r25, r19
    153e:	fc 01       	movw	r30, r24
    1540:	e4 56       	subi	r30, 0x64	; 100
    1542:	ff 4f       	sbci	r31, 0xFF	; 255
    1544:	80 81       	ld	r24, Z
    1546:	88 2f       	mov	r24, r24
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	9c 01       	movw	r18, r24
    154c:	20 51       	subi	r18, 0x10	; 16
    154e:	30 40       	sbci	r19, 0x00	; 0
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	02 2e       	mov	r0, r18
    1556:	02 c0       	rjmp	.+4      	; 0x155c <DIO_Init+0x36c>
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	0a 94       	dec	r0
    155e:	e2 f7       	brpl	.-8      	; 0x1558 <DIO_Init+0x368>
    1560:	84 2b       	or	r24, r20
    1562:	8c 93       	st	X, r24
    1564:	3c c0       	rjmp	.+120    	; 0x15de <DIO_Init+0x3ee>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 24) && (astrDIOConfigParameters[u8_i].enuPinNo < 32))	//if portd
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	c9 01       	movw	r24, r18
    156e:	88 0f       	add	r24, r24
    1570:	99 1f       	adc	r25, r25
    1572:	82 0f       	add	r24, r18
    1574:	93 1f       	adc	r25, r19
    1576:	fc 01       	movw	r30, r24
    1578:	e4 56       	subi	r30, 0x64	; 100
    157a:	ff 4f       	sbci	r31, 0xFF	; 255
    157c:	80 81       	ld	r24, Z
    157e:	88 31       	cpi	r24, 0x18	; 24
    1580:	70 f1       	brcs	.+92     	; 0x15de <DIO_Init+0x3ee>
    1582:	89 81       	ldd	r24, Y+1	; 0x01
    1584:	28 2f       	mov	r18, r24
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	c9 01       	movw	r24, r18
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	82 0f       	add	r24, r18
    1590:	93 1f       	adc	r25, r19
    1592:	fc 01       	movw	r30, r24
    1594:	e4 56       	subi	r30, 0x64	; 100
    1596:	ff 4f       	sbci	r31, 0xFF	; 255
    1598:	80 81       	ld	r24, Z
    159a:	80 32       	cpi	r24, 0x20	; 32
    159c:	00 f5       	brcc	.+64     	; 0x15de <DIO_Init+0x3ee>
			{
				SET_BIT(DDRD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
    159e:	a1 e3       	ldi	r26, 0x31	; 49
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e1 e3       	ldi	r30, 0x31	; 49
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	48 2f       	mov	r20, r24
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	28 2f       	mov	r18, r24
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	c9 01       	movw	r24, r18
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	82 0f       	add	r24, r18
    15b8:	93 1f       	adc	r25, r19
    15ba:	fc 01       	movw	r30, r24
    15bc:	e4 56       	subi	r30, 0x64	; 100
    15be:	ff 4f       	sbci	r31, 0xFF	; 255
    15c0:	80 81       	ld	r24, Z
    15c2:	88 2f       	mov	r24, r24
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	9c 01       	movw	r18, r24
    15c8:	28 51       	subi	r18, 0x18	; 24
    15ca:	30 40       	sbci	r19, 0x00	; 0
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <DIO_Init+0x3e6>
    15d2:	88 0f       	add	r24, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	2a 95       	dec	r18
    15d8:	e2 f7       	brpl	.-8      	; 0x15d2 <DIO_Init+0x3e2>
    15da:	84 2b       	or	r24, r20
    15dc:	8c 93       	st	X, r24
			}//end else if
		}//end else if

		//enable or disable pull-up resistor
		if(astrDIOConfigParameters[u8_i].enuPinDir == INPUT &&
    15de:	89 81       	ldd	r24, Y+1	; 0x01
    15e0:	28 2f       	mov	r18, r24
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	c9 01       	movw	r24, r18
    15e6:	88 0f       	add	r24, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	82 0f       	add	r24, r18
    15ec:	93 1f       	adc	r25, r19
    15ee:	fc 01       	movw	r30, r24
    15f0:	e3 56       	subi	r30, 0x63	; 99
    15f2:	ff 4f       	sbci	r31, 0xFF	; 255
    15f4:	80 81       	ld	r24, Z
    15f6:	88 23       	and	r24, r24
    15f8:	09 f0       	breq	.+2      	; 0x15fc <DIO_Init+0x40c>
    15fa:	fc c0       	rjmp	.+504    	; 0x17f4 <DIO_Init+0x604>
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	c9 01       	movw	r24, r18
    1604:	88 0f       	add	r24, r24
    1606:	99 1f       	adc	r25, r25
    1608:	82 0f       	add	r24, r18
    160a:	93 1f       	adc	r25, r19
    160c:	fc 01       	movw	r30, r24
    160e:	e2 56       	subi	r30, 0x62	; 98
    1610:	ff 4f       	sbci	r31, 0xFF	; 255
    1612:	80 81       	ld	r24, Z
    1614:	88 23       	and	r24, r24
    1616:	09 f0       	breq	.+2      	; 0x161a <DIO_Init+0x42a>
    1618:	ed c0       	rjmp	.+474    	; 0x17f4 <DIO_Init+0x604>
		   astrDIOConfigParameters[u8_i].enuPullupResEn == NO_CONNECTION)
		{
			if((astrDIOConfigParameters[u8_i].enuPinNo >= 0) && (astrDIOConfigParameters[u8_i].enuPinNo < 8))	//if porta
    161a:	89 81       	ldd	r24, Y+1	; 0x01
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	c9 01       	movw	r24, r18
    1622:	88 0f       	add	r24, r24
    1624:	99 1f       	adc	r25, r25
    1626:	82 0f       	add	r24, r18
    1628:	93 1f       	adc	r25, r19
    162a:	fc 01       	movw	r30, r24
    162c:	e4 56       	subi	r30, 0x64	; 100
    162e:	ff 4f       	sbci	r31, 0xFF	; 255
    1630:	80 81       	ld	r24, Z
    1632:	88 30       	cpi	r24, 0x08	; 8
    1634:	00 f5       	brcc	.+64     	; 0x1676 <DIO_Init+0x486>
			{
				CLR_BIT(PORTA_R, astrDIOConfigParameters[u8_i].enuPinNo);
    1636:	ab e3       	ldi	r26, 0x3B	; 59
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	eb e3       	ldi	r30, 0x3B	; 59
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	48 2f       	mov	r20, r24
    1642:	89 81       	ldd	r24, Y+1	; 0x01
    1644:	28 2f       	mov	r18, r24
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	c9 01       	movw	r24, r18
    164a:	88 0f       	add	r24, r24
    164c:	99 1f       	adc	r25, r25
    164e:	82 0f       	add	r24, r18
    1650:	93 1f       	adc	r25, r19
    1652:	fc 01       	movw	r30, r24
    1654:	e4 56       	subi	r30, 0x64	; 100
    1656:	ff 4f       	sbci	r31, 0xFF	; 255
    1658:	80 81       	ld	r24, Z
    165a:	28 2f       	mov	r18, r24
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	02 2e       	mov	r0, r18
    1664:	02 c0       	rjmp	.+4      	; 0x166a <DIO_Init+0x47a>
    1666:	88 0f       	add	r24, r24
    1668:	99 1f       	adc	r25, r25
    166a:	0a 94       	dec	r0
    166c:	e2 f7       	brpl	.-8      	; 0x1666 <DIO_Init+0x476>
    166e:	80 95       	com	r24
    1670:	84 23       	and	r24, r20
    1672:	8c 93       	st	X, r24
    1674:	c3 c1       	rjmp	.+902    	; 0x19fc <DIO_Init+0x80c>
			}//end if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 8) && (astrDIOConfigParameters[u8_i].enuPinNo < 16))	//if portb
    1676:	89 81       	ldd	r24, Y+1	; 0x01
    1678:	28 2f       	mov	r18, r24
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	c9 01       	movw	r24, r18
    167e:	88 0f       	add	r24, r24
    1680:	99 1f       	adc	r25, r25
    1682:	82 0f       	add	r24, r18
    1684:	93 1f       	adc	r25, r19
    1686:	fc 01       	movw	r30, r24
    1688:	e4 56       	subi	r30, 0x64	; 100
    168a:	ff 4f       	sbci	r31, 0xFF	; 255
    168c:	80 81       	ld	r24, Z
    168e:	88 30       	cpi	r24, 0x08	; 8
    1690:	88 f1       	brcs	.+98     	; 0x16f4 <DIO_Init+0x504>
    1692:	89 81       	ldd	r24, Y+1	; 0x01
    1694:	28 2f       	mov	r18, r24
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	c9 01       	movw	r24, r18
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	82 0f       	add	r24, r18
    16a0:	93 1f       	adc	r25, r19
    16a2:	fc 01       	movw	r30, r24
    16a4:	e4 56       	subi	r30, 0x64	; 100
    16a6:	ff 4f       	sbci	r31, 0xFF	; 255
    16a8:	80 81       	ld	r24, Z
    16aa:	80 31       	cpi	r24, 0x10	; 16
    16ac:	18 f5       	brcc	.+70     	; 0x16f4 <DIO_Init+0x504>
			{
				CLR_BIT(PORTB_R,(astrDIOConfigParameters[u8_i].enuPinNo - 8));
    16ae:	a8 e3       	ldi	r26, 0x38	; 56
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	e8 e3       	ldi	r30, 0x38	; 56
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	48 2f       	mov	r20, r24
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	c9 01       	movw	r24, r18
    16c2:	88 0f       	add	r24, r24
    16c4:	99 1f       	adc	r25, r25
    16c6:	82 0f       	add	r24, r18
    16c8:	93 1f       	adc	r25, r19
    16ca:	fc 01       	movw	r30, r24
    16cc:	e4 56       	subi	r30, 0x64	; 100
    16ce:	ff 4f       	sbci	r31, 0xFF	; 255
    16d0:	80 81       	ld	r24, Z
    16d2:	88 2f       	mov	r24, r24
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	9c 01       	movw	r18, r24
    16d8:	28 50       	subi	r18, 0x08	; 8
    16da:	30 40       	sbci	r19, 0x00	; 0
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	02 2e       	mov	r0, r18
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <DIO_Init+0x4f8>
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	0a 94       	dec	r0
    16ea:	e2 f7       	brpl	.-8      	; 0x16e4 <DIO_Init+0x4f4>
    16ec:	80 95       	com	r24
    16ee:	84 23       	and	r24, r20
    16f0:	8c 93       	st	X, r24
    16f2:	84 c1       	rjmp	.+776    	; 0x19fc <DIO_Init+0x80c>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 16) && (astrDIOConfigParameters[u8_i].enuPinNo < 24))	//if portc
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
    16f6:	28 2f       	mov	r18, r24
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	c9 01       	movw	r24, r18
    16fc:	88 0f       	add	r24, r24
    16fe:	99 1f       	adc	r25, r25
    1700:	82 0f       	add	r24, r18
    1702:	93 1f       	adc	r25, r19
    1704:	fc 01       	movw	r30, r24
    1706:	e4 56       	subi	r30, 0x64	; 100
    1708:	ff 4f       	sbci	r31, 0xFF	; 255
    170a:	80 81       	ld	r24, Z
    170c:	80 31       	cpi	r24, 0x10	; 16
    170e:	88 f1       	brcs	.+98     	; 0x1772 <DIO_Init+0x582>
    1710:	89 81       	ldd	r24, Y+1	; 0x01
    1712:	28 2f       	mov	r18, r24
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	c9 01       	movw	r24, r18
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	82 0f       	add	r24, r18
    171e:	93 1f       	adc	r25, r19
    1720:	fc 01       	movw	r30, r24
    1722:	e4 56       	subi	r30, 0x64	; 100
    1724:	ff 4f       	sbci	r31, 0xFF	; 255
    1726:	80 81       	ld	r24, Z
    1728:	88 31       	cpi	r24, 0x18	; 24
    172a:	18 f5       	brcc	.+70     	; 0x1772 <DIO_Init+0x582>
			{
				CLR_BIT(PORTC_R,(astrDIOConfigParameters[u8_i].enuPinNo - 16));
    172c:	a5 e3       	ldi	r26, 0x35	; 53
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	e5 e3       	ldi	r30, 0x35	; 53
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	48 2f       	mov	r20, r24
    1738:	89 81       	ldd	r24, Y+1	; 0x01
    173a:	28 2f       	mov	r18, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	c9 01       	movw	r24, r18
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	82 0f       	add	r24, r18
    1746:	93 1f       	adc	r25, r19
    1748:	fc 01       	movw	r30, r24
    174a:	e4 56       	subi	r30, 0x64	; 100
    174c:	ff 4f       	sbci	r31, 0xFF	; 255
    174e:	80 81       	ld	r24, Z
    1750:	88 2f       	mov	r24, r24
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	9c 01       	movw	r18, r24
    1756:	20 51       	subi	r18, 0x10	; 16
    1758:	30 40       	sbci	r19, 0x00	; 0
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	02 2e       	mov	r0, r18
    1760:	02 c0       	rjmp	.+4      	; 0x1766 <DIO_Init+0x576>
    1762:	88 0f       	add	r24, r24
    1764:	99 1f       	adc	r25, r25
    1766:	0a 94       	dec	r0
    1768:	e2 f7       	brpl	.-8      	; 0x1762 <DIO_Init+0x572>
    176a:	80 95       	com	r24
    176c:	84 23       	and	r24, r20
    176e:	8c 93       	st	X, r24
    1770:	45 c1       	rjmp	.+650    	; 0x19fc <DIO_Init+0x80c>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 24) && (astrDIOConfigParameters[u8_i].enuPinNo < 32))	//if portd
    1772:	89 81       	ldd	r24, Y+1	; 0x01
    1774:	28 2f       	mov	r18, r24
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	c9 01       	movw	r24, r18
    177a:	88 0f       	add	r24, r24
    177c:	99 1f       	adc	r25, r25
    177e:	82 0f       	add	r24, r18
    1780:	93 1f       	adc	r25, r19
    1782:	fc 01       	movw	r30, r24
    1784:	e4 56       	subi	r30, 0x64	; 100
    1786:	ff 4f       	sbci	r31, 0xFF	; 255
    1788:	80 81       	ld	r24, Z
    178a:	88 31       	cpi	r24, 0x18	; 24
    178c:	08 f4       	brcc	.+2      	; 0x1790 <DIO_Init+0x5a0>
    178e:	36 c1       	rjmp	.+620    	; 0x19fc <DIO_Init+0x80c>
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	c9 01       	movw	r24, r18
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	82 0f       	add	r24, r18
    179e:	93 1f       	adc	r25, r19
    17a0:	fc 01       	movw	r30, r24
    17a2:	e4 56       	subi	r30, 0x64	; 100
    17a4:	ff 4f       	sbci	r31, 0xFF	; 255
    17a6:	80 81       	ld	r24, Z
    17a8:	80 32       	cpi	r24, 0x20	; 32
    17aa:	08 f0       	brcs	.+2      	; 0x17ae <DIO_Init+0x5be>
    17ac:	27 c1       	rjmp	.+590    	; 0x19fc <DIO_Init+0x80c>
			{
				CLR_BIT(PORTD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
    17ae:	a2 e3       	ldi	r26, 0x32	; 50
    17b0:	b0 e0       	ldi	r27, 0x00	; 0
    17b2:	e2 e3       	ldi	r30, 0x32	; 50
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	80 81       	ld	r24, Z
    17b8:	48 2f       	mov	r20, r24
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	28 2f       	mov	r18, r24
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	c9 01       	movw	r24, r18
    17c2:	88 0f       	add	r24, r24
    17c4:	99 1f       	adc	r25, r25
    17c6:	82 0f       	add	r24, r18
    17c8:	93 1f       	adc	r25, r19
    17ca:	fc 01       	movw	r30, r24
    17cc:	e4 56       	subi	r30, 0x64	; 100
    17ce:	ff 4f       	sbci	r31, 0xFF	; 255
    17d0:	80 81       	ld	r24, Z
    17d2:	88 2f       	mov	r24, r24
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	9c 01       	movw	r18, r24
    17d8:	28 51       	subi	r18, 0x18	; 24
    17da:	30 40       	sbci	r19, 0x00	; 0
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	02 2e       	mov	r0, r18
    17e2:	02 c0       	rjmp	.+4      	; 0x17e8 <DIO_Init+0x5f8>
    17e4:	88 0f       	add	r24, r24
    17e6:	99 1f       	adc	r25, r25
    17e8:	0a 94       	dec	r0
    17ea:	e2 f7       	brpl	.-8      	; 0x17e4 <DIO_Init+0x5f4>
    17ec:	80 95       	com	r24
    17ee:	84 23       	and	r24, r20
    17f0:	8c 93       	st	X, r24
    17f2:	04 c1       	rjmp	.+520    	; 0x19fc <DIO_Init+0x80c>
			}//end else if
		}//end if

		else if(astrDIOConfigParameters[u8_i].enuPinDir == INPUT &&
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	28 2f       	mov	r18, r24
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	c9 01       	movw	r24, r18
    17fc:	88 0f       	add	r24, r24
    17fe:	99 1f       	adc	r25, r25
    1800:	82 0f       	add	r24, r18
    1802:	93 1f       	adc	r25, r19
    1804:	fc 01       	movw	r30, r24
    1806:	e3 56       	subi	r30, 0x63	; 99
    1808:	ff 4f       	sbci	r31, 0xFF	; 255
    180a:	80 81       	ld	r24, Z
    180c:	88 23       	and	r24, r24
    180e:	09 f0       	breq	.+2      	; 0x1812 <DIO_Init+0x622>
    1810:	f5 c0       	rjmp	.+490    	; 0x19fc <DIO_Init+0x80c>
    1812:	89 81       	ldd	r24, Y+1	; 0x01
    1814:	28 2f       	mov	r18, r24
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	c9 01       	movw	r24, r18
    181a:	88 0f       	add	r24, r24
    181c:	99 1f       	adc	r25, r25
    181e:	82 0f       	add	r24, r18
    1820:	93 1f       	adc	r25, r19
    1822:	fc 01       	movw	r30, r24
    1824:	e2 56       	subi	r30, 0x62	; 98
    1826:	ff 4f       	sbci	r31, 0xFF	; 255
    1828:	80 81       	ld	r24, Z
    182a:	81 30       	cpi	r24, 0x01	; 1
    182c:	09 f0       	breq	.+2      	; 0x1830 <DIO_Init+0x640>
    182e:	e6 c0       	rjmp	.+460    	; 0x19fc <DIO_Init+0x80c>
				astrDIOConfigParameters[u8_i].enuPullupResEn == PULL_UP_ENABLE)
		{
			if((astrDIOConfigParameters[u8_i].enuPinNo >= 0) && (astrDIOConfigParameters[u8_i].enuPinNo < 8))	//if porta
    1830:	89 81       	ldd	r24, Y+1	; 0x01
    1832:	28 2f       	mov	r18, r24
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	c9 01       	movw	r24, r18
    1838:	88 0f       	add	r24, r24
    183a:	99 1f       	adc	r25, r25
    183c:	82 0f       	add	r24, r18
    183e:	93 1f       	adc	r25, r19
    1840:	fc 01       	movw	r30, r24
    1842:	e4 56       	subi	r30, 0x64	; 100
    1844:	ff 4f       	sbci	r31, 0xFF	; 255
    1846:	80 81       	ld	r24, Z
    1848:	88 30       	cpi	r24, 0x08	; 8
    184a:	f8 f4       	brcc	.+62     	; 0x188a <DIO_Init+0x69a>
			{
				SET_BIT(PORTA_R, astrDIOConfigParameters[u8_i].enuPinNo);
    184c:	ab e3       	ldi	r26, 0x3B	; 59
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	eb e3       	ldi	r30, 0x3B	; 59
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	48 2f       	mov	r20, r24
    1858:	89 81       	ldd	r24, Y+1	; 0x01
    185a:	28 2f       	mov	r18, r24
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	c9 01       	movw	r24, r18
    1860:	88 0f       	add	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	82 0f       	add	r24, r18
    1866:	93 1f       	adc	r25, r19
    1868:	fc 01       	movw	r30, r24
    186a:	e4 56       	subi	r30, 0x64	; 100
    186c:	ff 4f       	sbci	r31, 0xFF	; 255
    186e:	80 81       	ld	r24, Z
    1870:	28 2f       	mov	r18, r24
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	02 2e       	mov	r0, r18
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <DIO_Init+0x690>
    187c:	88 0f       	add	r24, r24
    187e:	99 1f       	adc	r25, r25
    1880:	0a 94       	dec	r0
    1882:	e2 f7       	brpl	.-8      	; 0x187c <DIO_Init+0x68c>
    1884:	84 2b       	or	r24, r20
    1886:	8c 93       	st	X, r24
    1888:	b9 c0       	rjmp	.+370    	; 0x19fc <DIO_Init+0x80c>
			}//end if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 8) && (astrDIOConfigParameters[u8_i].enuPinNo < 16))	//if portb
    188a:	89 81       	ldd	r24, Y+1	; 0x01
    188c:	28 2f       	mov	r18, r24
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	c9 01       	movw	r24, r18
    1892:	88 0f       	add	r24, r24
    1894:	99 1f       	adc	r25, r25
    1896:	82 0f       	add	r24, r18
    1898:	93 1f       	adc	r25, r19
    189a:	fc 01       	movw	r30, r24
    189c:	e4 56       	subi	r30, 0x64	; 100
    189e:	ff 4f       	sbci	r31, 0xFF	; 255
    18a0:	80 81       	ld	r24, Z
    18a2:	88 30       	cpi	r24, 0x08	; 8
    18a4:	80 f1       	brcs	.+96     	; 0x1906 <DIO_Init+0x716>
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	28 2f       	mov	r18, r24
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	c9 01       	movw	r24, r18
    18ae:	88 0f       	add	r24, r24
    18b0:	99 1f       	adc	r25, r25
    18b2:	82 0f       	add	r24, r18
    18b4:	93 1f       	adc	r25, r19
    18b6:	fc 01       	movw	r30, r24
    18b8:	e4 56       	subi	r30, 0x64	; 100
    18ba:	ff 4f       	sbci	r31, 0xFF	; 255
    18bc:	80 81       	ld	r24, Z
    18be:	80 31       	cpi	r24, 0x10	; 16
    18c0:	10 f5       	brcc	.+68     	; 0x1906 <DIO_Init+0x716>
			{
				SET_BIT(PORTB_R,(astrDIOConfigParameters[u8_i].enuPinNo - 8));
    18c2:	a8 e3       	ldi	r26, 0x38	; 56
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	e8 e3       	ldi	r30, 0x38	; 56
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	48 2f       	mov	r20, r24
    18ce:	89 81       	ldd	r24, Y+1	; 0x01
    18d0:	28 2f       	mov	r18, r24
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	c9 01       	movw	r24, r18
    18d6:	88 0f       	add	r24, r24
    18d8:	99 1f       	adc	r25, r25
    18da:	82 0f       	add	r24, r18
    18dc:	93 1f       	adc	r25, r19
    18de:	fc 01       	movw	r30, r24
    18e0:	e4 56       	subi	r30, 0x64	; 100
    18e2:	ff 4f       	sbci	r31, 0xFF	; 255
    18e4:	80 81       	ld	r24, Z
    18e6:	88 2f       	mov	r24, r24
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	9c 01       	movw	r18, r24
    18ec:	28 50       	subi	r18, 0x08	; 8
    18ee:	30 40       	sbci	r19, 0x00	; 0
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	02 2e       	mov	r0, r18
    18f6:	02 c0       	rjmp	.+4      	; 0x18fc <DIO_Init+0x70c>
    18f8:	88 0f       	add	r24, r24
    18fa:	99 1f       	adc	r25, r25
    18fc:	0a 94       	dec	r0
    18fe:	e2 f7       	brpl	.-8      	; 0x18f8 <DIO_Init+0x708>
    1900:	84 2b       	or	r24, r20
    1902:	8c 93       	st	X, r24
    1904:	7b c0       	rjmp	.+246    	; 0x19fc <DIO_Init+0x80c>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 16) && (astrDIOConfigParameters[u8_i].enuPinNo < 24))	//if portc
    1906:	89 81       	ldd	r24, Y+1	; 0x01
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	c9 01       	movw	r24, r18
    190e:	88 0f       	add	r24, r24
    1910:	99 1f       	adc	r25, r25
    1912:	82 0f       	add	r24, r18
    1914:	93 1f       	adc	r25, r19
    1916:	fc 01       	movw	r30, r24
    1918:	e4 56       	subi	r30, 0x64	; 100
    191a:	ff 4f       	sbci	r31, 0xFF	; 255
    191c:	80 81       	ld	r24, Z
    191e:	80 31       	cpi	r24, 0x10	; 16
    1920:	80 f1       	brcs	.+96     	; 0x1982 <DIO_Init+0x792>
    1922:	89 81       	ldd	r24, Y+1	; 0x01
    1924:	28 2f       	mov	r18, r24
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	c9 01       	movw	r24, r18
    192a:	88 0f       	add	r24, r24
    192c:	99 1f       	adc	r25, r25
    192e:	82 0f       	add	r24, r18
    1930:	93 1f       	adc	r25, r19
    1932:	fc 01       	movw	r30, r24
    1934:	e4 56       	subi	r30, 0x64	; 100
    1936:	ff 4f       	sbci	r31, 0xFF	; 255
    1938:	80 81       	ld	r24, Z
    193a:	88 31       	cpi	r24, 0x18	; 24
    193c:	10 f5       	brcc	.+68     	; 0x1982 <DIO_Init+0x792>
			{
				SET_BIT(PORTC_R,(astrDIOConfigParameters[u8_i].enuPinNo - 16));
    193e:	a5 e3       	ldi	r26, 0x35	; 53
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	e5 e3       	ldi	r30, 0x35	; 53
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	80 81       	ld	r24, Z
    1948:	48 2f       	mov	r20, r24
    194a:	89 81       	ldd	r24, Y+1	; 0x01
    194c:	28 2f       	mov	r18, r24
    194e:	30 e0       	ldi	r19, 0x00	; 0
    1950:	c9 01       	movw	r24, r18
    1952:	88 0f       	add	r24, r24
    1954:	99 1f       	adc	r25, r25
    1956:	82 0f       	add	r24, r18
    1958:	93 1f       	adc	r25, r19
    195a:	fc 01       	movw	r30, r24
    195c:	e4 56       	subi	r30, 0x64	; 100
    195e:	ff 4f       	sbci	r31, 0xFF	; 255
    1960:	80 81       	ld	r24, Z
    1962:	88 2f       	mov	r24, r24
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	9c 01       	movw	r18, r24
    1968:	20 51       	subi	r18, 0x10	; 16
    196a:	30 40       	sbci	r19, 0x00	; 0
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	02 2e       	mov	r0, r18
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <DIO_Init+0x788>
    1974:	88 0f       	add	r24, r24
    1976:	99 1f       	adc	r25, r25
    1978:	0a 94       	dec	r0
    197a:	e2 f7       	brpl	.-8      	; 0x1974 <DIO_Init+0x784>
    197c:	84 2b       	or	r24, r20
    197e:	8c 93       	st	X, r24
    1980:	3d c0       	rjmp	.+122    	; 0x19fc <DIO_Init+0x80c>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 24) && (astrDIOConfigParameters[u8_i].enuPinNo < 32))	//if portd
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	28 2f       	mov	r18, r24
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	c9 01       	movw	r24, r18
    198a:	88 0f       	add	r24, r24
    198c:	99 1f       	adc	r25, r25
    198e:	82 0f       	add	r24, r18
    1990:	93 1f       	adc	r25, r19
    1992:	fc 01       	movw	r30, r24
    1994:	e4 56       	subi	r30, 0x64	; 100
    1996:	ff 4f       	sbci	r31, 0xFF	; 255
    1998:	80 81       	ld	r24, Z
    199a:	88 31       	cpi	r24, 0x18	; 24
    199c:	78 f1       	brcs	.+94     	; 0x19fc <DIO_Init+0x80c>
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	28 2f       	mov	r18, r24
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	c9 01       	movw	r24, r18
    19a6:	88 0f       	add	r24, r24
    19a8:	99 1f       	adc	r25, r25
    19aa:	82 0f       	add	r24, r18
    19ac:	93 1f       	adc	r25, r19
    19ae:	fc 01       	movw	r30, r24
    19b0:	e4 56       	subi	r30, 0x64	; 100
    19b2:	ff 4f       	sbci	r31, 0xFF	; 255
    19b4:	80 81       	ld	r24, Z
    19b6:	80 32       	cpi	r24, 0x20	; 32
    19b8:	08 f5       	brcc	.+66     	; 0x19fc <DIO_Init+0x80c>
			{
				SET_BIT(PORTD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
    19ba:	a2 e3       	ldi	r26, 0x32	; 50
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	e2 e3       	ldi	r30, 0x32	; 50
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	48 2f       	mov	r20, r24
    19c6:	89 81       	ldd	r24, Y+1	; 0x01
    19c8:	28 2f       	mov	r18, r24
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	c9 01       	movw	r24, r18
    19ce:	88 0f       	add	r24, r24
    19d0:	99 1f       	adc	r25, r25
    19d2:	82 0f       	add	r24, r18
    19d4:	93 1f       	adc	r25, r19
    19d6:	fc 01       	movw	r30, r24
    19d8:	e4 56       	subi	r30, 0x64	; 100
    19da:	ff 4f       	sbci	r31, 0xFF	; 255
    19dc:	80 81       	ld	r24, Z
    19de:	88 2f       	mov	r24, r24
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	9c 01       	movw	r18, r24
    19e4:	28 51       	subi	r18, 0x18	; 24
    19e6:	30 40       	sbci	r19, 0x00	; 0
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	02 2e       	mov	r0, r18
    19ee:	02 c0       	rjmp	.+4      	; 0x19f4 <DIO_Init+0x804>
    19f0:	88 0f       	add	r24, r24
    19f2:	99 1f       	adc	r25, r25
    19f4:	0a 94       	dec	r0
    19f6:	e2 f7       	brpl	.-8      	; 0x19f0 <DIO_Init+0x800>
    19f8:	84 2b       	or	r24, r20
    19fa:	8c 93       	st	X, r24
*************************************************************************************************/
enuErrorStatus_t DIO_Init(void)
{
	uint8_t u8_i;

	for(u8_i=0; u8_i<DIO_GROUPS_NO; u8_i++)
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
    19fe:	8f 5f       	subi	r24, 0xFF	; 255
    1a00:	89 83       	std	Y+1, r24	; 0x01
    1a02:	89 81       	ldd	r24, Y+1	; 0x01
    1a04:	8c 31       	cpi	r24, 0x1C	; 28
    1a06:	08 f4       	brcc	.+2      	; 0x1a0a <DIO_Init+0x81a>
    1a08:	fa cb       	rjmp	.-2060   	; 0x11fe <DIO_Init+0xe>
				SET_BIT(PORTD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
			}//end else if
		}//end else if

	}//end for
    return E_OK;
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
}//end DIO_Init
    1a0c:	0f 90       	pop	r0
    1a0e:	cf 91       	pop	r28
    1a10:	df 91       	pop	r29
    1a12:	08 95       	ret

00001a14 <DIO_Write>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to write a digital value into the selected DIO pin
*************************************************************************************************/
enuErrorStatus_t DIO_Write(uint8_t u8_GroupId, uint8_t u8_Data)
{
    1a14:	df 93       	push	r29
    1a16:	cf 93       	push	r28
    1a18:	00 d0       	rcall	.+0      	; 0x1a1a <DIO_Write+0x6>
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
    1a1e:	89 83       	std	Y+1, r24	; 0x01
    1a20:	6a 83       	std	Y+2, r22	; 0x02
//	if(DIO_Init() == E_ERROR)	return E_ERROR;
//	else{

		if (u8_Data == LOW)
    1a22:	8a 81       	ldd	r24, Y+2	; 0x02
    1a24:	88 23       	and	r24, r24
    1a26:	09 f0       	breq	.+2      	; 0x1a2a <DIO_Write+0x16>
    1a28:	ed c0       	rjmp	.+474    	; 0x1c04 <DIO_Write+0x1f0>
	    {
			if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 0) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 8))	//if porta
    1a2a:	89 81       	ldd	r24, Y+1	; 0x01
    1a2c:	28 2f       	mov	r18, r24
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	c9 01       	movw	r24, r18
    1a32:	88 0f       	add	r24, r24
    1a34:	99 1f       	adc	r25, r25
    1a36:	82 0f       	add	r24, r18
    1a38:	93 1f       	adc	r25, r19
    1a3a:	fc 01       	movw	r30, r24
    1a3c:	e4 56       	subi	r30, 0x64	; 100
    1a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a40:	80 81       	ld	r24, Z
    1a42:	88 30       	cpi	r24, 0x08	; 8
    1a44:	00 f5       	brcc	.+64     	; 0x1a86 <DIO_Write+0x72>
			{
				CLR_BIT(PORTA_R, astrDIOConfigParameters[u8_GroupId].enuPinNo);
    1a46:	ab e3       	ldi	r26, 0x3B	; 59
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	eb e3       	ldi	r30, 0x3B	; 59
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	48 2f       	mov	r20, r24
    1a52:	89 81       	ldd	r24, Y+1	; 0x01
    1a54:	28 2f       	mov	r18, r24
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	c9 01       	movw	r24, r18
    1a5a:	88 0f       	add	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	82 0f       	add	r24, r18
    1a60:	93 1f       	adc	r25, r19
    1a62:	fc 01       	movw	r30, r24
    1a64:	e4 56       	subi	r30, 0x64	; 100
    1a66:	ff 4f       	sbci	r31, 0xFF	; 255
    1a68:	80 81       	ld	r24, Z
    1a6a:	28 2f       	mov	r18, r24
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	90 e0       	ldi	r25, 0x00	; 0
    1a72:	02 2e       	mov	r0, r18
    1a74:	02 c0       	rjmp	.+4      	; 0x1a7a <DIO_Write+0x66>
    1a76:	88 0f       	add	r24, r24
    1a78:	99 1f       	adc	r25, r25
    1a7a:	0a 94       	dec	r0
    1a7c:	e2 f7       	brpl	.-8      	; 0x1a76 <DIO_Write+0x62>
    1a7e:	80 95       	com	r24
    1a80:	84 23       	and	r24, r20
    1a82:	8c 93       	st	X, r24
    1a84:	a9 c1       	rjmp	.+850    	; 0x1dd8 <DIO_Write+0x3c4>
			}//end if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 8) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 16))	//if portb
    1a86:	89 81       	ldd	r24, Y+1	; 0x01
    1a88:	28 2f       	mov	r18, r24
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	c9 01       	movw	r24, r18
    1a8e:	88 0f       	add	r24, r24
    1a90:	99 1f       	adc	r25, r25
    1a92:	82 0f       	add	r24, r18
    1a94:	93 1f       	adc	r25, r19
    1a96:	fc 01       	movw	r30, r24
    1a98:	e4 56       	subi	r30, 0x64	; 100
    1a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9c:	80 81       	ld	r24, Z
    1a9e:	88 30       	cpi	r24, 0x08	; 8
    1aa0:	88 f1       	brcs	.+98     	; 0x1b04 <DIO_Write+0xf0>
    1aa2:	89 81       	ldd	r24, Y+1	; 0x01
    1aa4:	28 2f       	mov	r18, r24
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	c9 01       	movw	r24, r18
    1aaa:	88 0f       	add	r24, r24
    1aac:	99 1f       	adc	r25, r25
    1aae:	82 0f       	add	r24, r18
    1ab0:	93 1f       	adc	r25, r19
    1ab2:	fc 01       	movw	r30, r24
    1ab4:	e4 56       	subi	r30, 0x64	; 100
    1ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab8:	80 81       	ld	r24, Z
    1aba:	80 31       	cpi	r24, 0x10	; 16
    1abc:	18 f5       	brcc	.+70     	; 0x1b04 <DIO_Write+0xf0>
			{
				CLR_BIT(PORTB_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 8));
    1abe:	a8 e3       	ldi	r26, 0x38	; 56
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	e8 e3       	ldi	r30, 0x38	; 56
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	48 2f       	mov	r20, r24
    1aca:	89 81       	ldd	r24, Y+1	; 0x01
    1acc:	28 2f       	mov	r18, r24
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	c9 01       	movw	r24, r18
    1ad2:	88 0f       	add	r24, r24
    1ad4:	99 1f       	adc	r25, r25
    1ad6:	82 0f       	add	r24, r18
    1ad8:	93 1f       	adc	r25, r19
    1ada:	fc 01       	movw	r30, r24
    1adc:	e4 56       	subi	r30, 0x64	; 100
    1ade:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae0:	80 81       	ld	r24, Z
    1ae2:	88 2f       	mov	r24, r24
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	9c 01       	movw	r18, r24
    1ae8:	28 50       	subi	r18, 0x08	; 8
    1aea:	30 40       	sbci	r19, 0x00	; 0
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	02 2e       	mov	r0, r18
    1af2:	02 c0       	rjmp	.+4      	; 0x1af8 <DIO_Write+0xe4>
    1af4:	88 0f       	add	r24, r24
    1af6:	99 1f       	adc	r25, r25
    1af8:	0a 94       	dec	r0
    1afa:	e2 f7       	brpl	.-8      	; 0x1af4 <DIO_Write+0xe0>
    1afc:	80 95       	com	r24
    1afe:	84 23       	and	r24, r20
    1b00:	8c 93       	st	X, r24
    1b02:	6a c1       	rjmp	.+724    	; 0x1dd8 <DIO_Write+0x3c4>
			}//end else if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 16) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 24))	//if portc
    1b04:	89 81       	ldd	r24, Y+1	; 0x01
    1b06:	28 2f       	mov	r18, r24
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	c9 01       	movw	r24, r18
    1b0c:	88 0f       	add	r24, r24
    1b0e:	99 1f       	adc	r25, r25
    1b10:	82 0f       	add	r24, r18
    1b12:	93 1f       	adc	r25, r19
    1b14:	fc 01       	movw	r30, r24
    1b16:	e4 56       	subi	r30, 0x64	; 100
    1b18:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1a:	80 81       	ld	r24, Z
    1b1c:	80 31       	cpi	r24, 0x10	; 16
    1b1e:	88 f1       	brcs	.+98     	; 0x1b82 <DIO_Write+0x16e>
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	28 2f       	mov	r18, r24
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	c9 01       	movw	r24, r18
    1b28:	88 0f       	add	r24, r24
    1b2a:	99 1f       	adc	r25, r25
    1b2c:	82 0f       	add	r24, r18
    1b2e:	93 1f       	adc	r25, r19
    1b30:	fc 01       	movw	r30, r24
    1b32:	e4 56       	subi	r30, 0x64	; 100
    1b34:	ff 4f       	sbci	r31, 0xFF	; 255
    1b36:	80 81       	ld	r24, Z
    1b38:	88 31       	cpi	r24, 0x18	; 24
    1b3a:	18 f5       	brcc	.+70     	; 0x1b82 <DIO_Write+0x16e>
			{
				CLR_BIT(PORTC_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 16));
    1b3c:	a5 e3       	ldi	r26, 0x35	; 53
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	e5 e3       	ldi	r30, 0x35	; 53
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	48 2f       	mov	r20, r24
    1b48:	89 81       	ldd	r24, Y+1	; 0x01
    1b4a:	28 2f       	mov	r18, r24
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	c9 01       	movw	r24, r18
    1b50:	88 0f       	add	r24, r24
    1b52:	99 1f       	adc	r25, r25
    1b54:	82 0f       	add	r24, r18
    1b56:	93 1f       	adc	r25, r19
    1b58:	fc 01       	movw	r30, r24
    1b5a:	e4 56       	subi	r30, 0x64	; 100
    1b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5e:	80 81       	ld	r24, Z
    1b60:	88 2f       	mov	r24, r24
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	9c 01       	movw	r18, r24
    1b66:	20 51       	subi	r18, 0x10	; 16
    1b68:	30 40       	sbci	r19, 0x00	; 0
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	02 2e       	mov	r0, r18
    1b70:	02 c0       	rjmp	.+4      	; 0x1b76 <DIO_Write+0x162>
    1b72:	88 0f       	add	r24, r24
    1b74:	99 1f       	adc	r25, r25
    1b76:	0a 94       	dec	r0
    1b78:	e2 f7       	brpl	.-8      	; 0x1b72 <DIO_Write+0x15e>
    1b7a:	80 95       	com	r24
    1b7c:	84 23       	and	r24, r20
    1b7e:	8c 93       	st	X, r24
    1b80:	2b c1       	rjmp	.+598    	; 0x1dd8 <DIO_Write+0x3c4>
			}//end else if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 24) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 32))	//if portd
    1b82:	89 81       	ldd	r24, Y+1	; 0x01
    1b84:	28 2f       	mov	r18, r24
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	c9 01       	movw	r24, r18
    1b8a:	88 0f       	add	r24, r24
    1b8c:	99 1f       	adc	r25, r25
    1b8e:	82 0f       	add	r24, r18
    1b90:	93 1f       	adc	r25, r19
    1b92:	fc 01       	movw	r30, r24
    1b94:	e4 56       	subi	r30, 0x64	; 100
    1b96:	ff 4f       	sbci	r31, 0xFF	; 255
    1b98:	80 81       	ld	r24, Z
    1b9a:	88 31       	cpi	r24, 0x18	; 24
    1b9c:	08 f4       	brcc	.+2      	; 0x1ba0 <DIO_Write+0x18c>
    1b9e:	1c c1       	rjmp	.+568    	; 0x1dd8 <DIO_Write+0x3c4>
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	28 2f       	mov	r18, r24
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	c9 01       	movw	r24, r18
    1ba8:	88 0f       	add	r24, r24
    1baa:	99 1f       	adc	r25, r25
    1bac:	82 0f       	add	r24, r18
    1bae:	93 1f       	adc	r25, r19
    1bb0:	fc 01       	movw	r30, r24
    1bb2:	e4 56       	subi	r30, 0x64	; 100
    1bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb6:	80 81       	ld	r24, Z
    1bb8:	80 32       	cpi	r24, 0x20	; 32
    1bba:	08 f0       	brcs	.+2      	; 0x1bbe <DIO_Write+0x1aa>
    1bbc:	0d c1       	rjmp	.+538    	; 0x1dd8 <DIO_Write+0x3c4>
			{
				CLR_BIT(PORTD_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 24));
    1bbe:	a2 e3       	ldi	r26, 0x32	; 50
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	e2 e3       	ldi	r30, 0x32	; 50
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	80 81       	ld	r24, Z
    1bc8:	48 2f       	mov	r20, r24
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
    1bcc:	28 2f       	mov	r18, r24
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	c9 01       	movw	r24, r18
    1bd2:	88 0f       	add	r24, r24
    1bd4:	99 1f       	adc	r25, r25
    1bd6:	82 0f       	add	r24, r18
    1bd8:	93 1f       	adc	r25, r19
    1bda:	fc 01       	movw	r30, r24
    1bdc:	e4 56       	subi	r30, 0x64	; 100
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	80 81       	ld	r24, Z
    1be2:	88 2f       	mov	r24, r24
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	9c 01       	movw	r18, r24
    1be8:	28 51       	subi	r18, 0x18	; 24
    1bea:	30 40       	sbci	r19, 0x00	; 0
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	02 2e       	mov	r0, r18
    1bf2:	02 c0       	rjmp	.+4      	; 0x1bf8 <DIO_Write+0x1e4>
    1bf4:	88 0f       	add	r24, r24
    1bf6:	99 1f       	adc	r25, r25
    1bf8:	0a 94       	dec	r0
    1bfa:	e2 f7       	brpl	.-8      	; 0x1bf4 <DIO_Write+0x1e0>
    1bfc:	80 95       	com	r24
    1bfe:	84 23       	and	r24, r20
    1c00:	8c 93       	st	X, r24
    1c02:	ea c0       	rjmp	.+468    	; 0x1dd8 <DIO_Write+0x3c4>
			}//end else if
	    }//end if

	    else if(u8_Data == HIGH)
    1c04:	8a 81       	ldd	r24, Y+2	; 0x02
    1c06:	81 30       	cpi	r24, 0x01	; 1
    1c08:	09 f0       	breq	.+2      	; 0x1c0c <DIO_Write+0x1f8>
    1c0a:	e6 c0       	rjmp	.+460    	; 0x1dd8 <DIO_Write+0x3c4>
	    {
			if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 0) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 8))	//if porta
    1c0c:	89 81       	ldd	r24, Y+1	; 0x01
    1c0e:	28 2f       	mov	r18, r24
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	c9 01       	movw	r24, r18
    1c14:	88 0f       	add	r24, r24
    1c16:	99 1f       	adc	r25, r25
    1c18:	82 0f       	add	r24, r18
    1c1a:	93 1f       	adc	r25, r19
    1c1c:	fc 01       	movw	r30, r24
    1c1e:	e4 56       	subi	r30, 0x64	; 100
    1c20:	ff 4f       	sbci	r31, 0xFF	; 255
    1c22:	80 81       	ld	r24, Z
    1c24:	88 30       	cpi	r24, 0x08	; 8
    1c26:	f8 f4       	brcc	.+62     	; 0x1c66 <DIO_Write+0x252>
			{
				SET_BIT(PORTA_R, astrDIOConfigParameters[u8_GroupId].enuPinNo);
    1c28:	ab e3       	ldi	r26, 0x3B	; 59
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	eb e3       	ldi	r30, 0x3B	; 59
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	80 81       	ld	r24, Z
    1c32:	48 2f       	mov	r20, r24
    1c34:	89 81       	ldd	r24, Y+1	; 0x01
    1c36:	28 2f       	mov	r18, r24
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	c9 01       	movw	r24, r18
    1c3c:	88 0f       	add	r24, r24
    1c3e:	99 1f       	adc	r25, r25
    1c40:	82 0f       	add	r24, r18
    1c42:	93 1f       	adc	r25, r19
    1c44:	fc 01       	movw	r30, r24
    1c46:	e4 56       	subi	r30, 0x64	; 100
    1c48:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4a:	80 81       	ld	r24, Z
    1c4c:	28 2f       	mov	r18, r24
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	02 2e       	mov	r0, r18
    1c56:	02 c0       	rjmp	.+4      	; 0x1c5c <DIO_Write+0x248>
    1c58:	88 0f       	add	r24, r24
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	0a 94       	dec	r0
    1c5e:	e2 f7       	brpl	.-8      	; 0x1c58 <DIO_Write+0x244>
    1c60:	84 2b       	or	r24, r20
    1c62:	8c 93       	st	X, r24
    1c64:	b9 c0       	rjmp	.+370    	; 0x1dd8 <DIO_Write+0x3c4>
			}//end if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 8) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 16))	//if portb
    1c66:	89 81       	ldd	r24, Y+1	; 0x01
    1c68:	28 2f       	mov	r18, r24
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	c9 01       	movw	r24, r18
    1c6e:	88 0f       	add	r24, r24
    1c70:	99 1f       	adc	r25, r25
    1c72:	82 0f       	add	r24, r18
    1c74:	93 1f       	adc	r25, r19
    1c76:	fc 01       	movw	r30, r24
    1c78:	e4 56       	subi	r30, 0x64	; 100
    1c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7c:	80 81       	ld	r24, Z
    1c7e:	88 30       	cpi	r24, 0x08	; 8
    1c80:	80 f1       	brcs	.+96     	; 0x1ce2 <DIO_Write+0x2ce>
    1c82:	89 81       	ldd	r24, Y+1	; 0x01
    1c84:	28 2f       	mov	r18, r24
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	c9 01       	movw	r24, r18
    1c8a:	88 0f       	add	r24, r24
    1c8c:	99 1f       	adc	r25, r25
    1c8e:	82 0f       	add	r24, r18
    1c90:	93 1f       	adc	r25, r19
    1c92:	fc 01       	movw	r30, r24
    1c94:	e4 56       	subi	r30, 0x64	; 100
    1c96:	ff 4f       	sbci	r31, 0xFF	; 255
    1c98:	80 81       	ld	r24, Z
    1c9a:	80 31       	cpi	r24, 0x10	; 16
    1c9c:	10 f5       	brcc	.+68     	; 0x1ce2 <DIO_Write+0x2ce>
			{
				SET_BIT(PORTB_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 8));
    1c9e:	a8 e3       	ldi	r26, 0x38	; 56
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	e8 e3       	ldi	r30, 0x38	; 56
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	48 2f       	mov	r20, r24
    1caa:	89 81       	ldd	r24, Y+1	; 0x01
    1cac:	28 2f       	mov	r18, r24
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	c9 01       	movw	r24, r18
    1cb2:	88 0f       	add	r24, r24
    1cb4:	99 1f       	adc	r25, r25
    1cb6:	82 0f       	add	r24, r18
    1cb8:	93 1f       	adc	r25, r19
    1cba:	fc 01       	movw	r30, r24
    1cbc:	e4 56       	subi	r30, 0x64	; 100
    1cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc0:	80 81       	ld	r24, Z
    1cc2:	88 2f       	mov	r24, r24
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	9c 01       	movw	r18, r24
    1cc8:	28 50       	subi	r18, 0x08	; 8
    1cca:	30 40       	sbci	r19, 0x00	; 0
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	02 2e       	mov	r0, r18
    1cd2:	02 c0       	rjmp	.+4      	; 0x1cd8 <DIO_Write+0x2c4>
    1cd4:	88 0f       	add	r24, r24
    1cd6:	99 1f       	adc	r25, r25
    1cd8:	0a 94       	dec	r0
    1cda:	e2 f7       	brpl	.-8      	; 0x1cd4 <DIO_Write+0x2c0>
    1cdc:	84 2b       	or	r24, r20
    1cde:	8c 93       	st	X, r24
    1ce0:	7b c0       	rjmp	.+246    	; 0x1dd8 <DIO_Write+0x3c4>
			}//end else if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 16) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 24))	//if portc
    1ce2:	89 81       	ldd	r24, Y+1	; 0x01
    1ce4:	28 2f       	mov	r18, r24
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	c9 01       	movw	r24, r18
    1cea:	88 0f       	add	r24, r24
    1cec:	99 1f       	adc	r25, r25
    1cee:	82 0f       	add	r24, r18
    1cf0:	93 1f       	adc	r25, r19
    1cf2:	fc 01       	movw	r30, r24
    1cf4:	e4 56       	subi	r30, 0x64	; 100
    1cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf8:	80 81       	ld	r24, Z
    1cfa:	80 31       	cpi	r24, 0x10	; 16
    1cfc:	80 f1       	brcs	.+96     	; 0x1d5e <DIO_Write+0x34a>
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
    1d00:	28 2f       	mov	r18, r24
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	c9 01       	movw	r24, r18
    1d06:	88 0f       	add	r24, r24
    1d08:	99 1f       	adc	r25, r25
    1d0a:	82 0f       	add	r24, r18
    1d0c:	93 1f       	adc	r25, r19
    1d0e:	fc 01       	movw	r30, r24
    1d10:	e4 56       	subi	r30, 0x64	; 100
    1d12:	ff 4f       	sbci	r31, 0xFF	; 255
    1d14:	80 81       	ld	r24, Z
    1d16:	88 31       	cpi	r24, 0x18	; 24
    1d18:	10 f5       	brcc	.+68     	; 0x1d5e <DIO_Write+0x34a>
			{
				SET_BIT(PORTC_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 16));
    1d1a:	a5 e3       	ldi	r26, 0x35	; 53
    1d1c:	b0 e0       	ldi	r27, 0x00	; 0
    1d1e:	e5 e3       	ldi	r30, 0x35	; 53
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 81       	ld	r24, Z
    1d24:	48 2f       	mov	r20, r24
    1d26:	89 81       	ldd	r24, Y+1	; 0x01
    1d28:	28 2f       	mov	r18, r24
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	c9 01       	movw	r24, r18
    1d2e:	88 0f       	add	r24, r24
    1d30:	99 1f       	adc	r25, r25
    1d32:	82 0f       	add	r24, r18
    1d34:	93 1f       	adc	r25, r19
    1d36:	fc 01       	movw	r30, r24
    1d38:	e4 56       	subi	r30, 0x64	; 100
    1d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3c:	80 81       	ld	r24, Z
    1d3e:	88 2f       	mov	r24, r24
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	9c 01       	movw	r18, r24
    1d44:	20 51       	subi	r18, 0x10	; 16
    1d46:	30 40       	sbci	r19, 0x00	; 0
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	02 2e       	mov	r0, r18
    1d4e:	02 c0       	rjmp	.+4      	; 0x1d54 <DIO_Write+0x340>
    1d50:	88 0f       	add	r24, r24
    1d52:	99 1f       	adc	r25, r25
    1d54:	0a 94       	dec	r0
    1d56:	e2 f7       	brpl	.-8      	; 0x1d50 <DIO_Write+0x33c>
    1d58:	84 2b       	or	r24, r20
    1d5a:	8c 93       	st	X, r24
    1d5c:	3d c0       	rjmp	.+122    	; 0x1dd8 <DIO_Write+0x3c4>
			}//end else if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 24) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 32))	//if portd
    1d5e:	89 81       	ldd	r24, Y+1	; 0x01
    1d60:	28 2f       	mov	r18, r24
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	c9 01       	movw	r24, r18
    1d66:	88 0f       	add	r24, r24
    1d68:	99 1f       	adc	r25, r25
    1d6a:	82 0f       	add	r24, r18
    1d6c:	93 1f       	adc	r25, r19
    1d6e:	fc 01       	movw	r30, r24
    1d70:	e4 56       	subi	r30, 0x64	; 100
    1d72:	ff 4f       	sbci	r31, 0xFF	; 255
    1d74:	80 81       	ld	r24, Z
    1d76:	88 31       	cpi	r24, 0x18	; 24
    1d78:	78 f1       	brcs	.+94     	; 0x1dd8 <DIO_Write+0x3c4>
    1d7a:	89 81       	ldd	r24, Y+1	; 0x01
    1d7c:	28 2f       	mov	r18, r24
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	c9 01       	movw	r24, r18
    1d82:	88 0f       	add	r24, r24
    1d84:	99 1f       	adc	r25, r25
    1d86:	82 0f       	add	r24, r18
    1d88:	93 1f       	adc	r25, r19
    1d8a:	fc 01       	movw	r30, r24
    1d8c:	e4 56       	subi	r30, 0x64	; 100
    1d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d90:	80 81       	ld	r24, Z
    1d92:	80 32       	cpi	r24, 0x20	; 32
    1d94:	08 f5       	brcc	.+66     	; 0x1dd8 <DIO_Write+0x3c4>
			{
				SET_BIT(PORTD_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 24));
    1d96:	a2 e3       	ldi	r26, 0x32	; 50
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	e2 e3       	ldi	r30, 0x32	; 50
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	48 2f       	mov	r20, r24
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	28 2f       	mov	r18, r24
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	c9 01       	movw	r24, r18
    1daa:	88 0f       	add	r24, r24
    1dac:	99 1f       	adc	r25, r25
    1dae:	82 0f       	add	r24, r18
    1db0:	93 1f       	adc	r25, r19
    1db2:	fc 01       	movw	r30, r24
    1db4:	e4 56       	subi	r30, 0x64	; 100
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	80 81       	ld	r24, Z
    1dba:	88 2f       	mov	r24, r24
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	9c 01       	movw	r18, r24
    1dc0:	28 51       	subi	r18, 0x18	; 24
    1dc2:	30 40       	sbci	r19, 0x00	; 0
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	02 2e       	mov	r0, r18
    1dca:	02 c0       	rjmp	.+4      	; 0x1dd0 <DIO_Write+0x3bc>
    1dcc:	88 0f       	add	r24, r24
    1dce:	99 1f       	adc	r25, r25
    1dd0:	0a 94       	dec	r0
    1dd2:	e2 f7       	brpl	.-8      	; 0x1dcc <DIO_Write+0x3b8>
    1dd4:	84 2b       	or	r24, r20
    1dd6:	8c 93       	st	X, r24
			}//end else if
	    }//end else if
		return E_OK;
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
}//end DIO_write
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	cf 91       	pop	r28
    1de0:	df 91       	pop	r29
    1de2:	08 95       	ret

00001de4 <DIO_Read>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to read a digital value from the selected DIO pin
*************************************************************************************************/
enuErrorStatus_t DIO_Read(uint8_t u8_GroupId, uint8_t* pu8_Data)
{
    1de4:	df 93       	push	r29
    1de6:	cf 93       	push	r28
    1de8:	00 d0       	rcall	.+0      	; 0x1dea <DIO_Read+0x6>
    1dea:	00 d0       	rcall	.+0      	; 0x1dec <DIO_Read+0x8>
    1dec:	cd b7       	in	r28, 0x3d	; 61
    1dee:	de b7       	in	r29, 0x3e	; 62
    1df0:	89 83       	std	Y+1, r24	; 0x01
    1df2:	7b 83       	std	Y+3, r23	; 0x03
    1df4:	6a 83       	std	Y+2, r22	; 0x02
	if(pu8_Data == NULL_PTR)		return E_ERROR;
    1df6:	8a 81       	ldd	r24, Y+2	; 0x02
    1df8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dfa:	00 97       	sbiw	r24, 0x00	; 0
    1dfc:	11 f4       	brne	.+4      	; 0x1e02 <DIO_Read+0x1e>
    1dfe:	1c 82       	std	Y+4, r1	; 0x04
    1e00:	e8 c0       	rjmp	.+464    	; 0x1fd2 <DIO_Read+0x1ee>
	else
	{
		if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 0) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 8))	//if porta
    1e02:	89 81       	ldd	r24, Y+1	; 0x01
    1e04:	28 2f       	mov	r18, r24
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	c9 01       	movw	r24, r18
    1e0a:	88 0f       	add	r24, r24
    1e0c:	99 1f       	adc	r25, r25
    1e0e:	82 0f       	add	r24, r18
    1e10:	93 1f       	adc	r25, r19
    1e12:	fc 01       	movw	r30, r24
    1e14:	e4 56       	subi	r30, 0x64	; 100
    1e16:	ff 4f       	sbci	r31, 0xFF	; 255
    1e18:	80 81       	ld	r24, Z
    1e1a:	88 30       	cpi	r24, 0x08	; 8
    1e1c:	f8 f4       	brcc	.+62     	; 0x1e5c <DIO_Read+0x78>
		{
			*pu8_Data = GET_BIT(PINA_R, astrDIOConfigParameters[u8_GroupId].enuPinNo);
    1e1e:	e9 e3       	ldi	r30, 0x39	; 57
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	48 2f       	mov	r20, r24
    1e26:	89 81       	ldd	r24, Y+1	; 0x01
    1e28:	28 2f       	mov	r18, r24
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	c9 01       	movw	r24, r18
    1e2e:	88 0f       	add	r24, r24
    1e30:	99 1f       	adc	r25, r25
    1e32:	82 0f       	add	r24, r18
    1e34:	93 1f       	adc	r25, r19
    1e36:	fc 01       	movw	r30, r24
    1e38:	e4 56       	subi	r30, 0x64	; 100
    1e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3c:	80 81       	ld	r24, Z
    1e3e:	28 2f       	mov	r18, r24
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	02 2e       	mov	r0, r18
    1e48:	02 c0       	rjmp	.+4      	; 0x1e4e <DIO_Read+0x6a>
    1e4a:	88 0f       	add	r24, r24
    1e4c:	99 1f       	adc	r25, r25
    1e4e:	0a 94       	dec	r0
    1e50:	e2 f7       	brpl	.-8      	; 0x1e4a <DIO_Read+0x66>
    1e52:	84 23       	and	r24, r20
    1e54:	ea 81       	ldd	r30, Y+2	; 0x02
    1e56:	fb 81       	ldd	r31, Y+3	; 0x03
    1e58:	80 83       	st	Z, r24
    1e5a:	b9 c0       	rjmp	.+370    	; 0x1fce <DIO_Read+0x1ea>
		}//end if
		else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 8) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 16))	//if portb
    1e5c:	89 81       	ldd	r24, Y+1	; 0x01
    1e5e:	28 2f       	mov	r18, r24
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	c9 01       	movw	r24, r18
    1e64:	88 0f       	add	r24, r24
    1e66:	99 1f       	adc	r25, r25
    1e68:	82 0f       	add	r24, r18
    1e6a:	93 1f       	adc	r25, r19
    1e6c:	fc 01       	movw	r30, r24
    1e6e:	e4 56       	subi	r30, 0x64	; 100
    1e70:	ff 4f       	sbci	r31, 0xFF	; 255
    1e72:	80 81       	ld	r24, Z
    1e74:	88 30       	cpi	r24, 0x08	; 8
    1e76:	80 f1       	brcs	.+96     	; 0x1ed8 <DIO_Read+0xf4>
    1e78:	89 81       	ldd	r24, Y+1	; 0x01
    1e7a:	28 2f       	mov	r18, r24
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	c9 01       	movw	r24, r18
    1e80:	88 0f       	add	r24, r24
    1e82:	99 1f       	adc	r25, r25
    1e84:	82 0f       	add	r24, r18
    1e86:	93 1f       	adc	r25, r19
    1e88:	fc 01       	movw	r30, r24
    1e8a:	e4 56       	subi	r30, 0x64	; 100
    1e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8e:	80 81       	ld	r24, Z
    1e90:	80 31       	cpi	r24, 0x10	; 16
    1e92:	10 f5       	brcc	.+68     	; 0x1ed8 <DIO_Read+0xf4>
		{
			*pu8_Data = GET_BIT(PINB_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 8));
    1e94:	e6 e3       	ldi	r30, 0x36	; 54
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	48 2f       	mov	r20, r24
    1e9c:	89 81       	ldd	r24, Y+1	; 0x01
    1e9e:	28 2f       	mov	r18, r24
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	c9 01       	movw	r24, r18
    1ea4:	88 0f       	add	r24, r24
    1ea6:	99 1f       	adc	r25, r25
    1ea8:	82 0f       	add	r24, r18
    1eaa:	93 1f       	adc	r25, r19
    1eac:	fc 01       	movw	r30, r24
    1eae:	e4 56       	subi	r30, 0x64	; 100
    1eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb2:	80 81       	ld	r24, Z
    1eb4:	88 2f       	mov	r24, r24
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	9c 01       	movw	r18, r24
    1eba:	28 50       	subi	r18, 0x08	; 8
    1ebc:	30 40       	sbci	r19, 0x00	; 0
    1ebe:	81 e0       	ldi	r24, 0x01	; 1
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	02 2e       	mov	r0, r18
    1ec4:	02 c0       	rjmp	.+4      	; 0x1eca <DIO_Read+0xe6>
    1ec6:	88 0f       	add	r24, r24
    1ec8:	99 1f       	adc	r25, r25
    1eca:	0a 94       	dec	r0
    1ecc:	e2 f7       	brpl	.-8      	; 0x1ec6 <DIO_Read+0xe2>
    1ece:	84 23       	and	r24, r20
    1ed0:	ea 81       	ldd	r30, Y+2	; 0x02
    1ed2:	fb 81       	ldd	r31, Y+3	; 0x03
    1ed4:	80 83       	st	Z, r24
    1ed6:	7b c0       	rjmp	.+246    	; 0x1fce <DIO_Read+0x1ea>
		}//end else if
		else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 16) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 24))	//if portc
    1ed8:	89 81       	ldd	r24, Y+1	; 0x01
    1eda:	28 2f       	mov	r18, r24
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	c9 01       	movw	r24, r18
    1ee0:	88 0f       	add	r24, r24
    1ee2:	99 1f       	adc	r25, r25
    1ee4:	82 0f       	add	r24, r18
    1ee6:	93 1f       	adc	r25, r19
    1ee8:	fc 01       	movw	r30, r24
    1eea:	e4 56       	subi	r30, 0x64	; 100
    1eec:	ff 4f       	sbci	r31, 0xFF	; 255
    1eee:	80 81       	ld	r24, Z
    1ef0:	80 31       	cpi	r24, 0x10	; 16
    1ef2:	80 f1       	brcs	.+96     	; 0x1f54 <DIO_Read+0x170>
    1ef4:	89 81       	ldd	r24, Y+1	; 0x01
    1ef6:	28 2f       	mov	r18, r24
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	c9 01       	movw	r24, r18
    1efc:	88 0f       	add	r24, r24
    1efe:	99 1f       	adc	r25, r25
    1f00:	82 0f       	add	r24, r18
    1f02:	93 1f       	adc	r25, r19
    1f04:	fc 01       	movw	r30, r24
    1f06:	e4 56       	subi	r30, 0x64	; 100
    1f08:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0a:	80 81       	ld	r24, Z
    1f0c:	88 31       	cpi	r24, 0x18	; 24
    1f0e:	10 f5       	brcc	.+68     	; 0x1f54 <DIO_Read+0x170>
		{
			*pu8_Data = GET_BIT(PINC_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 16));
    1f10:	e3 e3       	ldi	r30, 0x33	; 51
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	80 81       	ld	r24, Z
    1f16:	48 2f       	mov	r20, r24
    1f18:	89 81       	ldd	r24, Y+1	; 0x01
    1f1a:	28 2f       	mov	r18, r24
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	c9 01       	movw	r24, r18
    1f20:	88 0f       	add	r24, r24
    1f22:	99 1f       	adc	r25, r25
    1f24:	82 0f       	add	r24, r18
    1f26:	93 1f       	adc	r25, r19
    1f28:	fc 01       	movw	r30, r24
    1f2a:	e4 56       	subi	r30, 0x64	; 100
    1f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f2e:	80 81       	ld	r24, Z
    1f30:	88 2f       	mov	r24, r24
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	9c 01       	movw	r18, r24
    1f36:	20 51       	subi	r18, 0x10	; 16
    1f38:	30 40       	sbci	r19, 0x00	; 0
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	02 2e       	mov	r0, r18
    1f40:	02 c0       	rjmp	.+4      	; 0x1f46 <DIO_Read+0x162>
    1f42:	88 0f       	add	r24, r24
    1f44:	99 1f       	adc	r25, r25
    1f46:	0a 94       	dec	r0
    1f48:	e2 f7       	brpl	.-8      	; 0x1f42 <DIO_Read+0x15e>
    1f4a:	84 23       	and	r24, r20
    1f4c:	ea 81       	ldd	r30, Y+2	; 0x02
    1f4e:	fb 81       	ldd	r31, Y+3	; 0x03
    1f50:	80 83       	st	Z, r24
    1f52:	3d c0       	rjmp	.+122    	; 0x1fce <DIO_Read+0x1ea>
		}//end else if
		else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 24) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 32))	//if portd
    1f54:	89 81       	ldd	r24, Y+1	; 0x01
    1f56:	28 2f       	mov	r18, r24
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	c9 01       	movw	r24, r18
    1f5c:	88 0f       	add	r24, r24
    1f5e:	99 1f       	adc	r25, r25
    1f60:	82 0f       	add	r24, r18
    1f62:	93 1f       	adc	r25, r19
    1f64:	fc 01       	movw	r30, r24
    1f66:	e4 56       	subi	r30, 0x64	; 100
    1f68:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6a:	80 81       	ld	r24, Z
    1f6c:	88 31       	cpi	r24, 0x18	; 24
    1f6e:	78 f1       	brcs	.+94     	; 0x1fce <DIO_Read+0x1ea>
    1f70:	89 81       	ldd	r24, Y+1	; 0x01
    1f72:	28 2f       	mov	r18, r24
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	c9 01       	movw	r24, r18
    1f78:	88 0f       	add	r24, r24
    1f7a:	99 1f       	adc	r25, r25
    1f7c:	82 0f       	add	r24, r18
    1f7e:	93 1f       	adc	r25, r19
    1f80:	fc 01       	movw	r30, r24
    1f82:	e4 56       	subi	r30, 0x64	; 100
    1f84:	ff 4f       	sbci	r31, 0xFF	; 255
    1f86:	80 81       	ld	r24, Z
    1f88:	80 32       	cpi	r24, 0x20	; 32
    1f8a:	08 f5       	brcc	.+66     	; 0x1fce <DIO_Read+0x1ea>
		{
			*pu8_Data = GET_BIT(PIND_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 24));
    1f8c:	e0 e3       	ldi	r30, 0x30	; 48
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	80 81       	ld	r24, Z
    1f92:	48 2f       	mov	r20, r24
    1f94:	89 81       	ldd	r24, Y+1	; 0x01
    1f96:	28 2f       	mov	r18, r24
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	c9 01       	movw	r24, r18
    1f9c:	88 0f       	add	r24, r24
    1f9e:	99 1f       	adc	r25, r25
    1fa0:	82 0f       	add	r24, r18
    1fa2:	93 1f       	adc	r25, r19
    1fa4:	fc 01       	movw	r30, r24
    1fa6:	e4 56       	subi	r30, 0x64	; 100
    1fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1faa:	80 81       	ld	r24, Z
    1fac:	88 2f       	mov	r24, r24
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	9c 01       	movw	r18, r24
    1fb2:	28 51       	subi	r18, 0x18	; 24
    1fb4:	30 40       	sbci	r19, 0x00	; 0
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	02 2e       	mov	r0, r18
    1fbc:	02 c0       	rjmp	.+4      	; 0x1fc2 <DIO_Read+0x1de>
    1fbe:	88 0f       	add	r24, r24
    1fc0:	99 1f       	adc	r25, r25
    1fc2:	0a 94       	dec	r0
    1fc4:	e2 f7       	brpl	.-8      	; 0x1fbe <DIO_Read+0x1da>
    1fc6:	84 23       	and	r24, r20
    1fc8:	ea 81       	ldd	r30, Y+2	; 0x02
    1fca:	fb 81       	ldd	r31, Y+3	; 0x03
    1fcc:	80 83       	st	Z, r24
		}//end else if

		return E_OK;
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	8c 83       	std	Y+4, r24	; 0x04
    1fd2:	8c 81       	ldd	r24, Y+4	; 0x04
	}//end else
}//end DIO_Read
    1fd4:	0f 90       	pop	r0
    1fd6:	0f 90       	pop	r0
    1fd8:	0f 90       	pop	r0
    1fda:	0f 90       	pop	r0
    1fdc:	cf 91       	pop	r28
    1fde:	df 91       	pop	r29
    1fe0:	08 95       	ret

00001fe2 <DIO_toggle>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to toggle the selected DIO pin
*************************************************************************************************/
enuErrorStatus_t DIO_toggle(uint8_t u8_GroupId)
{
    1fe2:	df 93       	push	r29
    1fe4:	cf 93       	push	r28
    1fe6:	0f 92       	push	r0
    1fe8:	cd b7       	in	r28, 0x3d	; 61
    1fea:	de b7       	in	r29, 0x3e	; 62
    1fec:	89 83       	std	Y+1, r24	; 0x01
	if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 0) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 8))	//if porta
    1fee:	89 81       	ldd	r24, Y+1	; 0x01
    1ff0:	28 2f       	mov	r18, r24
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	c9 01       	movw	r24, r18
    1ff6:	88 0f       	add	r24, r24
    1ff8:	99 1f       	adc	r25, r25
    1ffa:	82 0f       	add	r24, r18
    1ffc:	93 1f       	adc	r25, r19
    1ffe:	fc 01       	movw	r30, r24
    2000:	e4 56       	subi	r30, 0x64	; 100
    2002:	ff 4f       	sbci	r31, 0xFF	; 255
    2004:	80 81       	ld	r24, Z
    2006:	88 30       	cpi	r24, 0x08	; 8
    2008:	f8 f4       	brcc	.+62     	; 0x2048 <DIO_toggle+0x66>
	{
		TOGGLE_BIT(PORTA_R, astrDIOConfigParameters[u8_GroupId].enuPinNo);
    200a:	ab e3       	ldi	r26, 0x3B	; 59
    200c:	b0 e0       	ldi	r27, 0x00	; 0
    200e:	eb e3       	ldi	r30, 0x3B	; 59
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	80 81       	ld	r24, Z
    2014:	48 2f       	mov	r20, r24
    2016:	89 81       	ldd	r24, Y+1	; 0x01
    2018:	28 2f       	mov	r18, r24
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	c9 01       	movw	r24, r18
    201e:	88 0f       	add	r24, r24
    2020:	99 1f       	adc	r25, r25
    2022:	82 0f       	add	r24, r18
    2024:	93 1f       	adc	r25, r19
    2026:	fc 01       	movw	r30, r24
    2028:	e4 56       	subi	r30, 0x64	; 100
    202a:	ff 4f       	sbci	r31, 0xFF	; 255
    202c:	80 81       	ld	r24, Z
    202e:	28 2f       	mov	r18, r24
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	02 2e       	mov	r0, r18
    2038:	02 c0       	rjmp	.+4      	; 0x203e <DIO_toggle+0x5c>
    203a:	88 0f       	add	r24, r24
    203c:	99 1f       	adc	r25, r25
    203e:	0a 94       	dec	r0
    2040:	e2 f7       	brpl	.-8      	; 0x203a <DIO_toggle+0x58>
    2042:	84 27       	eor	r24, r20
    2044:	8c 93       	st	X, r24
    2046:	b9 c0       	rjmp	.+370    	; 0x21ba <DIO_toggle+0x1d8>
	}//end if
	else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 8) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 16))	//if portb
    2048:	89 81       	ldd	r24, Y+1	; 0x01
    204a:	28 2f       	mov	r18, r24
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	c9 01       	movw	r24, r18
    2050:	88 0f       	add	r24, r24
    2052:	99 1f       	adc	r25, r25
    2054:	82 0f       	add	r24, r18
    2056:	93 1f       	adc	r25, r19
    2058:	fc 01       	movw	r30, r24
    205a:	e4 56       	subi	r30, 0x64	; 100
    205c:	ff 4f       	sbci	r31, 0xFF	; 255
    205e:	80 81       	ld	r24, Z
    2060:	88 30       	cpi	r24, 0x08	; 8
    2062:	80 f1       	brcs	.+96     	; 0x20c4 <DIO_toggle+0xe2>
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	28 2f       	mov	r18, r24
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	c9 01       	movw	r24, r18
    206c:	88 0f       	add	r24, r24
    206e:	99 1f       	adc	r25, r25
    2070:	82 0f       	add	r24, r18
    2072:	93 1f       	adc	r25, r19
    2074:	fc 01       	movw	r30, r24
    2076:	e4 56       	subi	r30, 0x64	; 100
    2078:	ff 4f       	sbci	r31, 0xFF	; 255
    207a:	80 81       	ld	r24, Z
    207c:	80 31       	cpi	r24, 0x10	; 16
    207e:	10 f5       	brcc	.+68     	; 0x20c4 <DIO_toggle+0xe2>
	{
		TOGGLE_BIT(PORTB_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 8));
    2080:	a8 e3       	ldi	r26, 0x38	; 56
    2082:	b0 e0       	ldi	r27, 0x00	; 0
    2084:	e8 e3       	ldi	r30, 0x38	; 56
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	48 2f       	mov	r20, r24
    208c:	89 81       	ldd	r24, Y+1	; 0x01
    208e:	28 2f       	mov	r18, r24
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	c9 01       	movw	r24, r18
    2094:	88 0f       	add	r24, r24
    2096:	99 1f       	adc	r25, r25
    2098:	82 0f       	add	r24, r18
    209a:	93 1f       	adc	r25, r19
    209c:	fc 01       	movw	r30, r24
    209e:	e4 56       	subi	r30, 0x64	; 100
    20a0:	ff 4f       	sbci	r31, 0xFF	; 255
    20a2:	80 81       	ld	r24, Z
    20a4:	88 2f       	mov	r24, r24
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	9c 01       	movw	r18, r24
    20aa:	28 50       	subi	r18, 0x08	; 8
    20ac:	30 40       	sbci	r19, 0x00	; 0
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	02 2e       	mov	r0, r18
    20b4:	02 c0       	rjmp	.+4      	; 0x20ba <DIO_toggle+0xd8>
    20b6:	88 0f       	add	r24, r24
    20b8:	99 1f       	adc	r25, r25
    20ba:	0a 94       	dec	r0
    20bc:	e2 f7       	brpl	.-8      	; 0x20b6 <DIO_toggle+0xd4>
    20be:	84 27       	eor	r24, r20
    20c0:	8c 93       	st	X, r24
    20c2:	7b c0       	rjmp	.+246    	; 0x21ba <DIO_toggle+0x1d8>
	}//end else if
	else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 16) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 24))	//if portc
    20c4:	89 81       	ldd	r24, Y+1	; 0x01
    20c6:	28 2f       	mov	r18, r24
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	c9 01       	movw	r24, r18
    20cc:	88 0f       	add	r24, r24
    20ce:	99 1f       	adc	r25, r25
    20d0:	82 0f       	add	r24, r18
    20d2:	93 1f       	adc	r25, r19
    20d4:	fc 01       	movw	r30, r24
    20d6:	e4 56       	subi	r30, 0x64	; 100
    20d8:	ff 4f       	sbci	r31, 0xFF	; 255
    20da:	80 81       	ld	r24, Z
    20dc:	80 31       	cpi	r24, 0x10	; 16
    20de:	80 f1       	brcs	.+96     	; 0x2140 <DIO_toggle+0x15e>
    20e0:	89 81       	ldd	r24, Y+1	; 0x01
    20e2:	28 2f       	mov	r18, r24
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	c9 01       	movw	r24, r18
    20e8:	88 0f       	add	r24, r24
    20ea:	99 1f       	adc	r25, r25
    20ec:	82 0f       	add	r24, r18
    20ee:	93 1f       	adc	r25, r19
    20f0:	fc 01       	movw	r30, r24
    20f2:	e4 56       	subi	r30, 0x64	; 100
    20f4:	ff 4f       	sbci	r31, 0xFF	; 255
    20f6:	80 81       	ld	r24, Z
    20f8:	88 31       	cpi	r24, 0x18	; 24
    20fa:	10 f5       	brcc	.+68     	; 0x2140 <DIO_toggle+0x15e>
	{
		TOGGLE_BIT(PORTC_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 16));
    20fc:	a5 e3       	ldi	r26, 0x35	; 53
    20fe:	b0 e0       	ldi	r27, 0x00	; 0
    2100:	e5 e3       	ldi	r30, 0x35	; 53
    2102:	f0 e0       	ldi	r31, 0x00	; 0
    2104:	80 81       	ld	r24, Z
    2106:	48 2f       	mov	r20, r24
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	28 2f       	mov	r18, r24
    210c:	30 e0       	ldi	r19, 0x00	; 0
    210e:	c9 01       	movw	r24, r18
    2110:	88 0f       	add	r24, r24
    2112:	99 1f       	adc	r25, r25
    2114:	82 0f       	add	r24, r18
    2116:	93 1f       	adc	r25, r19
    2118:	fc 01       	movw	r30, r24
    211a:	e4 56       	subi	r30, 0x64	; 100
    211c:	ff 4f       	sbci	r31, 0xFF	; 255
    211e:	80 81       	ld	r24, Z
    2120:	88 2f       	mov	r24, r24
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	9c 01       	movw	r18, r24
    2126:	20 51       	subi	r18, 0x10	; 16
    2128:	30 40       	sbci	r19, 0x00	; 0
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	02 2e       	mov	r0, r18
    2130:	02 c0       	rjmp	.+4      	; 0x2136 <DIO_toggle+0x154>
    2132:	88 0f       	add	r24, r24
    2134:	99 1f       	adc	r25, r25
    2136:	0a 94       	dec	r0
    2138:	e2 f7       	brpl	.-8      	; 0x2132 <DIO_toggle+0x150>
    213a:	84 27       	eor	r24, r20
    213c:	8c 93       	st	X, r24
    213e:	3d c0       	rjmp	.+122    	; 0x21ba <DIO_toggle+0x1d8>
	}//end else if
	else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 24) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 32))	//if portd
    2140:	89 81       	ldd	r24, Y+1	; 0x01
    2142:	28 2f       	mov	r18, r24
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	c9 01       	movw	r24, r18
    2148:	88 0f       	add	r24, r24
    214a:	99 1f       	adc	r25, r25
    214c:	82 0f       	add	r24, r18
    214e:	93 1f       	adc	r25, r19
    2150:	fc 01       	movw	r30, r24
    2152:	e4 56       	subi	r30, 0x64	; 100
    2154:	ff 4f       	sbci	r31, 0xFF	; 255
    2156:	80 81       	ld	r24, Z
    2158:	88 31       	cpi	r24, 0x18	; 24
    215a:	78 f1       	brcs	.+94     	; 0x21ba <DIO_toggle+0x1d8>
    215c:	89 81       	ldd	r24, Y+1	; 0x01
    215e:	28 2f       	mov	r18, r24
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	c9 01       	movw	r24, r18
    2164:	88 0f       	add	r24, r24
    2166:	99 1f       	adc	r25, r25
    2168:	82 0f       	add	r24, r18
    216a:	93 1f       	adc	r25, r19
    216c:	fc 01       	movw	r30, r24
    216e:	e4 56       	subi	r30, 0x64	; 100
    2170:	ff 4f       	sbci	r31, 0xFF	; 255
    2172:	80 81       	ld	r24, Z
    2174:	80 32       	cpi	r24, 0x20	; 32
    2176:	08 f5       	brcc	.+66     	; 0x21ba <DIO_toggle+0x1d8>
	{
		TOGGLE_BIT(PORTD_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 24));
    2178:	a2 e3       	ldi	r26, 0x32	; 50
    217a:	b0 e0       	ldi	r27, 0x00	; 0
    217c:	e2 e3       	ldi	r30, 0x32	; 50
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	80 81       	ld	r24, Z
    2182:	48 2f       	mov	r20, r24
    2184:	89 81       	ldd	r24, Y+1	; 0x01
    2186:	28 2f       	mov	r18, r24
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	c9 01       	movw	r24, r18
    218c:	88 0f       	add	r24, r24
    218e:	99 1f       	adc	r25, r25
    2190:	82 0f       	add	r24, r18
    2192:	93 1f       	adc	r25, r19
    2194:	fc 01       	movw	r30, r24
    2196:	e4 56       	subi	r30, 0x64	; 100
    2198:	ff 4f       	sbci	r31, 0xFF	; 255
    219a:	80 81       	ld	r24, Z
    219c:	88 2f       	mov	r24, r24
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	9c 01       	movw	r18, r24
    21a2:	28 51       	subi	r18, 0x18	; 24
    21a4:	30 40       	sbci	r19, 0x00	; 0
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	02 2e       	mov	r0, r18
    21ac:	02 c0       	rjmp	.+4      	; 0x21b2 <DIO_toggle+0x1d0>
    21ae:	88 0f       	add	r24, r24
    21b0:	99 1f       	adc	r25, r25
    21b2:	0a 94       	dec	r0
    21b4:	e2 f7       	brpl	.-8      	; 0x21ae <DIO_toggle+0x1cc>
    21b6:	84 27       	eor	r24, r20
    21b8:	8c 93       	st	X, r24
	}//end else if

	return E_OK;
    21ba:	81 e0       	ldi	r24, 0x01	; 1
}//end DIO_toggle
    21bc:	0f 90       	pop	r0
    21be:	cf 91       	pop	r28
    21c0:	df 91       	pop	r29
    21c2:	08 95       	ret

000021c4 <ADC_init>:
#include "ADC.h"
#include "ADC.h"

void ADC_init(enuPrescaller_t enuPrescaller, enuVreff_t enuVreff)
{
    21c4:	df 93       	push	r29
    21c6:	cf 93       	push	r28
    21c8:	00 d0       	rcall	.+0      	; 0x21ca <ADC_init+0x6>
    21ca:	00 d0       	rcall	.+0      	; 0x21cc <ADC_init+0x8>
    21cc:	00 d0       	rcall	.+0      	; 0x21ce <ADC_init+0xa>
    21ce:	cd b7       	in	r28, 0x3d	; 61
    21d0:	de b7       	in	r29, 0x3e	; 62
    21d2:	89 83       	std	Y+1, r24	; 0x01
    21d4:	6a 83       	std	Y+2, r22	; 0x02
	//ADC ENABLE
	SET_BIT(ADCSRA_R, ADEN_B);
    21d6:	a6 e2       	ldi	r26, 0x26	; 38
    21d8:	b0 e0       	ldi	r27, 0x00	; 0
    21da:	e6 e2       	ldi	r30, 0x26	; 38
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	80 68       	ori	r24, 0x80	; 128
    21e2:	8c 93       	st	X, r24
	//ADC INTERRUPT ENABLE
	CLR_BIT(ADCSRA_R, ADIE_B);
    21e4:	a6 e2       	ldi	r26, 0x26	; 38
    21e6:	b0 e0       	ldi	r27, 0x00	; 0
    21e8:	e6 e2       	ldi	r30, 0x26	; 38
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	80 81       	ld	r24, Z
    21ee:	87 7f       	andi	r24, 0xF7	; 247
    21f0:	8c 93       	st	X, r24
	//ADC
	CLR_BIT(ADMUX_R, ADLAR_B);
    21f2:	a7 e2       	ldi	r26, 0x27	; 39
    21f4:	b0 e0       	ldi	r27, 0x00	; 0
    21f6:	e7 e2       	ldi	r30, 0x27	; 39
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	80 81       	ld	r24, Z
    21fc:	8f 7d       	andi	r24, 0xDF	; 223
    21fe:	8c 93       	st	X, r24
	////////////////////
	switch(enuPrescaller)
    2200:	89 81       	ldd	r24, Y+1	; 0x01
    2202:	28 2f       	mov	r18, r24
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	3e 83       	std	Y+6, r19	; 0x06
    2208:	2d 83       	std	Y+5, r18	; 0x05
    220a:	8d 81       	ldd	r24, Y+5	; 0x05
    220c:	9e 81       	ldd	r25, Y+6	; 0x06
    220e:	83 30       	cpi	r24, 0x03	; 3
    2210:	91 05       	cpc	r25, r1
    2212:	09 f4       	brne	.+2      	; 0x2216 <ADC_init+0x52>
    2214:	6a c0       	rjmp	.+212    	; 0x22ea <ADC_init+0x126>
    2216:	2d 81       	ldd	r18, Y+5	; 0x05
    2218:	3e 81       	ldd	r19, Y+6	; 0x06
    221a:	24 30       	cpi	r18, 0x04	; 4
    221c:	31 05       	cpc	r19, r1
    221e:	84 f4       	brge	.+32     	; 0x2240 <ADC_init+0x7c>
    2220:	8d 81       	ldd	r24, Y+5	; 0x05
    2222:	9e 81       	ldd	r25, Y+6	; 0x06
    2224:	81 30       	cpi	r24, 0x01	; 1
    2226:	91 05       	cpc	r25, r1
    2228:	a1 f1       	breq	.+104    	; 0x2292 <ADC_init+0xce>
    222a:	2d 81       	ldd	r18, Y+5	; 0x05
    222c:	3e 81       	ldd	r19, Y+6	; 0x06
    222e:	22 30       	cpi	r18, 0x02	; 2
    2230:	31 05       	cpc	r19, r1
    2232:	0c f0       	brlt	.+2      	; 0x2236 <ADC_init+0x72>
    2234:	44 c0       	rjmp	.+136    	; 0x22be <ADC_init+0xfa>
    2236:	8d 81       	ldd	r24, Y+5	; 0x05
    2238:	9e 81       	ldd	r25, Y+6	; 0x06
    223a:	00 97       	sbiw	r24, 0x00	; 0
    223c:	a1 f0       	breq	.+40     	; 0x2266 <ADC_init+0xa2>
    223e:	ac c0       	rjmp	.+344    	; 0x2398 <ADC_init+0x1d4>
    2240:	2d 81       	ldd	r18, Y+5	; 0x05
    2242:	3e 81       	ldd	r19, Y+6	; 0x06
    2244:	25 30       	cpi	r18, 0x05	; 5
    2246:	31 05       	cpc	r19, r1
    2248:	09 f4       	brne	.+2      	; 0x224c <ADC_init+0x88>
    224a:	7b c0       	rjmp	.+246    	; 0x2342 <ADC_init+0x17e>
    224c:	8d 81       	ldd	r24, Y+5	; 0x05
    224e:	9e 81       	ldd	r25, Y+6	; 0x06
    2250:	85 30       	cpi	r24, 0x05	; 5
    2252:	91 05       	cpc	r25, r1
    2254:	0c f4       	brge	.+2      	; 0x2258 <ADC_init+0x94>
    2256:	5f c0       	rjmp	.+190    	; 0x2316 <ADC_init+0x152>
    2258:	2d 81       	ldd	r18, Y+5	; 0x05
    225a:	3e 81       	ldd	r19, Y+6	; 0x06
    225c:	26 30       	cpi	r18, 0x06	; 6
    225e:	31 05       	cpc	r19, r1
    2260:	09 f4       	brne	.+2      	; 0x2264 <ADC_init+0xa0>
    2262:	85 c0       	rjmp	.+266    	; 0x236e <ADC_init+0x1aa>
    2264:	99 c0       	rjmp	.+306    	; 0x2398 <ADC_init+0x1d4>
	{
	case ADC_PRESCALLER_2:	SET_BIT(ADCSRA_R, ADPS0_B);   CLR_BIT(ADCSRA_R, ADPS1_B);  CLR_BIT(ADCSRA_R, ADPS2_B);break;
    2266:	a6 e2       	ldi	r26, 0x26	; 38
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	e6 e2       	ldi	r30, 0x26	; 38
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	80 81       	ld	r24, Z
    2270:	81 60       	ori	r24, 0x01	; 1
    2272:	8c 93       	st	X, r24
    2274:	a6 e2       	ldi	r26, 0x26	; 38
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	e6 e2       	ldi	r30, 0x26	; 38
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	8d 7f       	andi	r24, 0xFD	; 253
    2280:	8c 93       	st	X, r24
    2282:	a6 e2       	ldi	r26, 0x26	; 38
    2284:	b0 e0       	ldi	r27, 0x00	; 0
    2286:	e6 e2       	ldi	r30, 0x26	; 38
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	80 81       	ld	r24, Z
    228c:	8b 7f       	andi	r24, 0xFB	; 251
    228e:	8c 93       	st	X, r24
    2290:	83 c0       	rjmp	.+262    	; 0x2398 <ADC_init+0x1d4>
	case ADC_PRESCALLER_4:	CLR_BIT(ADCSRA_R, ADPS0_B);   SET_BIT(ADCSRA_R, ADPS1_B);  CLR_BIT(ADCSRA_R, ADPS2_B);break;
    2292:	a6 e2       	ldi	r26, 0x26	; 38
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	e6 e2       	ldi	r30, 0x26	; 38
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	8e 7f       	andi	r24, 0xFE	; 254
    229e:	8c 93       	st	X, r24
    22a0:	a6 e2       	ldi	r26, 0x26	; 38
    22a2:	b0 e0       	ldi	r27, 0x00	; 0
    22a4:	e6 e2       	ldi	r30, 0x26	; 38
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	80 81       	ld	r24, Z
    22aa:	82 60       	ori	r24, 0x02	; 2
    22ac:	8c 93       	st	X, r24
    22ae:	a6 e2       	ldi	r26, 0x26	; 38
    22b0:	b0 e0       	ldi	r27, 0x00	; 0
    22b2:	e6 e2       	ldi	r30, 0x26	; 38
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	80 81       	ld	r24, Z
    22b8:	8b 7f       	andi	r24, 0xFB	; 251
    22ba:	8c 93       	st	X, r24
    22bc:	6d c0       	rjmp	.+218    	; 0x2398 <ADC_init+0x1d4>
	case ADC_PRESCALLER_8:  SET_BIT(ADCSRA_R, ADPS0_B);   SET_BIT(ADCSRA_R, ADPS1_B);  CLR_BIT(ADCSRA_R, ADPS2_B);break;
    22be:	a6 e2       	ldi	r26, 0x26	; 38
    22c0:	b0 e0       	ldi	r27, 0x00	; 0
    22c2:	e6 e2       	ldi	r30, 0x26	; 38
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	80 81       	ld	r24, Z
    22c8:	81 60       	ori	r24, 0x01	; 1
    22ca:	8c 93       	st	X, r24
    22cc:	a6 e2       	ldi	r26, 0x26	; 38
    22ce:	b0 e0       	ldi	r27, 0x00	; 0
    22d0:	e6 e2       	ldi	r30, 0x26	; 38
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	80 81       	ld	r24, Z
    22d6:	82 60       	ori	r24, 0x02	; 2
    22d8:	8c 93       	st	X, r24
    22da:	a6 e2       	ldi	r26, 0x26	; 38
    22dc:	b0 e0       	ldi	r27, 0x00	; 0
    22de:	e6 e2       	ldi	r30, 0x26	; 38
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	80 81       	ld	r24, Z
    22e4:	8b 7f       	andi	r24, 0xFB	; 251
    22e6:	8c 93       	st	X, r24
    22e8:	57 c0       	rjmp	.+174    	; 0x2398 <ADC_init+0x1d4>
	case ADC_PRESCALLER_16: CLR_BIT(ADCSRA_R, ADPS0_B);   CLR_BIT(ADCSRA_R, ADPS1_B);  SET_BIT(ADCSRA_R, ADPS2_B);break;
    22ea:	a6 e2       	ldi	r26, 0x26	; 38
    22ec:	b0 e0       	ldi	r27, 0x00	; 0
    22ee:	e6 e2       	ldi	r30, 0x26	; 38
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	80 81       	ld	r24, Z
    22f4:	8e 7f       	andi	r24, 0xFE	; 254
    22f6:	8c 93       	st	X, r24
    22f8:	a6 e2       	ldi	r26, 0x26	; 38
    22fa:	b0 e0       	ldi	r27, 0x00	; 0
    22fc:	e6 e2       	ldi	r30, 0x26	; 38
    22fe:	f0 e0       	ldi	r31, 0x00	; 0
    2300:	80 81       	ld	r24, Z
    2302:	8d 7f       	andi	r24, 0xFD	; 253
    2304:	8c 93       	st	X, r24
    2306:	a6 e2       	ldi	r26, 0x26	; 38
    2308:	b0 e0       	ldi	r27, 0x00	; 0
    230a:	e6 e2       	ldi	r30, 0x26	; 38
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	80 81       	ld	r24, Z
    2310:	84 60       	ori	r24, 0x04	; 4
    2312:	8c 93       	st	X, r24
    2314:	41 c0       	rjmp	.+130    	; 0x2398 <ADC_init+0x1d4>
	case ADC_PRESCALLER_32: SET_BIT(ADCSRA_R, ADPS0_B);   CLR_BIT(ADCSRA_R, ADPS1_B);  SET_BIT(ADCSRA_R, ADPS2_B);break;
    2316:	a6 e2       	ldi	r26, 0x26	; 38
    2318:	b0 e0       	ldi	r27, 0x00	; 0
    231a:	e6 e2       	ldi	r30, 0x26	; 38
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	80 81       	ld	r24, Z
    2320:	81 60       	ori	r24, 0x01	; 1
    2322:	8c 93       	st	X, r24
    2324:	a6 e2       	ldi	r26, 0x26	; 38
    2326:	b0 e0       	ldi	r27, 0x00	; 0
    2328:	e6 e2       	ldi	r30, 0x26	; 38
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	80 81       	ld	r24, Z
    232e:	8d 7f       	andi	r24, 0xFD	; 253
    2330:	8c 93       	st	X, r24
    2332:	a6 e2       	ldi	r26, 0x26	; 38
    2334:	b0 e0       	ldi	r27, 0x00	; 0
    2336:	e6 e2       	ldi	r30, 0x26	; 38
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	80 81       	ld	r24, Z
    233c:	84 60       	ori	r24, 0x04	; 4
    233e:	8c 93       	st	X, r24
    2340:	2b c0       	rjmp	.+86     	; 0x2398 <ADC_init+0x1d4>
	case ADC_PRESCALLER_64: CLR_BIT(ADCSRA_R, ADPS0_B);   SET_BIT(ADCSRA_R, ADPS1_B);  SET_BIT(ADCSRA_R, ADPS2_B);break;
    2342:	a6 e2       	ldi	r26, 0x26	; 38
    2344:	b0 e0       	ldi	r27, 0x00	; 0
    2346:	e6 e2       	ldi	r30, 0x26	; 38
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	80 81       	ld	r24, Z
    234c:	8e 7f       	andi	r24, 0xFE	; 254
    234e:	8c 93       	st	X, r24
    2350:	a6 e2       	ldi	r26, 0x26	; 38
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	e6 e2       	ldi	r30, 0x26	; 38
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	80 81       	ld	r24, Z
    235a:	82 60       	ori	r24, 0x02	; 2
    235c:	8c 93       	st	X, r24
    235e:	a6 e2       	ldi	r26, 0x26	; 38
    2360:	b0 e0       	ldi	r27, 0x00	; 0
    2362:	e6 e2       	ldi	r30, 0x26	; 38
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	80 81       	ld	r24, Z
    2368:	84 60       	ori	r24, 0x04	; 4
    236a:	8c 93       	st	X, r24
    236c:	15 c0       	rjmp	.+42     	; 0x2398 <ADC_init+0x1d4>
	case ADC_PRESCALLER_128:SET_BIT(ADCSRA_R, ADPS0_B);   SET_BIT(ADCSRA_R, ADPS1_B);  SET_BIT(ADCSRA_R, ADPS2_B);break;
    236e:	a6 e2       	ldi	r26, 0x26	; 38
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	e6 e2       	ldi	r30, 0x26	; 38
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	80 81       	ld	r24, Z
    2378:	81 60       	ori	r24, 0x01	; 1
    237a:	8c 93       	st	X, r24
    237c:	a6 e2       	ldi	r26, 0x26	; 38
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	e6 e2       	ldi	r30, 0x26	; 38
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	80 81       	ld	r24, Z
    2386:	82 60       	ori	r24, 0x02	; 2
    2388:	8c 93       	st	X, r24
    238a:	a6 e2       	ldi	r26, 0x26	; 38
    238c:	b0 e0       	ldi	r27, 0x00	; 0
    238e:	e6 e2       	ldi	r30, 0x26	; 38
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	80 81       	ld	r24, Z
    2394:	84 60       	ori	r24, 0x04	; 4
    2396:	8c 93       	st	X, r24
	}
	//ADC SELECT VREF
	switch(enuVreff)
    2398:	8a 81       	ldd	r24, Y+2	; 0x02
    239a:	28 2f       	mov	r18, r24
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	3c 83       	std	Y+4, r19	; 0x04
    23a0:	2b 83       	std	Y+3, r18	; 0x03
    23a2:	8b 81       	ldd	r24, Y+3	; 0x03
    23a4:	9c 81       	ldd	r25, Y+4	; 0x04
    23a6:	81 30       	cpi	r24, 0x01	; 1
    23a8:	91 05       	cpc	r25, r1
    23aa:	c1 f0       	breq	.+48     	; 0x23dc <ADC_init+0x218>
    23ac:	2b 81       	ldd	r18, Y+3	; 0x03
    23ae:	3c 81       	ldd	r19, Y+4	; 0x04
    23b0:	23 30       	cpi	r18, 0x03	; 3
    23b2:	31 05       	cpc	r19, r1
    23b4:	11 f1       	breq	.+68     	; 0x23fa <ADC_init+0x236>
    23b6:	8b 81       	ldd	r24, Y+3	; 0x03
    23b8:	9c 81       	ldd	r25, Y+4	; 0x04
    23ba:	00 97       	sbiw	r24, 0x00	; 0
    23bc:	61 f5       	brne	.+88     	; 0x2416 <ADC_init+0x252>
	{
	case ADC_AREFF:      CLR_BIT(ADMUX_R, REFS0_B);        CLR_BIT(ADMUX_R, REFS1_B);break;
    23be:	a7 e2       	ldi	r26, 0x27	; 39
    23c0:	b0 e0       	ldi	r27, 0x00	; 0
    23c2:	e7 e2       	ldi	r30, 0x27	; 39
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	80 81       	ld	r24, Z
    23c8:	8f 7b       	andi	r24, 0xBF	; 191
    23ca:	8c 93       	st	X, r24
    23cc:	a7 e2       	ldi	r26, 0x27	; 39
    23ce:	b0 e0       	ldi	r27, 0x00	; 0
    23d0:	e7 e2       	ldi	r30, 0x27	; 39
    23d2:	f0 e0       	ldi	r31, 0x00	; 0
    23d4:	80 81       	ld	r24, Z
    23d6:	8f 77       	andi	r24, 0x7F	; 127
    23d8:	8c 93       	st	X, r24
    23da:	1d c0       	rjmp	.+58     	; 0x2416 <ADC_init+0x252>
	case ADC_AVCC:       CLR_BIT(ADMUX_R, REFS1_B);        SET_BIT(ADMUX_R, REFS0_B);break;
    23dc:	a7 e2       	ldi	r26, 0x27	; 39
    23de:	b0 e0       	ldi	r27, 0x00	; 0
    23e0:	e7 e2       	ldi	r30, 0x27	; 39
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 81       	ld	r24, Z
    23e6:	8f 77       	andi	r24, 0x7F	; 127
    23e8:	8c 93       	st	X, r24
    23ea:	a7 e2       	ldi	r26, 0x27	; 39
    23ec:	b0 e0       	ldi	r27, 0x00	; 0
    23ee:	e7 e2       	ldi	r30, 0x27	; 39
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	80 81       	ld	r24, Z
    23f4:	80 64       	ori	r24, 0x40	; 64
    23f6:	8c 93       	st	X, r24
    23f8:	0e c0       	rjmp	.+28     	; 0x2416 <ADC_init+0x252>
	case ADC_INTERNAL:   SET_BIT(ADMUX_R, REFS0_B);        SET_BIT(ADMUX_R, REFS1_B);break;
    23fa:	a7 e2       	ldi	r26, 0x27	; 39
    23fc:	b0 e0       	ldi	r27, 0x00	; 0
    23fe:	e7 e2       	ldi	r30, 0x27	; 39
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	80 81       	ld	r24, Z
    2404:	80 64       	ori	r24, 0x40	; 64
    2406:	8c 93       	st	X, r24
    2408:	a7 e2       	ldi	r26, 0x27	; 39
    240a:	b0 e0       	ldi	r27, 0x00	; 0
    240c:	e7 e2       	ldi	r30, 0x27	; 39
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	80 81       	ld	r24, Z
    2412:	80 68       	ori	r24, 0x80	; 128
    2414:	8c 93       	st	X, r24
	}
}
    2416:	26 96       	adiw	r28, 0x06	; 6
    2418:	0f b6       	in	r0, 0x3f	; 63
    241a:	f8 94       	cli
    241c:	de bf       	out	0x3e, r29	; 62
    241e:	0f be       	out	0x3f, r0	; 63
    2420:	cd bf       	out	0x3d, r28	; 61
    2422:	cf 91       	pop	r28
    2424:	df 91       	pop	r29
    2426:	08 95       	ret

00002428 <ADC_Read>:
uintt16_t  ADC_Read(uint8_t u8Channel)
{
    2428:	df 93       	push	r29
    242a:	cf 93       	push	r28
    242c:	0f 92       	push	r0
    242e:	cd b7       	in	r28, 0x3d	; 61
    2430:	de b7       	in	r29, 0x3e	; 62
    2432:	89 83       	std	Y+1, r24	; 0x01
	ADMUX_R &=0xE0;
    2434:	a7 e2       	ldi	r26, 0x27	; 39
    2436:	b0 e0       	ldi	r27, 0x00	; 0
    2438:	e7 e2       	ldi	r30, 0x27	; 39
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	80 81       	ld	r24, Z
    243e:	80 7e       	andi	r24, 0xE0	; 224
    2440:	8c 93       	st	X, r24
	u8Channel &=0x07;
    2442:	89 81       	ldd	r24, Y+1	; 0x01
    2444:	87 70       	andi	r24, 0x07	; 7
    2446:	89 83       	std	Y+1, r24	; 0x01
	ADMUX_R |= u8Channel;
    2448:	a7 e2       	ldi	r26, 0x27	; 39
    244a:	b0 e0       	ldi	r27, 0x00	; 0
    244c:	e7 e2       	ldi	r30, 0x27	; 39
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	90 81       	ld	r25, Z
    2452:	89 81       	ldd	r24, Y+1	; 0x01
    2454:	89 2b       	or	r24, r25
    2456:	8c 93       	st	X, r24

	//ADC start single conversion
	SET_BIT(ADCSRA_R, ADSC_B);
    2458:	a6 e2       	ldi	r26, 0x26	; 38
    245a:	b0 e0       	ldi	r27, 0x00	; 0
    245c:	e6 e2       	ldi	r30, 0x26	; 38
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	80 81       	ld	r24, Z
    2462:	80 64       	ori	r24, 0x40	; 64
    2464:	8c 93       	st	X, r24

	//ADC wait for conversion
	while(!(ADCSRA_R & (1<<ADIF_B)));
    2466:	e6 e2       	ldi	r30, 0x26	; 38
    2468:	f0 e0       	ldi	r31, 0x00	; 0
    246a:	80 81       	ld	r24, Z
    246c:	88 2f       	mov	r24, r24
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	80 71       	andi	r24, 0x10	; 16
    2472:	90 70       	andi	r25, 0x00	; 0
    2474:	00 97       	sbiw	r24, 0x00	; 0
    2476:	b9 f3       	breq	.-18     	; 0x2466 <ADC_Read+0x3e>
	//ADC CLEAR FLAG
	SET_BIT(ADCSRA_R, ADIF_B);
    2478:	a6 e2       	ldi	r26, 0x26	; 38
    247a:	b0 e0       	ldi	r27, 0x00	; 0
    247c:	e6 e2       	ldi	r30, 0x26	; 38
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	80 81       	ld	r24, Z
    2482:	80 61       	ori	r24, 0x10	; 16
    2484:	8c 93       	st	X, r24

	return ADC_R;
    2486:	e4 e2       	ldi	r30, 0x24	; 36
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	80 81       	ld	r24, Z
    248c:	91 81       	ldd	r25, Z+1	; 0x01
}
    248e:	0f 90       	pop	r0
    2490:	cf 91       	pop	r28
    2492:	df 91       	pop	r29
    2494:	08 95       	ret

00002496 <LCD_init>:
* Parameters (out): None
* Return Value    : void
* Description     : A function to initialize the LCD
*************************************************************************************************/
void LCD_init(void)
{
    2496:	df 93       	push	r29
    2498:	cf 93       	push	r28
    249a:	cd b7       	in	r28, 0x3d	; 61
    249c:	de b7       	in	r29, 0x3e	; 62
	/* Configure the control pins(E,RS,RW) as output pins */
	/* Configure the lowest 4 bits of the data port as output pins */
	DIO_Init();
    249e:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_Init>
	
	/* initialize LCD in 4-bit mode */
	LCD_sendCommand(FOUR_BITS_DATA_MODE);
    24a2:	82 e0       	ldi	r24, 0x02	; 2
    24a4:	0e 94 60 12 	call	0x24c0	; 0x24c0 <LCD_sendCommand>
	/* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE);
    24a8:	88 e2       	ldi	r24, 0x28	; 40
    24aa:	0e 94 60 12 	call	0x24c0	; 0x24c0 <LCD_sendCommand>

	/* cursor off */
	LCD_sendCommand(CURSOR_OFF);
    24ae:	8c e0       	ldi	r24, 0x0C	; 12
    24b0:	0e 94 60 12 	call	0x24c0	; 0x24c0 <LCD_sendCommand>
	/* clear LCD at the beginning */
	LCD_sendCommand(CLEAR_COMMAND);
    24b4:	81 e0       	ldi	r24, 0x01	; 1
    24b6:	0e 94 60 12 	call	0x24c0	; 0x24c0 <LCD_sendCommand>
}//end LCD_init
    24ba:	cf 91       	pop	r28
    24bc:	df 91       	pop	r29
    24be:	08 95       	ret

000024c0 <LCD_sendCommand>:
* Parameters (out): None
* Return Value    : void
* Description     : A function to send command to LCD
*************************************************************************************************/
void LCD_sendCommand(uint8_t u8Command)
{
    24c0:	0f 93       	push	r16
    24c2:	1f 93       	push	r17
    24c4:	df 93       	push	r29
    24c6:	cf 93       	push	r28
    24c8:	cd b7       	in	r28, 0x3d	; 61
    24ca:	de b7       	in	r29, 0x3e	; 62
    24cc:	c3 56       	subi	r28, 0x63	; 99
    24ce:	d0 40       	sbci	r29, 0x00	; 0
    24d0:	0f b6       	in	r0, 0x3f	; 63
    24d2:	f8 94       	cli
    24d4:	de bf       	out	0x3e, r29	; 62
    24d6:	0f be       	out	0x3f, r0	; 63
    24d8:	cd bf       	out	0x3d, r28	; 61
    24da:	fe 01       	movw	r30, r28
    24dc:	ed 59       	subi	r30, 0x9D	; 157
    24de:	ff 4f       	sbci	r31, 0xFF	; 255
    24e0:	80 83       	st	Z, r24
	/* Instruction Mode RS=0 */
	DIO_Write(RS, LOW);
    24e2:	80 e0       	ldi	r24, 0x00	; 0
    24e4:	60 e0       	ldi	r22, 0x00	; 0
    24e6:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
	/* write data to LCD so RW=0 */
	DIO_Write(RW, LOW);
    24ea:	81 e0       	ldi	r24, 0x01	; 1
    24ec:	60 e0       	ldi	r22, 0x00	; 0
    24ee:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
    24f2:	fe 01       	movw	r30, r28
    24f4:	e1 5a       	subi	r30, 0xA1	; 161
    24f6:	ff 4f       	sbci	r31, 0xFF	; 255
    24f8:	80 e0       	ldi	r24, 0x00	; 0
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	a0 e8       	ldi	r26, 0x80	; 128
    24fe:	bf e3       	ldi	r27, 0x3F	; 63
    2500:	80 83       	st	Z, r24
    2502:	91 83       	std	Z+1, r25	; 0x01
    2504:	a2 83       	std	Z+2, r26	; 0x02
    2506:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2508:	8e 01       	movw	r16, r28
    250a:	05 5a       	subi	r16, 0xA5	; 165
    250c:	1f 4f       	sbci	r17, 0xFF	; 255
    250e:	fe 01       	movw	r30, r28
    2510:	e1 5a       	subi	r30, 0xA1	; 161
    2512:	ff 4f       	sbci	r31, 0xFF	; 255
    2514:	60 81       	ld	r22, Z
    2516:	71 81       	ldd	r23, Z+1	; 0x01
    2518:	82 81       	ldd	r24, Z+2	; 0x02
    251a:	93 81       	ldd	r25, Z+3	; 0x03
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	4a ef       	ldi	r20, 0xFA	; 250
    2522:	54 e4       	ldi	r21, 0x44	; 68
    2524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	f8 01       	movw	r30, r16
    252e:	80 83       	st	Z, r24
    2530:	91 83       	std	Z+1, r25	; 0x01
    2532:	a2 83       	std	Z+2, r26	; 0x02
    2534:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2536:	fe 01       	movw	r30, r28
    2538:	e5 5a       	subi	r30, 0xA5	; 165
    253a:	ff 4f       	sbci	r31, 0xFF	; 255
    253c:	60 81       	ld	r22, Z
    253e:	71 81       	ldd	r23, Z+1	; 0x01
    2540:	82 81       	ldd	r24, Z+2	; 0x02
    2542:	93 81       	ldd	r25, Z+3	; 0x03
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	40 e8       	ldi	r20, 0x80	; 128
    254a:	5f e3       	ldi	r21, 0x3F	; 63
    254c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2550:	88 23       	and	r24, r24
    2552:	44 f4       	brge	.+16     	; 0x2564 <LCD_sendCommand+0xa4>
		__ticks = 1;
    2554:	fe 01       	movw	r30, r28
    2556:	e7 5a       	subi	r30, 0xA7	; 167
    2558:	ff 4f       	sbci	r31, 0xFF	; 255
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	91 83       	std	Z+1, r25	; 0x01
    2560:	80 83       	st	Z, r24
    2562:	64 c0       	rjmp	.+200    	; 0x262c <LCD_sendCommand+0x16c>
	else if (__tmp > 65535)
    2564:	fe 01       	movw	r30, r28
    2566:	e5 5a       	subi	r30, 0xA5	; 165
    2568:	ff 4f       	sbci	r31, 0xFF	; 255
    256a:	60 81       	ld	r22, Z
    256c:	71 81       	ldd	r23, Z+1	; 0x01
    256e:	82 81       	ldd	r24, Z+2	; 0x02
    2570:	93 81       	ldd	r25, Z+3	; 0x03
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	3f ef       	ldi	r19, 0xFF	; 255
    2576:	4f e7       	ldi	r20, 0x7F	; 127
    2578:	57 e4       	ldi	r21, 0x47	; 71
    257a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    257e:	18 16       	cp	r1, r24
    2580:	0c f0       	brlt	.+2      	; 0x2584 <LCD_sendCommand+0xc4>
    2582:	43 c0       	rjmp	.+134    	; 0x260a <LCD_sendCommand+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2584:	fe 01       	movw	r30, r28
    2586:	e1 5a       	subi	r30, 0xA1	; 161
    2588:	ff 4f       	sbci	r31, 0xFF	; 255
    258a:	60 81       	ld	r22, Z
    258c:	71 81       	ldd	r23, Z+1	; 0x01
    258e:	82 81       	ldd	r24, Z+2	; 0x02
    2590:	93 81       	ldd	r25, Z+3	; 0x03
    2592:	20 e0       	ldi	r18, 0x00	; 0
    2594:	30 e0       	ldi	r19, 0x00	; 0
    2596:	40 e2       	ldi	r20, 0x20	; 32
    2598:	51 e4       	ldi	r21, 0x41	; 65
    259a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    259e:	dc 01       	movw	r26, r24
    25a0:	cb 01       	movw	r24, r22
    25a2:	8e 01       	movw	r16, r28
    25a4:	07 5a       	subi	r16, 0xA7	; 167
    25a6:	1f 4f       	sbci	r17, 0xFF	; 255
    25a8:	bc 01       	movw	r22, r24
    25aa:	cd 01       	movw	r24, r26
    25ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	f8 01       	movw	r30, r16
    25b6:	91 83       	std	Z+1, r25	; 0x01
    25b8:	80 83       	st	Z, r24
    25ba:	1f c0       	rjmp	.+62     	; 0x25fa <LCD_sendCommand+0x13a>
    25bc:	fe 01       	movw	r30, r28
    25be:	e9 5a       	subi	r30, 0xA9	; 169
    25c0:	ff 4f       	sbci	r31, 0xFF	; 255
    25c2:	88 ec       	ldi	r24, 0xC8	; 200
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	91 83       	std	Z+1, r25	; 0x01
    25c8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25ca:	fe 01       	movw	r30, r28
    25cc:	e9 5a       	subi	r30, 0xA9	; 169
    25ce:	ff 4f       	sbci	r31, 0xFF	; 255
    25d0:	80 81       	ld	r24, Z
    25d2:	91 81       	ldd	r25, Z+1	; 0x01
    25d4:	01 97       	sbiw	r24, 0x01	; 1
    25d6:	f1 f7       	brne	.-4      	; 0x25d4 <LCD_sendCommand+0x114>
    25d8:	fe 01       	movw	r30, r28
    25da:	e9 5a       	subi	r30, 0xA9	; 169
    25dc:	ff 4f       	sbci	r31, 0xFF	; 255
    25de:	91 83       	std	Z+1, r25	; 0x01
    25e0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25e2:	de 01       	movw	r26, r28
    25e4:	a7 5a       	subi	r26, 0xA7	; 167
    25e6:	bf 4f       	sbci	r27, 0xFF	; 255
    25e8:	fe 01       	movw	r30, r28
    25ea:	e7 5a       	subi	r30, 0xA7	; 167
    25ec:	ff 4f       	sbci	r31, 0xFF	; 255
    25ee:	80 81       	ld	r24, Z
    25f0:	91 81       	ldd	r25, Z+1	; 0x01
    25f2:	01 97       	sbiw	r24, 0x01	; 1
    25f4:	11 96       	adiw	r26, 0x01	; 1
    25f6:	9c 93       	st	X, r25
    25f8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25fa:	fe 01       	movw	r30, r28
    25fc:	e7 5a       	subi	r30, 0xA7	; 167
    25fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2600:	80 81       	ld	r24, Z
    2602:	91 81       	ldd	r25, Z+1	; 0x01
    2604:	00 97       	sbiw	r24, 0x00	; 0
    2606:	d1 f6       	brne	.-76     	; 0x25bc <LCD_sendCommand+0xfc>
    2608:	27 c0       	rjmp	.+78     	; 0x2658 <LCD_sendCommand+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    260a:	8e 01       	movw	r16, r28
    260c:	07 5a       	subi	r16, 0xA7	; 167
    260e:	1f 4f       	sbci	r17, 0xFF	; 255
    2610:	fe 01       	movw	r30, r28
    2612:	e5 5a       	subi	r30, 0xA5	; 165
    2614:	ff 4f       	sbci	r31, 0xFF	; 255
    2616:	60 81       	ld	r22, Z
    2618:	71 81       	ldd	r23, Z+1	; 0x01
    261a:	82 81       	ldd	r24, Z+2	; 0x02
    261c:	93 81       	ldd	r25, Z+3	; 0x03
    261e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2622:	dc 01       	movw	r26, r24
    2624:	cb 01       	movw	r24, r22
    2626:	f8 01       	movw	r30, r16
    2628:	91 83       	std	Z+1, r25	; 0x01
    262a:	80 83       	st	Z, r24
    262c:	de 01       	movw	r26, r28
    262e:	ab 5a       	subi	r26, 0xAB	; 171
    2630:	bf 4f       	sbci	r27, 0xFF	; 255
    2632:	fe 01       	movw	r30, r28
    2634:	e7 5a       	subi	r30, 0xA7	; 167
    2636:	ff 4f       	sbci	r31, 0xFF	; 255
    2638:	80 81       	ld	r24, Z
    263a:	91 81       	ldd	r25, Z+1	; 0x01
    263c:	8d 93       	st	X+, r24
    263e:	9c 93       	st	X, r25
    2640:	fe 01       	movw	r30, r28
    2642:	eb 5a       	subi	r30, 0xAB	; 171
    2644:	ff 4f       	sbci	r31, 0xFF	; 255
    2646:	80 81       	ld	r24, Z
    2648:	91 81       	ldd	r25, Z+1	; 0x01
    264a:	01 97       	sbiw	r24, 0x01	; 1
    264c:	f1 f7       	brne	.-4      	; 0x264a <LCD_sendCommand+0x18a>
    264e:	fe 01       	movw	r30, r28
    2650:	eb 5a       	subi	r30, 0xAB	; 171
    2652:	ff 4f       	sbci	r31, 0xFF	; 255
    2654:	91 83       	std	Z+1, r25	; 0x01
    2656:	80 83       	st	Z, r24
	/* delay for processing Tas = 50ns */
	_delay_ms(1);
	/* Enable LCD E=1 */
	DIO_Write(E, HIGH);
    2658:	82 e0       	ldi	r24, 0x02	; 2
    265a:	61 e0       	ldi	r22, 0x01	; 1
    265c:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
    2660:	fe 01       	movw	r30, r28
    2662:	ef 5a       	subi	r30, 0xAF	; 175
    2664:	ff 4f       	sbci	r31, 0xFF	; 255
    2666:	80 e0       	ldi	r24, 0x00	; 0
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	a0 e8       	ldi	r26, 0x80	; 128
    266c:	bf e3       	ldi	r27, 0x3F	; 63
    266e:	80 83       	st	Z, r24
    2670:	91 83       	std	Z+1, r25	; 0x01
    2672:	a2 83       	std	Z+2, r26	; 0x02
    2674:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2676:	8e 01       	movw	r16, r28
    2678:	03 5b       	subi	r16, 0xB3	; 179
    267a:	1f 4f       	sbci	r17, 0xFF	; 255
    267c:	fe 01       	movw	r30, r28
    267e:	ef 5a       	subi	r30, 0xAF	; 175
    2680:	ff 4f       	sbci	r31, 0xFF	; 255
    2682:	60 81       	ld	r22, Z
    2684:	71 81       	ldd	r23, Z+1	; 0x01
    2686:	82 81       	ldd	r24, Z+2	; 0x02
    2688:	93 81       	ldd	r25, Z+3	; 0x03
    268a:	20 e0       	ldi	r18, 0x00	; 0
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	4a ef       	ldi	r20, 0xFA	; 250
    2690:	54 e4       	ldi	r21, 0x44	; 68
    2692:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2696:	dc 01       	movw	r26, r24
    2698:	cb 01       	movw	r24, r22
    269a:	f8 01       	movw	r30, r16
    269c:	80 83       	st	Z, r24
    269e:	91 83       	std	Z+1, r25	; 0x01
    26a0:	a2 83       	std	Z+2, r26	; 0x02
    26a2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26a4:	fe 01       	movw	r30, r28
    26a6:	e3 5b       	subi	r30, 0xB3	; 179
    26a8:	ff 4f       	sbci	r31, 0xFF	; 255
    26aa:	60 81       	ld	r22, Z
    26ac:	71 81       	ldd	r23, Z+1	; 0x01
    26ae:	82 81       	ldd	r24, Z+2	; 0x02
    26b0:	93 81       	ldd	r25, Z+3	; 0x03
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	40 e8       	ldi	r20, 0x80	; 128
    26b8:	5f e3       	ldi	r21, 0x3F	; 63
    26ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26be:	88 23       	and	r24, r24
    26c0:	44 f4       	brge	.+16     	; 0x26d2 <LCD_sendCommand+0x212>
		__ticks = 1;
    26c2:	fe 01       	movw	r30, r28
    26c4:	e5 5b       	subi	r30, 0xB5	; 181
    26c6:	ff 4f       	sbci	r31, 0xFF	; 255
    26c8:	81 e0       	ldi	r24, 0x01	; 1
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	91 83       	std	Z+1, r25	; 0x01
    26ce:	80 83       	st	Z, r24
    26d0:	64 c0       	rjmp	.+200    	; 0x279a <LCD_sendCommand+0x2da>
	else if (__tmp > 65535)
    26d2:	fe 01       	movw	r30, r28
    26d4:	e3 5b       	subi	r30, 0xB3	; 179
    26d6:	ff 4f       	sbci	r31, 0xFF	; 255
    26d8:	60 81       	ld	r22, Z
    26da:	71 81       	ldd	r23, Z+1	; 0x01
    26dc:	82 81       	ldd	r24, Z+2	; 0x02
    26de:	93 81       	ldd	r25, Z+3	; 0x03
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	3f ef       	ldi	r19, 0xFF	; 255
    26e4:	4f e7       	ldi	r20, 0x7F	; 127
    26e6:	57 e4       	ldi	r21, 0x47	; 71
    26e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26ec:	18 16       	cp	r1, r24
    26ee:	0c f0       	brlt	.+2      	; 0x26f2 <LCD_sendCommand+0x232>
    26f0:	43 c0       	rjmp	.+134    	; 0x2778 <LCD_sendCommand+0x2b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f2:	fe 01       	movw	r30, r28
    26f4:	ef 5a       	subi	r30, 0xAF	; 175
    26f6:	ff 4f       	sbci	r31, 0xFF	; 255
    26f8:	60 81       	ld	r22, Z
    26fa:	71 81       	ldd	r23, Z+1	; 0x01
    26fc:	82 81       	ldd	r24, Z+2	; 0x02
    26fe:	93 81       	ldd	r25, Z+3	; 0x03
    2700:	20 e0       	ldi	r18, 0x00	; 0
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	40 e2       	ldi	r20, 0x20	; 32
    2706:	51 e4       	ldi	r21, 0x41	; 65
    2708:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270c:	dc 01       	movw	r26, r24
    270e:	cb 01       	movw	r24, r22
    2710:	8e 01       	movw	r16, r28
    2712:	05 5b       	subi	r16, 0xB5	; 181
    2714:	1f 4f       	sbci	r17, 0xFF	; 255
    2716:	bc 01       	movw	r22, r24
    2718:	cd 01       	movw	r24, r26
    271a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271e:	dc 01       	movw	r26, r24
    2720:	cb 01       	movw	r24, r22
    2722:	f8 01       	movw	r30, r16
    2724:	91 83       	std	Z+1, r25	; 0x01
    2726:	80 83       	st	Z, r24
    2728:	1f c0       	rjmp	.+62     	; 0x2768 <LCD_sendCommand+0x2a8>
    272a:	fe 01       	movw	r30, r28
    272c:	e7 5b       	subi	r30, 0xB7	; 183
    272e:	ff 4f       	sbci	r31, 0xFF	; 255
    2730:	88 ec       	ldi	r24, 0xC8	; 200
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	91 83       	std	Z+1, r25	; 0x01
    2736:	80 83       	st	Z, r24
    2738:	fe 01       	movw	r30, r28
    273a:	e7 5b       	subi	r30, 0xB7	; 183
    273c:	ff 4f       	sbci	r31, 0xFF	; 255
    273e:	80 81       	ld	r24, Z
    2740:	91 81       	ldd	r25, Z+1	; 0x01
    2742:	01 97       	sbiw	r24, 0x01	; 1
    2744:	f1 f7       	brne	.-4      	; 0x2742 <LCD_sendCommand+0x282>
    2746:	fe 01       	movw	r30, r28
    2748:	e7 5b       	subi	r30, 0xB7	; 183
    274a:	ff 4f       	sbci	r31, 0xFF	; 255
    274c:	91 83       	std	Z+1, r25	; 0x01
    274e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2750:	de 01       	movw	r26, r28
    2752:	a5 5b       	subi	r26, 0xB5	; 181
    2754:	bf 4f       	sbci	r27, 0xFF	; 255
    2756:	fe 01       	movw	r30, r28
    2758:	e5 5b       	subi	r30, 0xB5	; 181
    275a:	ff 4f       	sbci	r31, 0xFF	; 255
    275c:	80 81       	ld	r24, Z
    275e:	91 81       	ldd	r25, Z+1	; 0x01
    2760:	01 97       	sbiw	r24, 0x01	; 1
    2762:	11 96       	adiw	r26, 0x01	; 1
    2764:	9c 93       	st	X, r25
    2766:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2768:	fe 01       	movw	r30, r28
    276a:	e5 5b       	subi	r30, 0xB5	; 181
    276c:	ff 4f       	sbci	r31, 0xFF	; 255
    276e:	80 81       	ld	r24, Z
    2770:	91 81       	ldd	r25, Z+1	; 0x01
    2772:	00 97       	sbiw	r24, 0x00	; 0
    2774:	d1 f6       	brne	.-76     	; 0x272a <LCD_sendCommand+0x26a>
    2776:	27 c0       	rjmp	.+78     	; 0x27c6 <LCD_sendCommand+0x306>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2778:	8e 01       	movw	r16, r28
    277a:	05 5b       	subi	r16, 0xB5	; 181
    277c:	1f 4f       	sbci	r17, 0xFF	; 255
    277e:	fe 01       	movw	r30, r28
    2780:	e3 5b       	subi	r30, 0xB3	; 179
    2782:	ff 4f       	sbci	r31, 0xFF	; 255
    2784:	60 81       	ld	r22, Z
    2786:	71 81       	ldd	r23, Z+1	; 0x01
    2788:	82 81       	ldd	r24, Z+2	; 0x02
    278a:	93 81       	ldd	r25, Z+3	; 0x03
    278c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2790:	dc 01       	movw	r26, r24
    2792:	cb 01       	movw	r24, r22
    2794:	f8 01       	movw	r30, r16
    2796:	91 83       	std	Z+1, r25	; 0x01
    2798:	80 83       	st	Z, r24
    279a:	de 01       	movw	r26, r28
    279c:	a9 5b       	subi	r26, 0xB9	; 185
    279e:	bf 4f       	sbci	r27, 0xFF	; 255
    27a0:	fe 01       	movw	r30, r28
    27a2:	e5 5b       	subi	r30, 0xB5	; 181
    27a4:	ff 4f       	sbci	r31, 0xFF	; 255
    27a6:	80 81       	ld	r24, Z
    27a8:	91 81       	ldd	r25, Z+1	; 0x01
    27aa:	8d 93       	st	X+, r24
    27ac:	9c 93       	st	X, r25
    27ae:	fe 01       	movw	r30, r28
    27b0:	e9 5b       	subi	r30, 0xB9	; 185
    27b2:	ff 4f       	sbci	r31, 0xFF	; 255
    27b4:	80 81       	ld	r24, Z
    27b6:	91 81       	ldd	r25, Z+1	; 0x01
    27b8:	01 97       	sbiw	r24, 0x01	; 1
    27ba:	f1 f7       	brne	.-4      	; 0x27b8 <LCD_sendCommand+0x2f8>
    27bc:	fe 01       	movw	r30, r28
    27be:	e9 5b       	subi	r30, 0xB9	; 185
    27c0:	ff 4f       	sbci	r31, 0xFF	; 255
    27c2:	91 83       	std	Z+1, r25	; 0x01
    27c4:	80 83       	st	Z, r24
	/* delay for processing Tpw - Tdws = 190ns */
	_delay_ms(1);

	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((u8Command & 0xF0) >> 4);
    27c6:	a8 e3       	ldi	r26, 0x38	; 56
    27c8:	b0 e0       	ldi	r27, 0x00	; 0
    27ca:	e8 e3       	ldi	r30, 0x38	; 56
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	80 81       	ld	r24, Z
    27d0:	98 2f       	mov	r25, r24
    27d2:	90 7f       	andi	r25, 0xF0	; 240
    27d4:	fe 01       	movw	r30, r28
    27d6:	ed 59       	subi	r30, 0x9D	; 157
    27d8:	ff 4f       	sbci	r31, 0xFF	; 255
    27da:	80 81       	ld	r24, Z
    27dc:	82 95       	swap	r24
    27de:	8f 70       	andi	r24, 0x0F	; 15
    27e0:	89 2b       	or	r24, r25
    27e2:	8c 93       	st	X, r24
    27e4:	fe 01       	movw	r30, r28
    27e6:	ed 5b       	subi	r30, 0xBD	; 189
    27e8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ea:	80 e0       	ldi	r24, 0x00	; 0
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	a0 e8       	ldi	r26, 0x80	; 128
    27f0:	bf e3       	ldi	r27, 0x3F	; 63
    27f2:	80 83       	st	Z, r24
    27f4:	91 83       	std	Z+1, r25	; 0x01
    27f6:	a2 83       	std	Z+2, r26	; 0x02
    27f8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27fa:	8e 01       	movw	r16, r28
    27fc:	01 5c       	subi	r16, 0xC1	; 193
    27fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2800:	fe 01       	movw	r30, r28
    2802:	ed 5b       	subi	r30, 0xBD	; 189
    2804:	ff 4f       	sbci	r31, 0xFF	; 255
    2806:	60 81       	ld	r22, Z
    2808:	71 81       	ldd	r23, Z+1	; 0x01
    280a:	82 81       	ldd	r24, Z+2	; 0x02
    280c:	93 81       	ldd	r25, Z+3	; 0x03
    280e:	20 e0       	ldi	r18, 0x00	; 0
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	4a ef       	ldi	r20, 0xFA	; 250
    2814:	54 e4       	ldi	r21, 0x44	; 68
    2816:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    281a:	dc 01       	movw	r26, r24
    281c:	cb 01       	movw	r24, r22
    281e:	f8 01       	movw	r30, r16
    2820:	80 83       	st	Z, r24
    2822:	91 83       	std	Z+1, r25	; 0x01
    2824:	a2 83       	std	Z+2, r26	; 0x02
    2826:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2828:	fe 01       	movw	r30, r28
    282a:	ff 96       	adiw	r30, 0x3f	; 63
    282c:	60 81       	ld	r22, Z
    282e:	71 81       	ldd	r23, Z+1	; 0x01
    2830:	82 81       	ldd	r24, Z+2	; 0x02
    2832:	93 81       	ldd	r25, Z+3	; 0x03
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	30 e0       	ldi	r19, 0x00	; 0
    2838:	40 e8       	ldi	r20, 0x80	; 128
    283a:	5f e3       	ldi	r21, 0x3F	; 63
    283c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2840:	88 23       	and	r24, r24
    2842:	2c f4       	brge	.+10     	; 0x284e <LCD_sendCommand+0x38e>
		__ticks = 1;
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	9e af       	std	Y+62, r25	; 0x3e
    284a:	8d af       	std	Y+61, r24	; 0x3d
    284c:	46 c0       	rjmp	.+140    	; 0x28da <LCD_sendCommand+0x41a>
	else if (__tmp > 65535)
    284e:	fe 01       	movw	r30, r28
    2850:	ff 96       	adiw	r30, 0x3f	; 63
    2852:	60 81       	ld	r22, Z
    2854:	71 81       	ldd	r23, Z+1	; 0x01
    2856:	82 81       	ldd	r24, Z+2	; 0x02
    2858:	93 81       	ldd	r25, Z+3	; 0x03
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	3f ef       	ldi	r19, 0xFF	; 255
    285e:	4f e7       	ldi	r20, 0x7F	; 127
    2860:	57 e4       	ldi	r21, 0x47	; 71
    2862:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2866:	18 16       	cp	r1, r24
    2868:	64 f5       	brge	.+88     	; 0x28c2 <LCD_sendCommand+0x402>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    286a:	fe 01       	movw	r30, r28
    286c:	ed 5b       	subi	r30, 0xBD	; 189
    286e:	ff 4f       	sbci	r31, 0xFF	; 255
    2870:	60 81       	ld	r22, Z
    2872:	71 81       	ldd	r23, Z+1	; 0x01
    2874:	82 81       	ldd	r24, Z+2	; 0x02
    2876:	93 81       	ldd	r25, Z+3	; 0x03
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	40 e2       	ldi	r20, 0x20	; 32
    287e:	51 e4       	ldi	r21, 0x41	; 65
    2880:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2884:	dc 01       	movw	r26, r24
    2886:	cb 01       	movw	r24, r22
    2888:	bc 01       	movw	r22, r24
    288a:	cd 01       	movw	r24, r26
    288c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	9e af       	std	Y+62, r25	; 0x3e
    2896:	8d af       	std	Y+61, r24	; 0x3d
    2898:	0f c0       	rjmp	.+30     	; 0x28b8 <LCD_sendCommand+0x3f8>
    289a:	88 ec       	ldi	r24, 0xC8	; 200
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	9c af       	std	Y+60, r25	; 0x3c
    28a0:	8b af       	std	Y+59, r24	; 0x3b
    28a2:	8b ad       	ldd	r24, Y+59	; 0x3b
    28a4:	9c ad       	ldd	r25, Y+60	; 0x3c
    28a6:	01 97       	sbiw	r24, 0x01	; 1
    28a8:	f1 f7       	brne	.-4      	; 0x28a6 <LCD_sendCommand+0x3e6>
    28aa:	9c af       	std	Y+60, r25	; 0x3c
    28ac:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ae:	8d ad       	ldd	r24, Y+61	; 0x3d
    28b0:	9e ad       	ldd	r25, Y+62	; 0x3e
    28b2:	01 97       	sbiw	r24, 0x01	; 1
    28b4:	9e af       	std	Y+62, r25	; 0x3e
    28b6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    28ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    28bc:	00 97       	sbiw	r24, 0x00	; 0
    28be:	69 f7       	brne	.-38     	; 0x289a <LCD_sendCommand+0x3da>
    28c0:	16 c0       	rjmp	.+44     	; 0x28ee <LCD_sendCommand+0x42e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c2:	fe 01       	movw	r30, r28
    28c4:	ff 96       	adiw	r30, 0x3f	; 63
    28c6:	60 81       	ld	r22, Z
    28c8:	71 81       	ldd	r23, Z+1	; 0x01
    28ca:	82 81       	ldd	r24, Z+2	; 0x02
    28cc:	93 81       	ldd	r25, Z+3	; 0x03
    28ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d2:	dc 01       	movw	r26, r24
    28d4:	cb 01       	movw	r24, r22
    28d6:	9e af       	std	Y+62, r25	; 0x3e
    28d8:	8d af       	std	Y+61, r24	; 0x3d
    28da:	8d ad       	ldd	r24, Y+61	; 0x3d
    28dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    28de:	9a af       	std	Y+58, r25	; 0x3a
    28e0:	89 af       	std	Y+57, r24	; 0x39
    28e2:	89 ad       	ldd	r24, Y+57	; 0x39
    28e4:	9a ad       	ldd	r25, Y+58	; 0x3a
    28e6:	01 97       	sbiw	r24, 0x01	; 1
    28e8:	f1 f7       	brne	.-4      	; 0x28e6 <LCD_sendCommand+0x426>
    28ea:	9a af       	std	Y+58, r25	; 0x3a
    28ec:	89 af       	std	Y+57, r24	; 0x39

	/* delay for processing Tdsw = 100ns */
	_delay_ms(1);
	/* disable LCD E=0 */
	DIO_Write(E, LOW);
    28ee:	82 e0       	ldi	r24, 0x02	; 2
    28f0:	60 e0       	ldi	r22, 0x00	; 0
    28f2:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
    28f6:	80 e0       	ldi	r24, 0x00	; 0
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	a0 e8       	ldi	r26, 0x80	; 128
    28fc:	bf e3       	ldi	r27, 0x3F	; 63
    28fe:	8d ab       	std	Y+53, r24	; 0x35
    2900:	9e ab       	std	Y+54, r25	; 0x36
    2902:	af ab       	std	Y+55, r26	; 0x37
    2904:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2906:	6d a9       	ldd	r22, Y+53	; 0x35
    2908:	7e a9       	ldd	r23, Y+54	; 0x36
    290a:	8f a9       	ldd	r24, Y+55	; 0x37
    290c:	98 ad       	ldd	r25, Y+56	; 0x38
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	4a ef       	ldi	r20, 0xFA	; 250
    2914:	54 e4       	ldi	r21, 0x44	; 68
    2916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	89 ab       	std	Y+49, r24	; 0x31
    2920:	9a ab       	std	Y+50, r25	; 0x32
    2922:	ab ab       	std	Y+51, r26	; 0x33
    2924:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2926:	69 a9       	ldd	r22, Y+49	; 0x31
    2928:	7a a9       	ldd	r23, Y+50	; 0x32
    292a:	8b a9       	ldd	r24, Y+51	; 0x33
    292c:	9c a9       	ldd	r25, Y+52	; 0x34
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	40 e8       	ldi	r20, 0x80	; 128
    2934:	5f e3       	ldi	r21, 0x3F	; 63
    2936:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    293a:	88 23       	and	r24, r24
    293c:	2c f4       	brge	.+10     	; 0x2948 <LCD_sendCommand+0x488>
		__ticks = 1;
    293e:	81 e0       	ldi	r24, 0x01	; 1
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	98 ab       	std	Y+48, r25	; 0x30
    2944:	8f a7       	std	Y+47, r24	; 0x2f
    2946:	3f c0       	rjmp	.+126    	; 0x29c6 <LCD_sendCommand+0x506>
	else if (__tmp > 65535)
    2948:	69 a9       	ldd	r22, Y+49	; 0x31
    294a:	7a a9       	ldd	r23, Y+50	; 0x32
    294c:	8b a9       	ldd	r24, Y+51	; 0x33
    294e:	9c a9       	ldd	r25, Y+52	; 0x34
    2950:	20 e0       	ldi	r18, 0x00	; 0
    2952:	3f ef       	ldi	r19, 0xFF	; 255
    2954:	4f e7       	ldi	r20, 0x7F	; 127
    2956:	57 e4       	ldi	r21, 0x47	; 71
    2958:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    295c:	18 16       	cp	r1, r24
    295e:	4c f5       	brge	.+82     	; 0x29b2 <LCD_sendCommand+0x4f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2960:	6d a9       	ldd	r22, Y+53	; 0x35
    2962:	7e a9       	ldd	r23, Y+54	; 0x36
    2964:	8f a9       	ldd	r24, Y+55	; 0x37
    2966:	98 ad       	ldd	r25, Y+56	; 0x38
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	40 e2       	ldi	r20, 0x20	; 32
    296e:	51 e4       	ldi	r21, 0x41	; 65
    2970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	bc 01       	movw	r22, r24
    297a:	cd 01       	movw	r24, r26
    297c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	98 ab       	std	Y+48, r25	; 0x30
    2986:	8f a7       	std	Y+47, r24	; 0x2f
    2988:	0f c0       	rjmp	.+30     	; 0x29a8 <LCD_sendCommand+0x4e8>
    298a:	88 ec       	ldi	r24, 0xC8	; 200
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	9e a7       	std	Y+46, r25	; 0x2e
    2990:	8d a7       	std	Y+45, r24	; 0x2d
    2992:	8d a5       	ldd	r24, Y+45	; 0x2d
    2994:	9e a5       	ldd	r25, Y+46	; 0x2e
    2996:	01 97       	sbiw	r24, 0x01	; 1
    2998:	f1 f7       	brne	.-4      	; 0x2996 <LCD_sendCommand+0x4d6>
    299a:	9e a7       	std	Y+46, r25	; 0x2e
    299c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    299e:	8f a5       	ldd	r24, Y+47	; 0x2f
    29a0:	98 a9       	ldd	r25, Y+48	; 0x30
    29a2:	01 97       	sbiw	r24, 0x01	; 1
    29a4:	98 ab       	std	Y+48, r25	; 0x30
    29a6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    29aa:	98 a9       	ldd	r25, Y+48	; 0x30
    29ac:	00 97       	sbiw	r24, 0x00	; 0
    29ae:	69 f7       	brne	.-38     	; 0x298a <LCD_sendCommand+0x4ca>
    29b0:	14 c0       	rjmp	.+40     	; 0x29da <LCD_sendCommand+0x51a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b2:	69 a9       	ldd	r22, Y+49	; 0x31
    29b4:	7a a9       	ldd	r23, Y+50	; 0x32
    29b6:	8b a9       	ldd	r24, Y+51	; 0x33
    29b8:	9c a9       	ldd	r25, Y+52	; 0x34
    29ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	98 ab       	std	Y+48, r25	; 0x30
    29c4:	8f a7       	std	Y+47, r24	; 0x2f
    29c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    29c8:	98 a9       	ldd	r25, Y+48	; 0x30
    29ca:	9c a7       	std	Y+44, r25	; 0x2c
    29cc:	8b a7       	std	Y+43, r24	; 0x2b
    29ce:	8b a5       	ldd	r24, Y+43	; 0x2b
    29d0:	9c a5       	ldd	r25, Y+44	; 0x2c
    29d2:	01 97       	sbiw	r24, 0x01	; 1
    29d4:	f1 f7       	brne	.-4      	; 0x29d2 <LCD_sendCommand+0x512>
    29d6:	9c a7       	std	Y+44, r25	; 0x2c
    29d8:	8b a7       	std	Y+43, r24	; 0x2b
	/* delay for processing Th = 13ns */
	_delay_ms(1);
	/* Enable LCD E=1 */
	DIO_Write(E, HIGH);
    29da:	82 e0       	ldi	r24, 0x02	; 2
    29dc:	61 e0       	ldi	r22, 0x01	; 1
    29de:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
    29e2:	80 e0       	ldi	r24, 0x00	; 0
    29e4:	90 e0       	ldi	r25, 0x00	; 0
    29e6:	a0 e8       	ldi	r26, 0x80	; 128
    29e8:	bf e3       	ldi	r27, 0x3F	; 63
    29ea:	8f a3       	std	Y+39, r24	; 0x27
    29ec:	98 a7       	std	Y+40, r25	; 0x28
    29ee:	a9 a7       	std	Y+41, r26	; 0x29
    29f0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29f2:	6f a1       	ldd	r22, Y+39	; 0x27
    29f4:	78 a5       	ldd	r23, Y+40	; 0x28
    29f6:	89 a5       	ldd	r24, Y+41	; 0x29
    29f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    29fa:	20 e0       	ldi	r18, 0x00	; 0
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	4a ef       	ldi	r20, 0xFA	; 250
    2a00:	54 e4       	ldi	r21, 0x44	; 68
    2a02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a06:	dc 01       	movw	r26, r24
    2a08:	cb 01       	movw	r24, r22
    2a0a:	8b a3       	std	Y+35, r24	; 0x23
    2a0c:	9c a3       	std	Y+36, r25	; 0x24
    2a0e:	ad a3       	std	Y+37, r26	; 0x25
    2a10:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a12:	6b a1       	ldd	r22, Y+35	; 0x23
    2a14:	7c a1       	ldd	r23, Y+36	; 0x24
    2a16:	8d a1       	ldd	r24, Y+37	; 0x25
    2a18:	9e a1       	ldd	r25, Y+38	; 0x26
    2a1a:	20 e0       	ldi	r18, 0x00	; 0
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	40 e8       	ldi	r20, 0x80	; 128
    2a20:	5f e3       	ldi	r21, 0x3F	; 63
    2a22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a26:	88 23       	and	r24, r24
    2a28:	2c f4       	brge	.+10     	; 0x2a34 <LCD_sendCommand+0x574>
		__ticks = 1;
    2a2a:	81 e0       	ldi	r24, 0x01	; 1
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	9a a3       	std	Y+34, r25	; 0x22
    2a30:	89 a3       	std	Y+33, r24	; 0x21
    2a32:	3f c0       	rjmp	.+126    	; 0x2ab2 <LCD_sendCommand+0x5f2>
	else if (__tmp > 65535)
    2a34:	6b a1       	ldd	r22, Y+35	; 0x23
    2a36:	7c a1       	ldd	r23, Y+36	; 0x24
    2a38:	8d a1       	ldd	r24, Y+37	; 0x25
    2a3a:	9e a1       	ldd	r25, Y+38	; 0x26
    2a3c:	20 e0       	ldi	r18, 0x00	; 0
    2a3e:	3f ef       	ldi	r19, 0xFF	; 255
    2a40:	4f e7       	ldi	r20, 0x7F	; 127
    2a42:	57 e4       	ldi	r21, 0x47	; 71
    2a44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a48:	18 16       	cp	r1, r24
    2a4a:	4c f5       	brge	.+82     	; 0x2a9e <LCD_sendCommand+0x5de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a4c:	6f a1       	ldd	r22, Y+39	; 0x27
    2a4e:	78 a5       	ldd	r23, Y+40	; 0x28
    2a50:	89 a5       	ldd	r24, Y+41	; 0x29
    2a52:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	40 e2       	ldi	r20, 0x20	; 32
    2a5a:	51 e4       	ldi	r21, 0x41	; 65
    2a5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a60:	dc 01       	movw	r26, r24
    2a62:	cb 01       	movw	r24, r22
    2a64:	bc 01       	movw	r22, r24
    2a66:	cd 01       	movw	r24, r26
    2a68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a6c:	dc 01       	movw	r26, r24
    2a6e:	cb 01       	movw	r24, r22
    2a70:	9a a3       	std	Y+34, r25	; 0x22
    2a72:	89 a3       	std	Y+33, r24	; 0x21
    2a74:	0f c0       	rjmp	.+30     	; 0x2a94 <LCD_sendCommand+0x5d4>
    2a76:	88 ec       	ldi	r24, 0xC8	; 200
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	98 a3       	std	Y+32, r25	; 0x20
    2a7c:	8f 8f       	std	Y+31, r24	; 0x1f
    2a7e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2a80:	98 a1       	ldd	r25, Y+32	; 0x20
    2a82:	01 97       	sbiw	r24, 0x01	; 1
    2a84:	f1 f7       	brne	.-4      	; 0x2a82 <LCD_sendCommand+0x5c2>
    2a86:	98 a3       	std	Y+32, r25	; 0x20
    2a88:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a8a:	89 a1       	ldd	r24, Y+33	; 0x21
    2a8c:	9a a1       	ldd	r25, Y+34	; 0x22
    2a8e:	01 97       	sbiw	r24, 0x01	; 1
    2a90:	9a a3       	std	Y+34, r25	; 0x22
    2a92:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a94:	89 a1       	ldd	r24, Y+33	; 0x21
    2a96:	9a a1       	ldd	r25, Y+34	; 0x22
    2a98:	00 97       	sbiw	r24, 0x00	; 0
    2a9a:	69 f7       	brne	.-38     	; 0x2a76 <LCD_sendCommand+0x5b6>
    2a9c:	14 c0       	rjmp	.+40     	; 0x2ac6 <LCD_sendCommand+0x606>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a9e:	6b a1       	ldd	r22, Y+35	; 0x23
    2aa0:	7c a1       	ldd	r23, Y+36	; 0x24
    2aa2:	8d a1       	ldd	r24, Y+37	; 0x25
    2aa4:	9e a1       	ldd	r25, Y+38	; 0x26
    2aa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aaa:	dc 01       	movw	r26, r24
    2aac:	cb 01       	movw	r24, r22
    2aae:	9a a3       	std	Y+34, r25	; 0x22
    2ab0:	89 a3       	std	Y+33, r24	; 0x21
    2ab2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ab4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ab6:	9e 8f       	std	Y+30, r25	; 0x1e
    2ab8:	8d 8f       	std	Y+29, r24	; 0x1d
    2aba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2abc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2abe:	01 97       	sbiw	r24, 0x01	; 1
    2ac0:	f1 f7       	brne	.-4      	; 0x2abe <LCD_sendCommand+0x5fe>
    2ac2:	9e 8f       	std	Y+30, r25	; 0x1e
    2ac4:	8d 8f       	std	Y+29, r24	; 0x1d
	/* delay for processing Tpw - Tdws = 190ns */
	_delay_ms(1);

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (u8Command & 0x0F);
    2ac6:	a8 e3       	ldi	r26, 0x38	; 56
    2ac8:	b0 e0       	ldi	r27, 0x00	; 0
    2aca:	e8 e3       	ldi	r30, 0x38	; 56
    2acc:	f0 e0       	ldi	r31, 0x00	; 0
    2ace:	80 81       	ld	r24, Z
    2ad0:	98 2f       	mov	r25, r24
    2ad2:	90 7f       	andi	r25, 0xF0	; 240
    2ad4:	fe 01       	movw	r30, r28
    2ad6:	ed 59       	subi	r30, 0x9D	; 157
    2ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ada:	80 81       	ld	r24, Z
    2adc:	8f 70       	andi	r24, 0x0F	; 15
    2ade:	89 2b       	or	r24, r25
    2ae0:	8c 93       	st	X, r24
    2ae2:	80 e0       	ldi	r24, 0x00	; 0
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	a0 e8       	ldi	r26, 0x80	; 128
    2ae8:	bf e3       	ldi	r27, 0x3F	; 63
    2aea:	89 8f       	std	Y+25, r24	; 0x19
    2aec:	9a 8f       	std	Y+26, r25	; 0x1a
    2aee:	ab 8f       	std	Y+27, r26	; 0x1b
    2af0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2af2:	69 8d       	ldd	r22, Y+25	; 0x19
    2af4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2af6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2af8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2afa:	20 e0       	ldi	r18, 0x00	; 0
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	4a ef       	ldi	r20, 0xFA	; 250
    2b00:	54 e4       	ldi	r21, 0x44	; 68
    2b02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b06:	dc 01       	movw	r26, r24
    2b08:	cb 01       	movw	r24, r22
    2b0a:	8d 8b       	std	Y+21, r24	; 0x15
    2b0c:	9e 8b       	std	Y+22, r25	; 0x16
    2b0e:	af 8b       	std	Y+23, r26	; 0x17
    2b10:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b12:	6d 89       	ldd	r22, Y+21	; 0x15
    2b14:	7e 89       	ldd	r23, Y+22	; 0x16
    2b16:	8f 89       	ldd	r24, Y+23	; 0x17
    2b18:	98 8d       	ldd	r25, Y+24	; 0x18
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	40 e8       	ldi	r20, 0x80	; 128
    2b20:	5f e3       	ldi	r21, 0x3F	; 63
    2b22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b26:	88 23       	and	r24, r24
    2b28:	2c f4       	brge	.+10     	; 0x2b34 <LCD_sendCommand+0x674>
		__ticks = 1;
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	9c 8b       	std	Y+20, r25	; 0x14
    2b30:	8b 8b       	std	Y+19, r24	; 0x13
    2b32:	3f c0       	rjmp	.+126    	; 0x2bb2 <LCD_sendCommand+0x6f2>
	else if (__tmp > 65535)
    2b34:	6d 89       	ldd	r22, Y+21	; 0x15
    2b36:	7e 89       	ldd	r23, Y+22	; 0x16
    2b38:	8f 89       	ldd	r24, Y+23	; 0x17
    2b3a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b3c:	20 e0       	ldi	r18, 0x00	; 0
    2b3e:	3f ef       	ldi	r19, 0xFF	; 255
    2b40:	4f e7       	ldi	r20, 0x7F	; 127
    2b42:	57 e4       	ldi	r21, 0x47	; 71
    2b44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b48:	18 16       	cp	r1, r24
    2b4a:	4c f5       	brge	.+82     	; 0x2b9e <LCD_sendCommand+0x6de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b4c:	69 8d       	ldd	r22, Y+25	; 0x19
    2b4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b54:	20 e0       	ldi	r18, 0x00	; 0
    2b56:	30 e0       	ldi	r19, 0x00	; 0
    2b58:	40 e2       	ldi	r20, 0x20	; 32
    2b5a:	51 e4       	ldi	r21, 0x41	; 65
    2b5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b60:	dc 01       	movw	r26, r24
    2b62:	cb 01       	movw	r24, r22
    2b64:	bc 01       	movw	r22, r24
    2b66:	cd 01       	movw	r24, r26
    2b68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b6c:	dc 01       	movw	r26, r24
    2b6e:	cb 01       	movw	r24, r22
    2b70:	9c 8b       	std	Y+20, r25	; 0x14
    2b72:	8b 8b       	std	Y+19, r24	; 0x13
    2b74:	0f c0       	rjmp	.+30     	; 0x2b94 <LCD_sendCommand+0x6d4>
    2b76:	88 ec       	ldi	r24, 0xC8	; 200
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	9a 8b       	std	Y+18, r25	; 0x12
    2b7c:	89 8b       	std	Y+17, r24	; 0x11
    2b7e:	89 89       	ldd	r24, Y+17	; 0x11
    2b80:	9a 89       	ldd	r25, Y+18	; 0x12
    2b82:	01 97       	sbiw	r24, 0x01	; 1
    2b84:	f1 f7       	brne	.-4      	; 0x2b82 <LCD_sendCommand+0x6c2>
    2b86:	9a 8b       	std	Y+18, r25	; 0x12
    2b88:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b8a:	8b 89       	ldd	r24, Y+19	; 0x13
    2b8c:	9c 89       	ldd	r25, Y+20	; 0x14
    2b8e:	01 97       	sbiw	r24, 0x01	; 1
    2b90:	9c 8b       	std	Y+20, r25	; 0x14
    2b92:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b94:	8b 89       	ldd	r24, Y+19	; 0x13
    2b96:	9c 89       	ldd	r25, Y+20	; 0x14
    2b98:	00 97       	sbiw	r24, 0x00	; 0
    2b9a:	69 f7       	brne	.-38     	; 0x2b76 <LCD_sendCommand+0x6b6>
    2b9c:	14 c0       	rjmp	.+40     	; 0x2bc6 <LCD_sendCommand+0x706>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b9e:	6d 89       	ldd	r22, Y+21	; 0x15
    2ba0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ba2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ba4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ba6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2baa:	dc 01       	movw	r26, r24
    2bac:	cb 01       	movw	r24, r22
    2bae:	9c 8b       	std	Y+20, r25	; 0x14
    2bb0:	8b 8b       	std	Y+19, r24	; 0x13
    2bb2:	8b 89       	ldd	r24, Y+19	; 0x13
    2bb4:	9c 89       	ldd	r25, Y+20	; 0x14
    2bb6:	98 8b       	std	Y+16, r25	; 0x10
    2bb8:	8f 87       	std	Y+15, r24	; 0x0f
    2bba:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bbc:	98 89       	ldd	r25, Y+16	; 0x10
    2bbe:	01 97       	sbiw	r24, 0x01	; 1
    2bc0:	f1 f7       	brne	.-4      	; 0x2bbe <LCD_sendCommand+0x6fe>
    2bc2:	98 8b       	std	Y+16, r25	; 0x10
    2bc4:	8f 87       	std	Y+15, r24	; 0x0f
	/* delay for processing Tdsw = 100ns */
	_delay_ms(1);
	/* disable LCD E=0 */
	DIO_Write(E, LOW);
    2bc6:	82 e0       	ldi	r24, 0x02	; 2
    2bc8:	60 e0       	ldi	r22, 0x00	; 0
    2bca:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
    2bce:	80 e0       	ldi	r24, 0x00	; 0
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	a0 e8       	ldi	r26, 0x80	; 128
    2bd4:	bf e3       	ldi	r27, 0x3F	; 63
    2bd6:	8b 87       	std	Y+11, r24	; 0x0b
    2bd8:	9c 87       	std	Y+12, r25	; 0x0c
    2bda:	ad 87       	std	Y+13, r26	; 0x0d
    2bdc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bde:	6b 85       	ldd	r22, Y+11	; 0x0b
    2be0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2be2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2be4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2be6:	20 e0       	ldi	r18, 0x00	; 0
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	4a ef       	ldi	r20, 0xFA	; 250
    2bec:	54 e4       	ldi	r21, 0x44	; 68
    2bee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	8f 83       	std	Y+7, r24	; 0x07
    2bf8:	98 87       	std	Y+8, r25	; 0x08
    2bfa:	a9 87       	std	Y+9, r26	; 0x09
    2bfc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2bfe:	6f 81       	ldd	r22, Y+7	; 0x07
    2c00:	78 85       	ldd	r23, Y+8	; 0x08
    2c02:	89 85       	ldd	r24, Y+9	; 0x09
    2c04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	40 e8       	ldi	r20, 0x80	; 128
    2c0c:	5f e3       	ldi	r21, 0x3F	; 63
    2c0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c12:	88 23       	and	r24, r24
    2c14:	2c f4       	brge	.+10     	; 0x2c20 <LCD_sendCommand+0x760>
		__ticks = 1;
    2c16:	81 e0       	ldi	r24, 0x01	; 1
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	9e 83       	std	Y+6, r25	; 0x06
    2c1c:	8d 83       	std	Y+5, r24	; 0x05
    2c1e:	3f c0       	rjmp	.+126    	; 0x2c9e <LCD_sendCommand+0x7de>
	else if (__tmp > 65535)
    2c20:	6f 81       	ldd	r22, Y+7	; 0x07
    2c22:	78 85       	ldd	r23, Y+8	; 0x08
    2c24:	89 85       	ldd	r24, Y+9	; 0x09
    2c26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c28:	20 e0       	ldi	r18, 0x00	; 0
    2c2a:	3f ef       	ldi	r19, 0xFF	; 255
    2c2c:	4f e7       	ldi	r20, 0x7F	; 127
    2c2e:	57 e4       	ldi	r21, 0x47	; 71
    2c30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c34:	18 16       	cp	r1, r24
    2c36:	4c f5       	brge	.+82     	; 0x2c8a <LCD_sendCommand+0x7ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c38:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c40:	20 e0       	ldi	r18, 0x00	; 0
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	40 e2       	ldi	r20, 0x20	; 32
    2c46:	51 e4       	ldi	r21, 0x41	; 65
    2c48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c4c:	dc 01       	movw	r26, r24
    2c4e:	cb 01       	movw	r24, r22
    2c50:	bc 01       	movw	r22, r24
    2c52:	cd 01       	movw	r24, r26
    2c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c58:	dc 01       	movw	r26, r24
    2c5a:	cb 01       	movw	r24, r22
    2c5c:	9e 83       	std	Y+6, r25	; 0x06
    2c5e:	8d 83       	std	Y+5, r24	; 0x05
    2c60:	0f c0       	rjmp	.+30     	; 0x2c80 <LCD_sendCommand+0x7c0>
    2c62:	88 ec       	ldi	r24, 0xC8	; 200
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	9c 83       	std	Y+4, r25	; 0x04
    2c68:	8b 83       	std	Y+3, r24	; 0x03
    2c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c6e:	01 97       	sbiw	r24, 0x01	; 1
    2c70:	f1 f7       	brne	.-4      	; 0x2c6e <LCD_sendCommand+0x7ae>
    2c72:	9c 83       	std	Y+4, r25	; 0x04
    2c74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c76:	8d 81       	ldd	r24, Y+5	; 0x05
    2c78:	9e 81       	ldd	r25, Y+6	; 0x06
    2c7a:	01 97       	sbiw	r24, 0x01	; 1
    2c7c:	9e 83       	std	Y+6, r25	; 0x06
    2c7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c80:	8d 81       	ldd	r24, Y+5	; 0x05
    2c82:	9e 81       	ldd	r25, Y+6	; 0x06
    2c84:	00 97       	sbiw	r24, 0x00	; 0
    2c86:	69 f7       	brne	.-38     	; 0x2c62 <LCD_sendCommand+0x7a2>
    2c88:	14 c0       	rjmp	.+40     	; 0x2cb2 <LCD_sendCommand+0x7f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c8c:	78 85       	ldd	r23, Y+8	; 0x08
    2c8e:	89 85       	ldd	r24, Y+9	; 0x09
    2c90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c96:	dc 01       	movw	r26, r24
    2c98:	cb 01       	movw	r24, r22
    2c9a:	9e 83       	std	Y+6, r25	; 0x06
    2c9c:	8d 83       	std	Y+5, r24	; 0x05
    2c9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca2:	9a 83       	std	Y+2, r25	; 0x02
    2ca4:	89 83       	std	Y+1, r24	; 0x01
    2ca6:	89 81       	ldd	r24, Y+1	; 0x01
    2ca8:	9a 81       	ldd	r25, Y+2	; 0x02
    2caa:	01 97       	sbiw	r24, 0x01	; 1
    2cac:	f1 f7       	brne	.-4      	; 0x2caa <LCD_sendCommand+0x7ea>
    2cae:	9a 83       	std	Y+2, r25	; 0x02
    2cb0:	89 83       	std	Y+1, r24	; 0x01
	/* delay for processing Th = 13ns */
	_delay_ms(1);
}//end LCD_sendCommand
    2cb2:	cd 59       	subi	r28, 0x9D	; 157
    2cb4:	df 4f       	sbci	r29, 0xFF	; 255
    2cb6:	0f b6       	in	r0, 0x3f	; 63
    2cb8:	f8 94       	cli
    2cba:	de bf       	out	0x3e, r29	; 62
    2cbc:	0f be       	out	0x3f, r0	; 63
    2cbe:	cd bf       	out	0x3d, r28	; 61
    2cc0:	cf 91       	pop	r28
    2cc2:	df 91       	pop	r29
    2cc4:	1f 91       	pop	r17
    2cc6:	0f 91       	pop	r16
    2cc8:	08 95       	ret

00002cca <LCD_displayCharacter>:
* Parameters (out): None
* Return Value    : void
* Description     : A function to display a character on the LCD
*************************************************************************************************/
void LCD_displayCharacter(uint8_t u8Data)
{
    2cca:	0f 93       	push	r16
    2ccc:	1f 93       	push	r17
    2cce:	df 93       	push	r29
    2cd0:	cf 93       	push	r28
    2cd2:	cd b7       	in	r28, 0x3d	; 61
    2cd4:	de b7       	in	r29, 0x3e	; 62
    2cd6:	c3 56       	subi	r28, 0x63	; 99
    2cd8:	d0 40       	sbci	r29, 0x00	; 0
    2cda:	0f b6       	in	r0, 0x3f	; 63
    2cdc:	f8 94       	cli
    2cde:	de bf       	out	0x3e, r29	; 62
    2ce0:	0f be       	out	0x3f, r0	; 63
    2ce2:	cd bf       	out	0x3d, r28	; 61
    2ce4:	fe 01       	movw	r30, r28
    2ce6:	ed 59       	subi	r30, 0x9D	; 157
    2ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cea:	80 83       	st	Z, r24
	/* Data Mode RS=1 */
	DIO_Write(RS, HIGH);
    2cec:	80 e0       	ldi	r24, 0x00	; 0
    2cee:	61 e0       	ldi	r22, 0x01	; 1
    2cf0:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
	/* write data to LCD so RW=0 */
	DIO_Write(RW, LOW);
    2cf4:	81 e0       	ldi	r24, 0x01	; 1
    2cf6:	60 e0       	ldi	r22, 0x00	; 0
    2cf8:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
    2cfc:	fe 01       	movw	r30, r28
    2cfe:	e1 5a       	subi	r30, 0xA1	; 161
    2d00:	ff 4f       	sbci	r31, 0xFF	; 255
    2d02:	80 e0       	ldi	r24, 0x00	; 0
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	a0 e8       	ldi	r26, 0x80	; 128
    2d08:	bf e3       	ldi	r27, 0x3F	; 63
    2d0a:	80 83       	st	Z, r24
    2d0c:	91 83       	std	Z+1, r25	; 0x01
    2d0e:	a2 83       	std	Z+2, r26	; 0x02
    2d10:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d12:	8e 01       	movw	r16, r28
    2d14:	05 5a       	subi	r16, 0xA5	; 165
    2d16:	1f 4f       	sbci	r17, 0xFF	; 255
    2d18:	fe 01       	movw	r30, r28
    2d1a:	e1 5a       	subi	r30, 0xA1	; 161
    2d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1e:	60 81       	ld	r22, Z
    2d20:	71 81       	ldd	r23, Z+1	; 0x01
    2d22:	82 81       	ldd	r24, Z+2	; 0x02
    2d24:	93 81       	ldd	r25, Z+3	; 0x03
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	4a ef       	ldi	r20, 0xFA	; 250
    2d2c:	54 e4       	ldi	r21, 0x44	; 68
    2d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d32:	dc 01       	movw	r26, r24
    2d34:	cb 01       	movw	r24, r22
    2d36:	f8 01       	movw	r30, r16
    2d38:	80 83       	st	Z, r24
    2d3a:	91 83       	std	Z+1, r25	; 0x01
    2d3c:	a2 83       	std	Z+2, r26	; 0x02
    2d3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d40:	fe 01       	movw	r30, r28
    2d42:	e5 5a       	subi	r30, 0xA5	; 165
    2d44:	ff 4f       	sbci	r31, 0xFF	; 255
    2d46:	60 81       	ld	r22, Z
    2d48:	71 81       	ldd	r23, Z+1	; 0x01
    2d4a:	82 81       	ldd	r24, Z+2	; 0x02
    2d4c:	93 81       	ldd	r25, Z+3	; 0x03
    2d4e:	20 e0       	ldi	r18, 0x00	; 0
    2d50:	30 e0       	ldi	r19, 0x00	; 0
    2d52:	40 e8       	ldi	r20, 0x80	; 128
    2d54:	5f e3       	ldi	r21, 0x3F	; 63
    2d56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d5a:	88 23       	and	r24, r24
    2d5c:	44 f4       	brge	.+16     	; 0x2d6e <LCD_displayCharacter+0xa4>
		__ticks = 1;
    2d5e:	fe 01       	movw	r30, r28
    2d60:	e7 5a       	subi	r30, 0xA7	; 167
    2d62:	ff 4f       	sbci	r31, 0xFF	; 255
    2d64:	81 e0       	ldi	r24, 0x01	; 1
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	91 83       	std	Z+1, r25	; 0x01
    2d6a:	80 83       	st	Z, r24
    2d6c:	64 c0       	rjmp	.+200    	; 0x2e36 <LCD_displayCharacter+0x16c>
	else if (__tmp > 65535)
    2d6e:	fe 01       	movw	r30, r28
    2d70:	e5 5a       	subi	r30, 0xA5	; 165
    2d72:	ff 4f       	sbci	r31, 0xFF	; 255
    2d74:	60 81       	ld	r22, Z
    2d76:	71 81       	ldd	r23, Z+1	; 0x01
    2d78:	82 81       	ldd	r24, Z+2	; 0x02
    2d7a:	93 81       	ldd	r25, Z+3	; 0x03
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	3f ef       	ldi	r19, 0xFF	; 255
    2d80:	4f e7       	ldi	r20, 0x7F	; 127
    2d82:	57 e4       	ldi	r21, 0x47	; 71
    2d84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d88:	18 16       	cp	r1, r24
    2d8a:	0c f0       	brlt	.+2      	; 0x2d8e <LCD_displayCharacter+0xc4>
    2d8c:	43 c0       	rjmp	.+134    	; 0x2e14 <LCD_displayCharacter+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d8e:	fe 01       	movw	r30, r28
    2d90:	e1 5a       	subi	r30, 0xA1	; 161
    2d92:	ff 4f       	sbci	r31, 0xFF	; 255
    2d94:	60 81       	ld	r22, Z
    2d96:	71 81       	ldd	r23, Z+1	; 0x01
    2d98:	82 81       	ldd	r24, Z+2	; 0x02
    2d9a:	93 81       	ldd	r25, Z+3	; 0x03
    2d9c:	20 e0       	ldi	r18, 0x00	; 0
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	40 e2       	ldi	r20, 0x20	; 32
    2da2:	51 e4       	ldi	r21, 0x41	; 65
    2da4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2da8:	dc 01       	movw	r26, r24
    2daa:	cb 01       	movw	r24, r22
    2dac:	8e 01       	movw	r16, r28
    2dae:	07 5a       	subi	r16, 0xA7	; 167
    2db0:	1f 4f       	sbci	r17, 0xFF	; 255
    2db2:	bc 01       	movw	r22, r24
    2db4:	cd 01       	movw	r24, r26
    2db6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dba:	dc 01       	movw	r26, r24
    2dbc:	cb 01       	movw	r24, r22
    2dbe:	f8 01       	movw	r30, r16
    2dc0:	91 83       	std	Z+1, r25	; 0x01
    2dc2:	80 83       	st	Z, r24
    2dc4:	1f c0       	rjmp	.+62     	; 0x2e04 <LCD_displayCharacter+0x13a>
    2dc6:	fe 01       	movw	r30, r28
    2dc8:	e9 5a       	subi	r30, 0xA9	; 169
    2dca:	ff 4f       	sbci	r31, 0xFF	; 255
    2dcc:	88 ec       	ldi	r24, 0xC8	; 200
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	91 83       	std	Z+1, r25	; 0x01
    2dd2:	80 83       	st	Z, r24
    2dd4:	fe 01       	movw	r30, r28
    2dd6:	e9 5a       	subi	r30, 0xA9	; 169
    2dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dda:	80 81       	ld	r24, Z
    2ddc:	91 81       	ldd	r25, Z+1	; 0x01
    2dde:	01 97       	sbiw	r24, 0x01	; 1
    2de0:	f1 f7       	brne	.-4      	; 0x2dde <LCD_displayCharacter+0x114>
    2de2:	fe 01       	movw	r30, r28
    2de4:	e9 5a       	subi	r30, 0xA9	; 169
    2de6:	ff 4f       	sbci	r31, 0xFF	; 255
    2de8:	91 83       	std	Z+1, r25	; 0x01
    2dea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dec:	de 01       	movw	r26, r28
    2dee:	a7 5a       	subi	r26, 0xA7	; 167
    2df0:	bf 4f       	sbci	r27, 0xFF	; 255
    2df2:	fe 01       	movw	r30, r28
    2df4:	e7 5a       	subi	r30, 0xA7	; 167
    2df6:	ff 4f       	sbci	r31, 0xFF	; 255
    2df8:	80 81       	ld	r24, Z
    2dfa:	91 81       	ldd	r25, Z+1	; 0x01
    2dfc:	01 97       	sbiw	r24, 0x01	; 1
    2dfe:	11 96       	adiw	r26, 0x01	; 1
    2e00:	9c 93       	st	X, r25
    2e02:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e04:	fe 01       	movw	r30, r28
    2e06:	e7 5a       	subi	r30, 0xA7	; 167
    2e08:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0a:	80 81       	ld	r24, Z
    2e0c:	91 81       	ldd	r25, Z+1	; 0x01
    2e0e:	00 97       	sbiw	r24, 0x00	; 0
    2e10:	d1 f6       	brne	.-76     	; 0x2dc6 <LCD_displayCharacter+0xfc>
    2e12:	27 c0       	rjmp	.+78     	; 0x2e62 <LCD_displayCharacter+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e14:	8e 01       	movw	r16, r28
    2e16:	07 5a       	subi	r16, 0xA7	; 167
    2e18:	1f 4f       	sbci	r17, 0xFF	; 255
    2e1a:	fe 01       	movw	r30, r28
    2e1c:	e5 5a       	subi	r30, 0xA5	; 165
    2e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e20:	60 81       	ld	r22, Z
    2e22:	71 81       	ldd	r23, Z+1	; 0x01
    2e24:	82 81       	ldd	r24, Z+2	; 0x02
    2e26:	93 81       	ldd	r25, Z+3	; 0x03
    2e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e2c:	dc 01       	movw	r26, r24
    2e2e:	cb 01       	movw	r24, r22
    2e30:	f8 01       	movw	r30, r16
    2e32:	91 83       	std	Z+1, r25	; 0x01
    2e34:	80 83       	st	Z, r24
    2e36:	de 01       	movw	r26, r28
    2e38:	ab 5a       	subi	r26, 0xAB	; 171
    2e3a:	bf 4f       	sbci	r27, 0xFF	; 255
    2e3c:	fe 01       	movw	r30, r28
    2e3e:	e7 5a       	subi	r30, 0xA7	; 167
    2e40:	ff 4f       	sbci	r31, 0xFF	; 255
    2e42:	80 81       	ld	r24, Z
    2e44:	91 81       	ldd	r25, Z+1	; 0x01
    2e46:	8d 93       	st	X+, r24
    2e48:	9c 93       	st	X, r25
    2e4a:	fe 01       	movw	r30, r28
    2e4c:	eb 5a       	subi	r30, 0xAB	; 171
    2e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e50:	80 81       	ld	r24, Z
    2e52:	91 81       	ldd	r25, Z+1	; 0x01
    2e54:	01 97       	sbiw	r24, 0x01	; 1
    2e56:	f1 f7       	brne	.-4      	; 0x2e54 <LCD_displayCharacter+0x18a>
    2e58:	fe 01       	movw	r30, r28
    2e5a:	eb 5a       	subi	r30, 0xAB	; 171
    2e5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5e:	91 83       	std	Z+1, r25	; 0x01
    2e60:	80 83       	st	Z, r24
	/* delay for processing Tas = 50ns */
	_delay_ms(1);
	/* Enable LCD E=1 */
	DIO_Write(E, HIGH);
    2e62:	82 e0       	ldi	r24, 0x02	; 2
    2e64:	61 e0       	ldi	r22, 0x01	; 1
    2e66:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
    2e6a:	fe 01       	movw	r30, r28
    2e6c:	ef 5a       	subi	r30, 0xAF	; 175
    2e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e70:	80 e0       	ldi	r24, 0x00	; 0
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	a0 e8       	ldi	r26, 0x80	; 128
    2e76:	bf e3       	ldi	r27, 0x3F	; 63
    2e78:	80 83       	st	Z, r24
    2e7a:	91 83       	std	Z+1, r25	; 0x01
    2e7c:	a2 83       	std	Z+2, r26	; 0x02
    2e7e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e80:	8e 01       	movw	r16, r28
    2e82:	03 5b       	subi	r16, 0xB3	; 179
    2e84:	1f 4f       	sbci	r17, 0xFF	; 255
    2e86:	fe 01       	movw	r30, r28
    2e88:	ef 5a       	subi	r30, 0xAF	; 175
    2e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8c:	60 81       	ld	r22, Z
    2e8e:	71 81       	ldd	r23, Z+1	; 0x01
    2e90:	82 81       	ldd	r24, Z+2	; 0x02
    2e92:	93 81       	ldd	r25, Z+3	; 0x03
    2e94:	20 e0       	ldi	r18, 0x00	; 0
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	4a ef       	ldi	r20, 0xFA	; 250
    2e9a:	54 e4       	ldi	r21, 0x44	; 68
    2e9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea0:	dc 01       	movw	r26, r24
    2ea2:	cb 01       	movw	r24, r22
    2ea4:	f8 01       	movw	r30, r16
    2ea6:	80 83       	st	Z, r24
    2ea8:	91 83       	std	Z+1, r25	; 0x01
    2eaa:	a2 83       	std	Z+2, r26	; 0x02
    2eac:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2eae:	fe 01       	movw	r30, r28
    2eb0:	e3 5b       	subi	r30, 0xB3	; 179
    2eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb4:	60 81       	ld	r22, Z
    2eb6:	71 81       	ldd	r23, Z+1	; 0x01
    2eb8:	82 81       	ldd	r24, Z+2	; 0x02
    2eba:	93 81       	ldd	r25, Z+3	; 0x03
    2ebc:	20 e0       	ldi	r18, 0x00	; 0
    2ebe:	30 e0       	ldi	r19, 0x00	; 0
    2ec0:	40 e8       	ldi	r20, 0x80	; 128
    2ec2:	5f e3       	ldi	r21, 0x3F	; 63
    2ec4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ec8:	88 23       	and	r24, r24
    2eca:	44 f4       	brge	.+16     	; 0x2edc <LCD_displayCharacter+0x212>
		__ticks = 1;
    2ecc:	fe 01       	movw	r30, r28
    2ece:	e5 5b       	subi	r30, 0xB5	; 181
    2ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	91 83       	std	Z+1, r25	; 0x01
    2ed8:	80 83       	st	Z, r24
    2eda:	64 c0       	rjmp	.+200    	; 0x2fa4 <LCD_displayCharacter+0x2da>
	else if (__tmp > 65535)
    2edc:	fe 01       	movw	r30, r28
    2ede:	e3 5b       	subi	r30, 0xB3	; 179
    2ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee2:	60 81       	ld	r22, Z
    2ee4:	71 81       	ldd	r23, Z+1	; 0x01
    2ee6:	82 81       	ldd	r24, Z+2	; 0x02
    2ee8:	93 81       	ldd	r25, Z+3	; 0x03
    2eea:	20 e0       	ldi	r18, 0x00	; 0
    2eec:	3f ef       	ldi	r19, 0xFF	; 255
    2eee:	4f e7       	ldi	r20, 0x7F	; 127
    2ef0:	57 e4       	ldi	r21, 0x47	; 71
    2ef2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ef6:	18 16       	cp	r1, r24
    2ef8:	0c f0       	brlt	.+2      	; 0x2efc <LCD_displayCharacter+0x232>
    2efa:	43 c0       	rjmp	.+134    	; 0x2f82 <LCD_displayCharacter+0x2b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2efc:	fe 01       	movw	r30, r28
    2efe:	ef 5a       	subi	r30, 0xAF	; 175
    2f00:	ff 4f       	sbci	r31, 0xFF	; 255
    2f02:	60 81       	ld	r22, Z
    2f04:	71 81       	ldd	r23, Z+1	; 0x01
    2f06:	82 81       	ldd	r24, Z+2	; 0x02
    2f08:	93 81       	ldd	r25, Z+3	; 0x03
    2f0a:	20 e0       	ldi	r18, 0x00	; 0
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	40 e2       	ldi	r20, 0x20	; 32
    2f10:	51 e4       	ldi	r21, 0x41	; 65
    2f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f16:	dc 01       	movw	r26, r24
    2f18:	cb 01       	movw	r24, r22
    2f1a:	8e 01       	movw	r16, r28
    2f1c:	05 5b       	subi	r16, 0xB5	; 181
    2f1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f20:	bc 01       	movw	r22, r24
    2f22:	cd 01       	movw	r24, r26
    2f24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f28:	dc 01       	movw	r26, r24
    2f2a:	cb 01       	movw	r24, r22
    2f2c:	f8 01       	movw	r30, r16
    2f2e:	91 83       	std	Z+1, r25	; 0x01
    2f30:	80 83       	st	Z, r24
    2f32:	1f c0       	rjmp	.+62     	; 0x2f72 <LCD_displayCharacter+0x2a8>
    2f34:	fe 01       	movw	r30, r28
    2f36:	e7 5b       	subi	r30, 0xB7	; 183
    2f38:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3a:	88 ec       	ldi	r24, 0xC8	; 200
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	91 83       	std	Z+1, r25	; 0x01
    2f40:	80 83       	st	Z, r24
    2f42:	fe 01       	movw	r30, r28
    2f44:	e7 5b       	subi	r30, 0xB7	; 183
    2f46:	ff 4f       	sbci	r31, 0xFF	; 255
    2f48:	80 81       	ld	r24, Z
    2f4a:	91 81       	ldd	r25, Z+1	; 0x01
    2f4c:	01 97       	sbiw	r24, 0x01	; 1
    2f4e:	f1 f7       	brne	.-4      	; 0x2f4c <LCD_displayCharacter+0x282>
    2f50:	fe 01       	movw	r30, r28
    2f52:	e7 5b       	subi	r30, 0xB7	; 183
    2f54:	ff 4f       	sbci	r31, 0xFF	; 255
    2f56:	91 83       	std	Z+1, r25	; 0x01
    2f58:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f5a:	de 01       	movw	r26, r28
    2f5c:	a5 5b       	subi	r26, 0xB5	; 181
    2f5e:	bf 4f       	sbci	r27, 0xFF	; 255
    2f60:	fe 01       	movw	r30, r28
    2f62:	e5 5b       	subi	r30, 0xB5	; 181
    2f64:	ff 4f       	sbci	r31, 0xFF	; 255
    2f66:	80 81       	ld	r24, Z
    2f68:	91 81       	ldd	r25, Z+1	; 0x01
    2f6a:	01 97       	sbiw	r24, 0x01	; 1
    2f6c:	11 96       	adiw	r26, 0x01	; 1
    2f6e:	9c 93       	st	X, r25
    2f70:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f72:	fe 01       	movw	r30, r28
    2f74:	e5 5b       	subi	r30, 0xB5	; 181
    2f76:	ff 4f       	sbci	r31, 0xFF	; 255
    2f78:	80 81       	ld	r24, Z
    2f7a:	91 81       	ldd	r25, Z+1	; 0x01
    2f7c:	00 97       	sbiw	r24, 0x00	; 0
    2f7e:	d1 f6       	brne	.-76     	; 0x2f34 <LCD_displayCharacter+0x26a>
    2f80:	27 c0       	rjmp	.+78     	; 0x2fd0 <LCD_displayCharacter+0x306>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f82:	8e 01       	movw	r16, r28
    2f84:	05 5b       	subi	r16, 0xB5	; 181
    2f86:	1f 4f       	sbci	r17, 0xFF	; 255
    2f88:	fe 01       	movw	r30, r28
    2f8a:	e3 5b       	subi	r30, 0xB3	; 179
    2f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8e:	60 81       	ld	r22, Z
    2f90:	71 81       	ldd	r23, Z+1	; 0x01
    2f92:	82 81       	ldd	r24, Z+2	; 0x02
    2f94:	93 81       	ldd	r25, Z+3	; 0x03
    2f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f9a:	dc 01       	movw	r26, r24
    2f9c:	cb 01       	movw	r24, r22
    2f9e:	f8 01       	movw	r30, r16
    2fa0:	91 83       	std	Z+1, r25	; 0x01
    2fa2:	80 83       	st	Z, r24
    2fa4:	de 01       	movw	r26, r28
    2fa6:	a9 5b       	subi	r26, 0xB9	; 185
    2fa8:	bf 4f       	sbci	r27, 0xFF	; 255
    2faa:	fe 01       	movw	r30, r28
    2fac:	e5 5b       	subi	r30, 0xB5	; 181
    2fae:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb0:	80 81       	ld	r24, Z
    2fb2:	91 81       	ldd	r25, Z+1	; 0x01
    2fb4:	8d 93       	st	X+, r24
    2fb6:	9c 93       	st	X, r25
    2fb8:	fe 01       	movw	r30, r28
    2fba:	e9 5b       	subi	r30, 0xB9	; 185
    2fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbe:	80 81       	ld	r24, Z
    2fc0:	91 81       	ldd	r25, Z+1	; 0x01
    2fc2:	01 97       	sbiw	r24, 0x01	; 1
    2fc4:	f1 f7       	brne	.-4      	; 0x2fc2 <LCD_displayCharacter+0x2f8>
    2fc6:	fe 01       	movw	r30, r28
    2fc8:	e9 5b       	subi	r30, 0xB9	; 185
    2fca:	ff 4f       	sbci	r31, 0xFF	; 255
    2fcc:	91 83       	std	Z+1, r25	; 0x01
    2fce:	80 83       	st	Z, r24
	/* delay for processing Tpw - Tdws = 190ns */
	_delay_ms(1);

	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((u8Data & 0xF0) >> 4);
    2fd0:	a8 e3       	ldi	r26, 0x38	; 56
    2fd2:	b0 e0       	ldi	r27, 0x00	; 0
    2fd4:	e8 e3       	ldi	r30, 0x38	; 56
    2fd6:	f0 e0       	ldi	r31, 0x00	; 0
    2fd8:	80 81       	ld	r24, Z
    2fda:	98 2f       	mov	r25, r24
    2fdc:	90 7f       	andi	r25, 0xF0	; 240
    2fde:	fe 01       	movw	r30, r28
    2fe0:	ed 59       	subi	r30, 0x9D	; 157
    2fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe4:	80 81       	ld	r24, Z
    2fe6:	82 95       	swap	r24
    2fe8:	8f 70       	andi	r24, 0x0F	; 15
    2fea:	89 2b       	or	r24, r25
    2fec:	8c 93       	st	X, r24
    2fee:	fe 01       	movw	r30, r28
    2ff0:	ed 5b       	subi	r30, 0xBD	; 189
    2ff2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff4:	80 e0       	ldi	r24, 0x00	; 0
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	a0 e8       	ldi	r26, 0x80	; 128
    2ffa:	bf e3       	ldi	r27, 0x3F	; 63
    2ffc:	80 83       	st	Z, r24
    2ffe:	91 83       	std	Z+1, r25	; 0x01
    3000:	a2 83       	std	Z+2, r26	; 0x02
    3002:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3004:	8e 01       	movw	r16, r28
    3006:	01 5c       	subi	r16, 0xC1	; 193
    3008:	1f 4f       	sbci	r17, 0xFF	; 255
    300a:	fe 01       	movw	r30, r28
    300c:	ed 5b       	subi	r30, 0xBD	; 189
    300e:	ff 4f       	sbci	r31, 0xFF	; 255
    3010:	60 81       	ld	r22, Z
    3012:	71 81       	ldd	r23, Z+1	; 0x01
    3014:	82 81       	ldd	r24, Z+2	; 0x02
    3016:	93 81       	ldd	r25, Z+3	; 0x03
    3018:	20 e0       	ldi	r18, 0x00	; 0
    301a:	30 e0       	ldi	r19, 0x00	; 0
    301c:	4a ef       	ldi	r20, 0xFA	; 250
    301e:	54 e4       	ldi	r21, 0x44	; 68
    3020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3024:	dc 01       	movw	r26, r24
    3026:	cb 01       	movw	r24, r22
    3028:	f8 01       	movw	r30, r16
    302a:	80 83       	st	Z, r24
    302c:	91 83       	std	Z+1, r25	; 0x01
    302e:	a2 83       	std	Z+2, r26	; 0x02
    3030:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3032:	fe 01       	movw	r30, r28
    3034:	ff 96       	adiw	r30, 0x3f	; 63
    3036:	60 81       	ld	r22, Z
    3038:	71 81       	ldd	r23, Z+1	; 0x01
    303a:	82 81       	ldd	r24, Z+2	; 0x02
    303c:	93 81       	ldd	r25, Z+3	; 0x03
    303e:	20 e0       	ldi	r18, 0x00	; 0
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	40 e8       	ldi	r20, 0x80	; 128
    3044:	5f e3       	ldi	r21, 0x3F	; 63
    3046:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    304a:	88 23       	and	r24, r24
    304c:	2c f4       	brge	.+10     	; 0x3058 <LCD_displayCharacter+0x38e>
		__ticks = 1;
    304e:	81 e0       	ldi	r24, 0x01	; 1
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	9e af       	std	Y+62, r25	; 0x3e
    3054:	8d af       	std	Y+61, r24	; 0x3d
    3056:	46 c0       	rjmp	.+140    	; 0x30e4 <LCD_displayCharacter+0x41a>
	else if (__tmp > 65535)
    3058:	fe 01       	movw	r30, r28
    305a:	ff 96       	adiw	r30, 0x3f	; 63
    305c:	60 81       	ld	r22, Z
    305e:	71 81       	ldd	r23, Z+1	; 0x01
    3060:	82 81       	ldd	r24, Z+2	; 0x02
    3062:	93 81       	ldd	r25, Z+3	; 0x03
    3064:	20 e0       	ldi	r18, 0x00	; 0
    3066:	3f ef       	ldi	r19, 0xFF	; 255
    3068:	4f e7       	ldi	r20, 0x7F	; 127
    306a:	57 e4       	ldi	r21, 0x47	; 71
    306c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3070:	18 16       	cp	r1, r24
    3072:	64 f5       	brge	.+88     	; 0x30cc <LCD_displayCharacter+0x402>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3074:	fe 01       	movw	r30, r28
    3076:	ed 5b       	subi	r30, 0xBD	; 189
    3078:	ff 4f       	sbci	r31, 0xFF	; 255
    307a:	60 81       	ld	r22, Z
    307c:	71 81       	ldd	r23, Z+1	; 0x01
    307e:	82 81       	ldd	r24, Z+2	; 0x02
    3080:	93 81       	ldd	r25, Z+3	; 0x03
    3082:	20 e0       	ldi	r18, 0x00	; 0
    3084:	30 e0       	ldi	r19, 0x00	; 0
    3086:	40 e2       	ldi	r20, 0x20	; 32
    3088:	51 e4       	ldi	r21, 0x41	; 65
    308a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    308e:	dc 01       	movw	r26, r24
    3090:	cb 01       	movw	r24, r22
    3092:	bc 01       	movw	r22, r24
    3094:	cd 01       	movw	r24, r26
    3096:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    309a:	dc 01       	movw	r26, r24
    309c:	cb 01       	movw	r24, r22
    309e:	9e af       	std	Y+62, r25	; 0x3e
    30a0:	8d af       	std	Y+61, r24	; 0x3d
    30a2:	0f c0       	rjmp	.+30     	; 0x30c2 <LCD_displayCharacter+0x3f8>
    30a4:	88 ec       	ldi	r24, 0xC8	; 200
    30a6:	90 e0       	ldi	r25, 0x00	; 0
    30a8:	9c af       	std	Y+60, r25	; 0x3c
    30aa:	8b af       	std	Y+59, r24	; 0x3b
    30ac:	8b ad       	ldd	r24, Y+59	; 0x3b
    30ae:	9c ad       	ldd	r25, Y+60	; 0x3c
    30b0:	01 97       	sbiw	r24, 0x01	; 1
    30b2:	f1 f7       	brne	.-4      	; 0x30b0 <LCD_displayCharacter+0x3e6>
    30b4:	9c af       	std	Y+60, r25	; 0x3c
    30b6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    30ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    30bc:	01 97       	sbiw	r24, 0x01	; 1
    30be:	9e af       	std	Y+62, r25	; 0x3e
    30c0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    30c4:	9e ad       	ldd	r25, Y+62	; 0x3e
    30c6:	00 97       	sbiw	r24, 0x00	; 0
    30c8:	69 f7       	brne	.-38     	; 0x30a4 <LCD_displayCharacter+0x3da>
    30ca:	16 c0       	rjmp	.+44     	; 0x30f8 <LCD_displayCharacter+0x42e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30cc:	fe 01       	movw	r30, r28
    30ce:	ff 96       	adiw	r30, 0x3f	; 63
    30d0:	60 81       	ld	r22, Z
    30d2:	71 81       	ldd	r23, Z+1	; 0x01
    30d4:	82 81       	ldd	r24, Z+2	; 0x02
    30d6:	93 81       	ldd	r25, Z+3	; 0x03
    30d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30dc:	dc 01       	movw	r26, r24
    30de:	cb 01       	movw	r24, r22
    30e0:	9e af       	std	Y+62, r25	; 0x3e
    30e2:	8d af       	std	Y+61, r24	; 0x3d
    30e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    30e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    30e8:	9a af       	std	Y+58, r25	; 0x3a
    30ea:	89 af       	std	Y+57, r24	; 0x39
    30ec:	89 ad       	ldd	r24, Y+57	; 0x39
    30ee:	9a ad       	ldd	r25, Y+58	; 0x3a
    30f0:	01 97       	sbiw	r24, 0x01	; 1
    30f2:	f1 f7       	brne	.-4      	; 0x30f0 <LCD_displayCharacter+0x426>
    30f4:	9a af       	std	Y+58, r25	; 0x3a
    30f6:	89 af       	std	Y+57, r24	; 0x39
	/* delay for processing Tdsw = 100ns */
	_delay_ms(1);
	/* disable LCD E=0 */
	DIO_Write(E, LOW);
    30f8:	82 e0       	ldi	r24, 0x02	; 2
    30fa:	60 e0       	ldi	r22, 0x00	; 0
    30fc:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
    3100:	80 e0       	ldi	r24, 0x00	; 0
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	a0 e8       	ldi	r26, 0x80	; 128
    3106:	bf e3       	ldi	r27, 0x3F	; 63
    3108:	8d ab       	std	Y+53, r24	; 0x35
    310a:	9e ab       	std	Y+54, r25	; 0x36
    310c:	af ab       	std	Y+55, r26	; 0x37
    310e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3110:	6d a9       	ldd	r22, Y+53	; 0x35
    3112:	7e a9       	ldd	r23, Y+54	; 0x36
    3114:	8f a9       	ldd	r24, Y+55	; 0x37
    3116:	98 ad       	ldd	r25, Y+56	; 0x38
    3118:	20 e0       	ldi	r18, 0x00	; 0
    311a:	30 e0       	ldi	r19, 0x00	; 0
    311c:	4a ef       	ldi	r20, 0xFA	; 250
    311e:	54 e4       	ldi	r21, 0x44	; 68
    3120:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3124:	dc 01       	movw	r26, r24
    3126:	cb 01       	movw	r24, r22
    3128:	89 ab       	std	Y+49, r24	; 0x31
    312a:	9a ab       	std	Y+50, r25	; 0x32
    312c:	ab ab       	std	Y+51, r26	; 0x33
    312e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3130:	69 a9       	ldd	r22, Y+49	; 0x31
    3132:	7a a9       	ldd	r23, Y+50	; 0x32
    3134:	8b a9       	ldd	r24, Y+51	; 0x33
    3136:	9c a9       	ldd	r25, Y+52	; 0x34
    3138:	20 e0       	ldi	r18, 0x00	; 0
    313a:	30 e0       	ldi	r19, 0x00	; 0
    313c:	40 e8       	ldi	r20, 0x80	; 128
    313e:	5f e3       	ldi	r21, 0x3F	; 63
    3140:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3144:	88 23       	and	r24, r24
    3146:	2c f4       	brge	.+10     	; 0x3152 <LCD_displayCharacter+0x488>
		__ticks = 1;
    3148:	81 e0       	ldi	r24, 0x01	; 1
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	98 ab       	std	Y+48, r25	; 0x30
    314e:	8f a7       	std	Y+47, r24	; 0x2f
    3150:	3f c0       	rjmp	.+126    	; 0x31d0 <LCD_displayCharacter+0x506>
	else if (__tmp > 65535)
    3152:	69 a9       	ldd	r22, Y+49	; 0x31
    3154:	7a a9       	ldd	r23, Y+50	; 0x32
    3156:	8b a9       	ldd	r24, Y+51	; 0x33
    3158:	9c a9       	ldd	r25, Y+52	; 0x34
    315a:	20 e0       	ldi	r18, 0x00	; 0
    315c:	3f ef       	ldi	r19, 0xFF	; 255
    315e:	4f e7       	ldi	r20, 0x7F	; 127
    3160:	57 e4       	ldi	r21, 0x47	; 71
    3162:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3166:	18 16       	cp	r1, r24
    3168:	4c f5       	brge	.+82     	; 0x31bc <LCD_displayCharacter+0x4f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    316a:	6d a9       	ldd	r22, Y+53	; 0x35
    316c:	7e a9       	ldd	r23, Y+54	; 0x36
    316e:	8f a9       	ldd	r24, Y+55	; 0x37
    3170:	98 ad       	ldd	r25, Y+56	; 0x38
    3172:	20 e0       	ldi	r18, 0x00	; 0
    3174:	30 e0       	ldi	r19, 0x00	; 0
    3176:	40 e2       	ldi	r20, 0x20	; 32
    3178:	51 e4       	ldi	r21, 0x41	; 65
    317a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    317e:	dc 01       	movw	r26, r24
    3180:	cb 01       	movw	r24, r22
    3182:	bc 01       	movw	r22, r24
    3184:	cd 01       	movw	r24, r26
    3186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    318a:	dc 01       	movw	r26, r24
    318c:	cb 01       	movw	r24, r22
    318e:	98 ab       	std	Y+48, r25	; 0x30
    3190:	8f a7       	std	Y+47, r24	; 0x2f
    3192:	0f c0       	rjmp	.+30     	; 0x31b2 <LCD_displayCharacter+0x4e8>
    3194:	88 ec       	ldi	r24, 0xC8	; 200
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	9e a7       	std	Y+46, r25	; 0x2e
    319a:	8d a7       	std	Y+45, r24	; 0x2d
    319c:	8d a5       	ldd	r24, Y+45	; 0x2d
    319e:	9e a5       	ldd	r25, Y+46	; 0x2e
    31a0:	01 97       	sbiw	r24, 0x01	; 1
    31a2:	f1 f7       	brne	.-4      	; 0x31a0 <LCD_displayCharacter+0x4d6>
    31a4:	9e a7       	std	Y+46, r25	; 0x2e
    31a6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    31aa:	98 a9       	ldd	r25, Y+48	; 0x30
    31ac:	01 97       	sbiw	r24, 0x01	; 1
    31ae:	98 ab       	std	Y+48, r25	; 0x30
    31b0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    31b4:	98 a9       	ldd	r25, Y+48	; 0x30
    31b6:	00 97       	sbiw	r24, 0x00	; 0
    31b8:	69 f7       	brne	.-38     	; 0x3194 <LCD_displayCharacter+0x4ca>
    31ba:	14 c0       	rjmp	.+40     	; 0x31e4 <LCD_displayCharacter+0x51a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31bc:	69 a9       	ldd	r22, Y+49	; 0x31
    31be:	7a a9       	ldd	r23, Y+50	; 0x32
    31c0:	8b a9       	ldd	r24, Y+51	; 0x33
    31c2:	9c a9       	ldd	r25, Y+52	; 0x34
    31c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c8:	dc 01       	movw	r26, r24
    31ca:	cb 01       	movw	r24, r22
    31cc:	98 ab       	std	Y+48, r25	; 0x30
    31ce:	8f a7       	std	Y+47, r24	; 0x2f
    31d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    31d2:	98 a9       	ldd	r25, Y+48	; 0x30
    31d4:	9c a7       	std	Y+44, r25	; 0x2c
    31d6:	8b a7       	std	Y+43, r24	; 0x2b
    31d8:	8b a5       	ldd	r24, Y+43	; 0x2b
    31da:	9c a5       	ldd	r25, Y+44	; 0x2c
    31dc:	01 97       	sbiw	r24, 0x01	; 1
    31de:	f1 f7       	brne	.-4      	; 0x31dc <LCD_displayCharacter+0x512>
    31e0:	9c a7       	std	Y+44, r25	; 0x2c
    31e2:	8b a7       	std	Y+43, r24	; 0x2b
	/* delay for processing Th = 13ns */
	_delay_ms(1);
	/* Enable LCD E=1 */
	DIO_Write(E, HIGH);
    31e4:	82 e0       	ldi	r24, 0x02	; 2
    31e6:	61 e0       	ldi	r22, 0x01	; 1
    31e8:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
    31ec:	80 e0       	ldi	r24, 0x00	; 0
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	a0 e8       	ldi	r26, 0x80	; 128
    31f2:	bf e3       	ldi	r27, 0x3F	; 63
    31f4:	8f a3       	std	Y+39, r24	; 0x27
    31f6:	98 a7       	std	Y+40, r25	; 0x28
    31f8:	a9 a7       	std	Y+41, r26	; 0x29
    31fa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31fc:	6f a1       	ldd	r22, Y+39	; 0x27
    31fe:	78 a5       	ldd	r23, Y+40	; 0x28
    3200:	89 a5       	ldd	r24, Y+41	; 0x29
    3202:	9a a5       	ldd	r25, Y+42	; 0x2a
    3204:	20 e0       	ldi	r18, 0x00	; 0
    3206:	30 e0       	ldi	r19, 0x00	; 0
    3208:	4a ef       	ldi	r20, 0xFA	; 250
    320a:	54 e4       	ldi	r21, 0x44	; 68
    320c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3210:	dc 01       	movw	r26, r24
    3212:	cb 01       	movw	r24, r22
    3214:	8b a3       	std	Y+35, r24	; 0x23
    3216:	9c a3       	std	Y+36, r25	; 0x24
    3218:	ad a3       	std	Y+37, r26	; 0x25
    321a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    321c:	6b a1       	ldd	r22, Y+35	; 0x23
    321e:	7c a1       	ldd	r23, Y+36	; 0x24
    3220:	8d a1       	ldd	r24, Y+37	; 0x25
    3222:	9e a1       	ldd	r25, Y+38	; 0x26
    3224:	20 e0       	ldi	r18, 0x00	; 0
    3226:	30 e0       	ldi	r19, 0x00	; 0
    3228:	40 e8       	ldi	r20, 0x80	; 128
    322a:	5f e3       	ldi	r21, 0x3F	; 63
    322c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3230:	88 23       	and	r24, r24
    3232:	2c f4       	brge	.+10     	; 0x323e <LCD_displayCharacter+0x574>
		__ticks = 1;
    3234:	81 e0       	ldi	r24, 0x01	; 1
    3236:	90 e0       	ldi	r25, 0x00	; 0
    3238:	9a a3       	std	Y+34, r25	; 0x22
    323a:	89 a3       	std	Y+33, r24	; 0x21
    323c:	3f c0       	rjmp	.+126    	; 0x32bc <LCD_displayCharacter+0x5f2>
	else if (__tmp > 65535)
    323e:	6b a1       	ldd	r22, Y+35	; 0x23
    3240:	7c a1       	ldd	r23, Y+36	; 0x24
    3242:	8d a1       	ldd	r24, Y+37	; 0x25
    3244:	9e a1       	ldd	r25, Y+38	; 0x26
    3246:	20 e0       	ldi	r18, 0x00	; 0
    3248:	3f ef       	ldi	r19, 0xFF	; 255
    324a:	4f e7       	ldi	r20, 0x7F	; 127
    324c:	57 e4       	ldi	r21, 0x47	; 71
    324e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3252:	18 16       	cp	r1, r24
    3254:	4c f5       	brge	.+82     	; 0x32a8 <LCD_displayCharacter+0x5de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3256:	6f a1       	ldd	r22, Y+39	; 0x27
    3258:	78 a5       	ldd	r23, Y+40	; 0x28
    325a:	89 a5       	ldd	r24, Y+41	; 0x29
    325c:	9a a5       	ldd	r25, Y+42	; 0x2a
    325e:	20 e0       	ldi	r18, 0x00	; 0
    3260:	30 e0       	ldi	r19, 0x00	; 0
    3262:	40 e2       	ldi	r20, 0x20	; 32
    3264:	51 e4       	ldi	r21, 0x41	; 65
    3266:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    326a:	dc 01       	movw	r26, r24
    326c:	cb 01       	movw	r24, r22
    326e:	bc 01       	movw	r22, r24
    3270:	cd 01       	movw	r24, r26
    3272:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3276:	dc 01       	movw	r26, r24
    3278:	cb 01       	movw	r24, r22
    327a:	9a a3       	std	Y+34, r25	; 0x22
    327c:	89 a3       	std	Y+33, r24	; 0x21
    327e:	0f c0       	rjmp	.+30     	; 0x329e <LCD_displayCharacter+0x5d4>
    3280:	88 ec       	ldi	r24, 0xC8	; 200
    3282:	90 e0       	ldi	r25, 0x00	; 0
    3284:	98 a3       	std	Y+32, r25	; 0x20
    3286:	8f 8f       	std	Y+31, r24	; 0x1f
    3288:	8f 8d       	ldd	r24, Y+31	; 0x1f
    328a:	98 a1       	ldd	r25, Y+32	; 0x20
    328c:	01 97       	sbiw	r24, 0x01	; 1
    328e:	f1 f7       	brne	.-4      	; 0x328c <LCD_displayCharacter+0x5c2>
    3290:	98 a3       	std	Y+32, r25	; 0x20
    3292:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3294:	89 a1       	ldd	r24, Y+33	; 0x21
    3296:	9a a1       	ldd	r25, Y+34	; 0x22
    3298:	01 97       	sbiw	r24, 0x01	; 1
    329a:	9a a3       	std	Y+34, r25	; 0x22
    329c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    329e:	89 a1       	ldd	r24, Y+33	; 0x21
    32a0:	9a a1       	ldd	r25, Y+34	; 0x22
    32a2:	00 97       	sbiw	r24, 0x00	; 0
    32a4:	69 f7       	brne	.-38     	; 0x3280 <LCD_displayCharacter+0x5b6>
    32a6:	14 c0       	rjmp	.+40     	; 0x32d0 <LCD_displayCharacter+0x606>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32a8:	6b a1       	ldd	r22, Y+35	; 0x23
    32aa:	7c a1       	ldd	r23, Y+36	; 0x24
    32ac:	8d a1       	ldd	r24, Y+37	; 0x25
    32ae:	9e a1       	ldd	r25, Y+38	; 0x26
    32b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32b4:	dc 01       	movw	r26, r24
    32b6:	cb 01       	movw	r24, r22
    32b8:	9a a3       	std	Y+34, r25	; 0x22
    32ba:	89 a3       	std	Y+33, r24	; 0x21
    32bc:	89 a1       	ldd	r24, Y+33	; 0x21
    32be:	9a a1       	ldd	r25, Y+34	; 0x22
    32c0:	9e 8f       	std	Y+30, r25	; 0x1e
    32c2:	8d 8f       	std	Y+29, r24	; 0x1d
    32c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32c6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32c8:	01 97       	sbiw	r24, 0x01	; 1
    32ca:	f1 f7       	brne	.-4      	; 0x32c8 <LCD_displayCharacter+0x5fe>
    32cc:	9e 8f       	std	Y+30, r25	; 0x1e
    32ce:	8d 8f       	std	Y+29, r24	; 0x1d
	/* delay for processing Tpw - Tdws = 190ns */
	_delay_ms(1);

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (u8Data & 0x0F);
    32d0:	a8 e3       	ldi	r26, 0x38	; 56
    32d2:	b0 e0       	ldi	r27, 0x00	; 0
    32d4:	e8 e3       	ldi	r30, 0x38	; 56
    32d6:	f0 e0       	ldi	r31, 0x00	; 0
    32d8:	80 81       	ld	r24, Z
    32da:	98 2f       	mov	r25, r24
    32dc:	90 7f       	andi	r25, 0xF0	; 240
    32de:	fe 01       	movw	r30, r28
    32e0:	ed 59       	subi	r30, 0x9D	; 157
    32e2:	ff 4f       	sbci	r31, 0xFF	; 255
    32e4:	80 81       	ld	r24, Z
    32e6:	8f 70       	andi	r24, 0x0F	; 15
    32e8:	89 2b       	or	r24, r25
    32ea:	8c 93       	st	X, r24
    32ec:	80 e0       	ldi	r24, 0x00	; 0
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	a0 e8       	ldi	r26, 0x80	; 128
    32f2:	bf e3       	ldi	r27, 0x3F	; 63
    32f4:	89 8f       	std	Y+25, r24	; 0x19
    32f6:	9a 8f       	std	Y+26, r25	; 0x1a
    32f8:	ab 8f       	std	Y+27, r26	; 0x1b
    32fa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32fc:	69 8d       	ldd	r22, Y+25	; 0x19
    32fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3300:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3302:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3304:	20 e0       	ldi	r18, 0x00	; 0
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	4a ef       	ldi	r20, 0xFA	; 250
    330a:	54 e4       	ldi	r21, 0x44	; 68
    330c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3310:	dc 01       	movw	r26, r24
    3312:	cb 01       	movw	r24, r22
    3314:	8d 8b       	std	Y+21, r24	; 0x15
    3316:	9e 8b       	std	Y+22, r25	; 0x16
    3318:	af 8b       	std	Y+23, r26	; 0x17
    331a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    331c:	6d 89       	ldd	r22, Y+21	; 0x15
    331e:	7e 89       	ldd	r23, Y+22	; 0x16
    3320:	8f 89       	ldd	r24, Y+23	; 0x17
    3322:	98 8d       	ldd	r25, Y+24	; 0x18
    3324:	20 e0       	ldi	r18, 0x00	; 0
    3326:	30 e0       	ldi	r19, 0x00	; 0
    3328:	40 e8       	ldi	r20, 0x80	; 128
    332a:	5f e3       	ldi	r21, 0x3F	; 63
    332c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3330:	88 23       	and	r24, r24
    3332:	2c f4       	brge	.+10     	; 0x333e <LCD_displayCharacter+0x674>
		__ticks = 1;
    3334:	81 e0       	ldi	r24, 0x01	; 1
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	9c 8b       	std	Y+20, r25	; 0x14
    333a:	8b 8b       	std	Y+19, r24	; 0x13
    333c:	3f c0       	rjmp	.+126    	; 0x33bc <LCD_displayCharacter+0x6f2>
	else if (__tmp > 65535)
    333e:	6d 89       	ldd	r22, Y+21	; 0x15
    3340:	7e 89       	ldd	r23, Y+22	; 0x16
    3342:	8f 89       	ldd	r24, Y+23	; 0x17
    3344:	98 8d       	ldd	r25, Y+24	; 0x18
    3346:	20 e0       	ldi	r18, 0x00	; 0
    3348:	3f ef       	ldi	r19, 0xFF	; 255
    334a:	4f e7       	ldi	r20, 0x7F	; 127
    334c:	57 e4       	ldi	r21, 0x47	; 71
    334e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3352:	18 16       	cp	r1, r24
    3354:	4c f5       	brge	.+82     	; 0x33a8 <LCD_displayCharacter+0x6de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3356:	69 8d       	ldd	r22, Y+25	; 0x19
    3358:	7a 8d       	ldd	r23, Y+26	; 0x1a
    335a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    335c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    335e:	20 e0       	ldi	r18, 0x00	; 0
    3360:	30 e0       	ldi	r19, 0x00	; 0
    3362:	40 e2       	ldi	r20, 0x20	; 32
    3364:	51 e4       	ldi	r21, 0x41	; 65
    3366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    336a:	dc 01       	movw	r26, r24
    336c:	cb 01       	movw	r24, r22
    336e:	bc 01       	movw	r22, r24
    3370:	cd 01       	movw	r24, r26
    3372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3376:	dc 01       	movw	r26, r24
    3378:	cb 01       	movw	r24, r22
    337a:	9c 8b       	std	Y+20, r25	; 0x14
    337c:	8b 8b       	std	Y+19, r24	; 0x13
    337e:	0f c0       	rjmp	.+30     	; 0x339e <LCD_displayCharacter+0x6d4>
    3380:	88 ec       	ldi	r24, 0xC8	; 200
    3382:	90 e0       	ldi	r25, 0x00	; 0
    3384:	9a 8b       	std	Y+18, r25	; 0x12
    3386:	89 8b       	std	Y+17, r24	; 0x11
    3388:	89 89       	ldd	r24, Y+17	; 0x11
    338a:	9a 89       	ldd	r25, Y+18	; 0x12
    338c:	01 97       	sbiw	r24, 0x01	; 1
    338e:	f1 f7       	brne	.-4      	; 0x338c <LCD_displayCharacter+0x6c2>
    3390:	9a 8b       	std	Y+18, r25	; 0x12
    3392:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3394:	8b 89       	ldd	r24, Y+19	; 0x13
    3396:	9c 89       	ldd	r25, Y+20	; 0x14
    3398:	01 97       	sbiw	r24, 0x01	; 1
    339a:	9c 8b       	std	Y+20, r25	; 0x14
    339c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    339e:	8b 89       	ldd	r24, Y+19	; 0x13
    33a0:	9c 89       	ldd	r25, Y+20	; 0x14
    33a2:	00 97       	sbiw	r24, 0x00	; 0
    33a4:	69 f7       	brne	.-38     	; 0x3380 <LCD_displayCharacter+0x6b6>
    33a6:	14 c0       	rjmp	.+40     	; 0x33d0 <LCD_displayCharacter+0x706>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33a8:	6d 89       	ldd	r22, Y+21	; 0x15
    33aa:	7e 89       	ldd	r23, Y+22	; 0x16
    33ac:	8f 89       	ldd	r24, Y+23	; 0x17
    33ae:	98 8d       	ldd	r25, Y+24	; 0x18
    33b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b4:	dc 01       	movw	r26, r24
    33b6:	cb 01       	movw	r24, r22
    33b8:	9c 8b       	std	Y+20, r25	; 0x14
    33ba:	8b 8b       	std	Y+19, r24	; 0x13
    33bc:	8b 89       	ldd	r24, Y+19	; 0x13
    33be:	9c 89       	ldd	r25, Y+20	; 0x14
    33c0:	98 8b       	std	Y+16, r25	; 0x10
    33c2:	8f 87       	std	Y+15, r24	; 0x0f
    33c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    33c6:	98 89       	ldd	r25, Y+16	; 0x10
    33c8:	01 97       	sbiw	r24, 0x01	; 1
    33ca:	f1 f7       	brne	.-4      	; 0x33c8 <LCD_displayCharacter+0x6fe>
    33cc:	98 8b       	std	Y+16, r25	; 0x10
    33ce:	8f 87       	std	Y+15, r24	; 0x0f
	/* delay for processing Tdsw = 100ns */
	_delay_ms(1);
	/* disable LCD E=0 */
	DIO_Write(E, LOW);
    33d0:	82 e0       	ldi	r24, 0x02	; 2
    33d2:	60 e0       	ldi	r22, 0x00	; 0
    33d4:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
    33d8:	80 e0       	ldi	r24, 0x00	; 0
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	a0 e8       	ldi	r26, 0x80	; 128
    33de:	bf e3       	ldi	r27, 0x3F	; 63
    33e0:	8b 87       	std	Y+11, r24	; 0x0b
    33e2:	9c 87       	std	Y+12, r25	; 0x0c
    33e4:	ad 87       	std	Y+13, r26	; 0x0d
    33e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    33ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    33ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    33ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    33f0:	20 e0       	ldi	r18, 0x00	; 0
    33f2:	30 e0       	ldi	r19, 0x00	; 0
    33f4:	4a ef       	ldi	r20, 0xFA	; 250
    33f6:	54 e4       	ldi	r21, 0x44	; 68
    33f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33fc:	dc 01       	movw	r26, r24
    33fe:	cb 01       	movw	r24, r22
    3400:	8f 83       	std	Y+7, r24	; 0x07
    3402:	98 87       	std	Y+8, r25	; 0x08
    3404:	a9 87       	std	Y+9, r26	; 0x09
    3406:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3408:	6f 81       	ldd	r22, Y+7	; 0x07
    340a:	78 85       	ldd	r23, Y+8	; 0x08
    340c:	89 85       	ldd	r24, Y+9	; 0x09
    340e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3410:	20 e0       	ldi	r18, 0x00	; 0
    3412:	30 e0       	ldi	r19, 0x00	; 0
    3414:	40 e8       	ldi	r20, 0x80	; 128
    3416:	5f e3       	ldi	r21, 0x3F	; 63
    3418:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    341c:	88 23       	and	r24, r24
    341e:	2c f4       	brge	.+10     	; 0x342a <LCD_displayCharacter+0x760>
		__ticks = 1;
    3420:	81 e0       	ldi	r24, 0x01	; 1
    3422:	90 e0       	ldi	r25, 0x00	; 0
    3424:	9e 83       	std	Y+6, r25	; 0x06
    3426:	8d 83       	std	Y+5, r24	; 0x05
    3428:	3f c0       	rjmp	.+126    	; 0x34a8 <LCD_displayCharacter+0x7de>
	else if (__tmp > 65535)
    342a:	6f 81       	ldd	r22, Y+7	; 0x07
    342c:	78 85       	ldd	r23, Y+8	; 0x08
    342e:	89 85       	ldd	r24, Y+9	; 0x09
    3430:	9a 85       	ldd	r25, Y+10	; 0x0a
    3432:	20 e0       	ldi	r18, 0x00	; 0
    3434:	3f ef       	ldi	r19, 0xFF	; 255
    3436:	4f e7       	ldi	r20, 0x7F	; 127
    3438:	57 e4       	ldi	r21, 0x47	; 71
    343a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    343e:	18 16       	cp	r1, r24
    3440:	4c f5       	brge	.+82     	; 0x3494 <LCD_displayCharacter+0x7ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3442:	6b 85       	ldd	r22, Y+11	; 0x0b
    3444:	7c 85       	ldd	r23, Y+12	; 0x0c
    3446:	8d 85       	ldd	r24, Y+13	; 0x0d
    3448:	9e 85       	ldd	r25, Y+14	; 0x0e
    344a:	20 e0       	ldi	r18, 0x00	; 0
    344c:	30 e0       	ldi	r19, 0x00	; 0
    344e:	40 e2       	ldi	r20, 0x20	; 32
    3450:	51 e4       	ldi	r21, 0x41	; 65
    3452:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3456:	dc 01       	movw	r26, r24
    3458:	cb 01       	movw	r24, r22
    345a:	bc 01       	movw	r22, r24
    345c:	cd 01       	movw	r24, r26
    345e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3462:	dc 01       	movw	r26, r24
    3464:	cb 01       	movw	r24, r22
    3466:	9e 83       	std	Y+6, r25	; 0x06
    3468:	8d 83       	std	Y+5, r24	; 0x05
    346a:	0f c0       	rjmp	.+30     	; 0x348a <LCD_displayCharacter+0x7c0>
    346c:	88 ec       	ldi	r24, 0xC8	; 200
    346e:	90 e0       	ldi	r25, 0x00	; 0
    3470:	9c 83       	std	Y+4, r25	; 0x04
    3472:	8b 83       	std	Y+3, r24	; 0x03
    3474:	8b 81       	ldd	r24, Y+3	; 0x03
    3476:	9c 81       	ldd	r25, Y+4	; 0x04
    3478:	01 97       	sbiw	r24, 0x01	; 1
    347a:	f1 f7       	brne	.-4      	; 0x3478 <LCD_displayCharacter+0x7ae>
    347c:	9c 83       	std	Y+4, r25	; 0x04
    347e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3480:	8d 81       	ldd	r24, Y+5	; 0x05
    3482:	9e 81       	ldd	r25, Y+6	; 0x06
    3484:	01 97       	sbiw	r24, 0x01	; 1
    3486:	9e 83       	std	Y+6, r25	; 0x06
    3488:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    348a:	8d 81       	ldd	r24, Y+5	; 0x05
    348c:	9e 81       	ldd	r25, Y+6	; 0x06
    348e:	00 97       	sbiw	r24, 0x00	; 0
    3490:	69 f7       	brne	.-38     	; 0x346c <LCD_displayCharacter+0x7a2>
    3492:	14 c0       	rjmp	.+40     	; 0x34bc <LCD_displayCharacter+0x7f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3494:	6f 81       	ldd	r22, Y+7	; 0x07
    3496:	78 85       	ldd	r23, Y+8	; 0x08
    3498:	89 85       	ldd	r24, Y+9	; 0x09
    349a:	9a 85       	ldd	r25, Y+10	; 0x0a
    349c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34a0:	dc 01       	movw	r26, r24
    34a2:	cb 01       	movw	r24, r22
    34a4:	9e 83       	std	Y+6, r25	; 0x06
    34a6:	8d 83       	std	Y+5, r24	; 0x05
    34a8:	8d 81       	ldd	r24, Y+5	; 0x05
    34aa:	9e 81       	ldd	r25, Y+6	; 0x06
    34ac:	9a 83       	std	Y+2, r25	; 0x02
    34ae:	89 83       	std	Y+1, r24	; 0x01
    34b0:	89 81       	ldd	r24, Y+1	; 0x01
    34b2:	9a 81       	ldd	r25, Y+2	; 0x02
    34b4:	01 97       	sbiw	r24, 0x01	; 1
    34b6:	f1 f7       	brne	.-4      	; 0x34b4 <LCD_displayCharacter+0x7ea>
    34b8:	9a 83       	std	Y+2, r25	; 0x02
    34ba:	89 83       	std	Y+1, r24	; 0x01
	/* delay for processing Th = 13ns */
	_delay_ms(1);
}//end LCD_displayCharacter
    34bc:	cd 59       	subi	r28, 0x9D	; 157
    34be:	df 4f       	sbci	r29, 0xFF	; 255
    34c0:	0f b6       	in	r0, 0x3f	; 63
    34c2:	f8 94       	cli
    34c4:	de bf       	out	0x3e, r29	; 62
    34c6:	0f be       	out	0x3f, r0	; 63
    34c8:	cd bf       	out	0x3d, r28	; 61
    34ca:	cf 91       	pop	r28
    34cc:	df 91       	pop	r29
    34ce:	1f 91       	pop	r17
    34d0:	0f 91       	pop	r16
    34d2:	08 95       	ret

000034d4 <LCD_displayString>:
* Parameters (out): None
* Return Value    : void
* Description     : A function to display a string on the LCD
*************************************************************************************************/
void LCD_displayString(const uint8_t *pu8Str)
{
    34d4:	df 93       	push	r29
    34d6:	cf 93       	push	r28
    34d8:	00 d0       	rcall	.+0      	; 0x34da <LCD_displayString+0x6>
    34da:	0f 92       	push	r0
    34dc:	cd b7       	in	r28, 0x3d	; 61
    34de:	de b7       	in	r29, 0x3e	; 62
    34e0:	9b 83       	std	Y+3, r25	; 0x03
    34e2:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8I = 0;
    34e4:	19 82       	std	Y+1, r1	; 0x01
    34e6:	0e c0       	rjmp	.+28     	; 0x3504 <LCD_displayString+0x30>
	while(pu8Str[u8I] != '\0')
	{
		LCD_displayCharacter(pu8Str[u8I]);
    34e8:	89 81       	ldd	r24, Y+1	; 0x01
    34ea:	28 2f       	mov	r18, r24
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	8a 81       	ldd	r24, Y+2	; 0x02
    34f0:	9b 81       	ldd	r25, Y+3	; 0x03
    34f2:	fc 01       	movw	r30, r24
    34f4:	e2 0f       	add	r30, r18
    34f6:	f3 1f       	adc	r31, r19
    34f8:	80 81       	ld	r24, Z
    34fa:	0e 94 65 16 	call	0x2cca	; 0x2cca <LCD_displayCharacter>
		u8I++;
    34fe:	89 81       	ldd	r24, Y+1	; 0x01
    3500:	8f 5f       	subi	r24, 0xFF	; 255
    3502:	89 83       	std	Y+1, r24	; 0x01
* Description     : A function to display a string on the LCD
*************************************************************************************************/
void LCD_displayString(const uint8_t *pu8Str)
{
	uint8_t u8I = 0;
	while(pu8Str[u8I] != '\0')
    3504:	89 81       	ldd	r24, Y+1	; 0x01
    3506:	28 2f       	mov	r18, r24
    3508:	30 e0       	ldi	r19, 0x00	; 0
    350a:	8a 81       	ldd	r24, Y+2	; 0x02
    350c:	9b 81       	ldd	r25, Y+3	; 0x03
    350e:	fc 01       	movw	r30, r24
    3510:	e2 0f       	add	r30, r18
    3512:	f3 1f       	adc	r31, r19
    3514:	80 81       	ld	r24, Z
    3516:	88 23       	and	r24, r24
    3518:	39 f7       	brne	.-50     	; 0x34e8 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*pu8Str);
		pu8Str++;
	}		
	*********************************************************/
}//end LCD_displayString
    351a:	0f 90       	pop	r0
    351c:	0f 90       	pop	r0
    351e:	0f 90       	pop	r0
    3520:	cf 91       	pop	r28
    3522:	df 91       	pop	r29
    3524:	08 95       	ret

00003526 <LCD_goToRowColumn>:
* Parameters (out): None
* Return Value    : void
* Description     : A function to set the cursor in a particular row and column
*************************************************************************************************/
void LCD_goToRowColumn(uint8_t u8Row, uint8_t u8Col)
{
    3526:	df 93       	push	r29
    3528:	cf 93       	push	r28
    352a:	00 d0       	rcall	.+0      	; 0x352c <LCD_goToRowColumn+0x6>
    352c:	00 d0       	rcall	.+0      	; 0x352e <LCD_goToRowColumn+0x8>
    352e:	0f 92       	push	r0
    3530:	cd b7       	in	r28, 0x3d	; 61
    3532:	de b7       	in	r29, 0x3e	; 62
    3534:	8a 83       	std	Y+2, r24	; 0x02
    3536:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t u8Address;
	
	/* first of all calculate the required address */
	switch(u8Row)
    3538:	8a 81       	ldd	r24, Y+2	; 0x02
    353a:	28 2f       	mov	r18, r24
    353c:	30 e0       	ldi	r19, 0x00	; 0
    353e:	3d 83       	std	Y+5, r19	; 0x05
    3540:	2c 83       	std	Y+4, r18	; 0x04
    3542:	8c 81       	ldd	r24, Y+4	; 0x04
    3544:	9d 81       	ldd	r25, Y+5	; 0x05
    3546:	81 30       	cpi	r24, 0x01	; 1
    3548:	91 05       	cpc	r25, r1
    354a:	c1 f0       	breq	.+48     	; 0x357c <LCD_goToRowColumn+0x56>
    354c:	2c 81       	ldd	r18, Y+4	; 0x04
    354e:	3d 81       	ldd	r19, Y+5	; 0x05
    3550:	22 30       	cpi	r18, 0x02	; 2
    3552:	31 05       	cpc	r19, r1
    3554:	2c f4       	brge	.+10     	; 0x3560 <LCD_goToRowColumn+0x3a>
    3556:	8c 81       	ldd	r24, Y+4	; 0x04
    3558:	9d 81       	ldd	r25, Y+5	; 0x05
    355a:	00 97       	sbiw	r24, 0x00	; 0
    355c:	61 f0       	breq	.+24     	; 0x3576 <LCD_goToRowColumn+0x50>
    355e:	19 c0       	rjmp	.+50     	; 0x3592 <LCD_goToRowColumn+0x6c>
    3560:	2c 81       	ldd	r18, Y+4	; 0x04
    3562:	3d 81       	ldd	r19, Y+5	; 0x05
    3564:	22 30       	cpi	r18, 0x02	; 2
    3566:	31 05       	cpc	r19, r1
    3568:	69 f0       	breq	.+26     	; 0x3584 <LCD_goToRowColumn+0x5e>
    356a:	8c 81       	ldd	r24, Y+4	; 0x04
    356c:	9d 81       	ldd	r25, Y+5	; 0x05
    356e:	83 30       	cpi	r24, 0x03	; 3
    3570:	91 05       	cpc	r25, r1
    3572:	61 f0       	breq	.+24     	; 0x358c <LCD_goToRowColumn+0x66>
    3574:	0e c0       	rjmp	.+28     	; 0x3592 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				u8Address=u8Col;
    3576:	8b 81       	ldd	r24, Y+3	; 0x03
    3578:	89 83       	std	Y+1, r24	; 0x01
    357a:	0b c0       	rjmp	.+22     	; 0x3592 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				u8Address=u8Col+0x40;
    357c:	8b 81       	ldd	r24, Y+3	; 0x03
    357e:	80 5c       	subi	r24, 0xC0	; 192
    3580:	89 83       	std	Y+1, r24	; 0x01
    3582:	07 c0       	rjmp	.+14     	; 0x3592 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
			    u8Address=u8Col+0x10;
    3584:	8b 81       	ldd	r24, Y+3	; 0x03
    3586:	80 5f       	subi	r24, 0xF0	; 240
    3588:	89 83       	std	Y+1, r24	; 0x01
    358a:	03 c0       	rjmp	.+6      	; 0x3592 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				u8Address=u8Col+0x50;
    358c:	8b 81       	ldd	r24, Y+3	; 0x03
    358e:	80 5b       	subi	r24, 0xB0	; 176
    3590:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(u8Address | SET_CURSOR_LOCATION);
    3592:	89 81       	ldd	r24, Y+1	; 0x01
    3594:	80 68       	ori	r24, 0x80	; 128
    3596:	0e 94 60 12 	call	0x24c0	; 0x24c0 <LCD_sendCommand>
}//end LCD_goToRowColumn
    359a:	0f 90       	pop	r0
    359c:	0f 90       	pop	r0
    359e:	0f 90       	pop	r0
    35a0:	0f 90       	pop	r0
    35a2:	0f 90       	pop	r0
    35a4:	cf 91       	pop	r28
    35a6:	df 91       	pop	r29
    35a8:	08 95       	ret

000035aa <LCD_displayStringRowColumn>:
* Parameters (out): None
* Return Value    : void
* Description     : A function to display a string with particular row and column
*************************************************************************************************/
void LCD_displayStringRowColumn(uint8_t u8Row, uint8_t u8Col, const uint8_t *pu8Str)
{
    35aa:	df 93       	push	r29
    35ac:	cf 93       	push	r28
    35ae:	00 d0       	rcall	.+0      	; 0x35b0 <LCD_displayStringRowColumn+0x6>
    35b0:	00 d0       	rcall	.+0      	; 0x35b2 <LCD_displayStringRowColumn+0x8>
    35b2:	cd b7       	in	r28, 0x3d	; 61
    35b4:	de b7       	in	r29, 0x3e	; 62
    35b6:	89 83       	std	Y+1, r24	; 0x01
    35b8:	6a 83       	std	Y+2, r22	; 0x02
    35ba:	5c 83       	std	Y+4, r21	; 0x04
    35bc:	4b 83       	std	Y+3, r20	; 0x03
	/* go to to the required LCD position */
	LCD_goToRowColumn(u8Row, u8Col);
    35be:	89 81       	ldd	r24, Y+1	; 0x01
    35c0:	6a 81       	ldd	r22, Y+2	; 0x02
    35c2:	0e 94 93 1a 	call	0x3526	; 0x3526 <LCD_goToRowColumn>
	/* display the string */
	LCD_displayString(pu8Str);
    35c6:	8b 81       	ldd	r24, Y+3	; 0x03
    35c8:	9c 81       	ldd	r25, Y+4	; 0x04
    35ca:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <LCD_displayString>
}//end LCD_displayStringRowColumn
    35ce:	0f 90       	pop	r0
    35d0:	0f 90       	pop	r0
    35d2:	0f 90       	pop	r0
    35d4:	0f 90       	pop	r0
    35d6:	cf 91       	pop	r28
    35d8:	df 91       	pop	r29
    35da:	08 95       	ret

000035dc <LCD_intgerToString>:
* Parameters (out): None
* Return Value    : void
* Description     : A function to display integer
*************************************************************************************************/
void LCD_intgerToString(uintt16_t u16Data)
{
    35dc:	df 93       	push	r29
    35de:	cf 93       	push	r28
    35e0:	cd b7       	in	r28, 0x3d	; 61
    35e2:	de b7       	in	r29, 0x3e	; 62
    35e4:	62 97       	sbiw	r28, 0x12	; 18
    35e6:	0f b6       	in	r0, 0x3f	; 63
    35e8:	f8 94       	cli
    35ea:	de bf       	out	0x3e, r29	; 62
    35ec:	0f be       	out	0x3f, r0	; 63
    35ee:	cd bf       	out	0x3d, r28	; 61
    35f0:	9a 8b       	std	Y+18, r25	; 0x12
    35f2:	89 8b       	std	Y+17, r24	; 0x11
	/* String to hold the ascii result */
   uint8_t strBuff[16];
   itoa(u16Data, strBuff, 10); /* 10 for decimal */
    35f4:	89 89       	ldd	r24, Y+17	; 0x11
    35f6:	9a 89       	ldd	r25, Y+18	; 0x12
    35f8:	9e 01       	movw	r18, r28
    35fa:	2f 5f       	subi	r18, 0xFF	; 255
    35fc:	3f 4f       	sbci	r19, 0xFF	; 255
    35fe:	b9 01       	movw	r22, r18
    3600:	4a e0       	ldi	r20, 0x0A	; 10
    3602:	50 e0       	ldi	r21, 0x00	; 0
    3604:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <itoa>
   LCD_displayString(strBuff);
    3608:	ce 01       	movw	r24, r28
    360a:	01 96       	adiw	r24, 0x01	; 1
    360c:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <LCD_displayString>
}//end LCD_intgerToString
    3610:	62 96       	adiw	r28, 0x12	; 18
    3612:	0f b6       	in	r0, 0x3f	; 63
    3614:	f8 94       	cli
    3616:	de bf       	out	0x3e, r29	; 62
    3618:	0f be       	out	0x3f, r0	; 63
    361a:	cd bf       	out	0x3d, r28	; 61
    361c:	cf 91       	pop	r28
    361e:	df 91       	pop	r29
    3620:	08 95       	ret

00003622 <LCD_clearScreen>:
* Parameters (out): None
* Return Value    : void
* Description     : A function to clear the screen of the LCD
*************************************************************************************************/
void LCD_clearScreen(void)
{
    3622:	df 93       	push	r29
    3624:	cf 93       	push	r28
    3626:	cd b7       	in	r28, 0x3d	; 61
    3628:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    362a:	81 e0       	ldi	r24, 0x01	; 1
    362c:	0e 94 60 12 	call	0x24c0	; 0x24c0 <LCD_sendCommand>
}//end LCD_clearScreen
    3630:	cf 91       	pop	r28
    3632:	df 91       	pop	r29
    3634:	08 95       	ret

00003636 <KeyPad_getPressedKey>:
/*- INCLUDES----------------------------------------------*/
#include "KEYPAD.h"

/*- APIs IMPLEMENTATION-----------------------------------*/
enuErrorStatus_t KeyPad_getPressedKey(uint8_t* u8Key)
{
    3636:	df 93       	push	r29
    3638:	cf 93       	push	r28
    363a:	00 d0       	rcall	.+0      	; 0x363c <KeyPad_getPressedKey+0x6>
    363c:	00 d0       	rcall	.+0      	; 0x363e <KeyPad_getPressedKey+0x8>
    363e:	cd b7       	in	r28, 0x3d	; 61
    3640:	de b7       	in	r29, 0x3e	; 62
    3642:	9b 83       	std	Y+3, r25	; 0x03
    3644:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8Data;

	while(1)
	{
		DIO_Write(ROWA, LOW);
    3646:	80 e1       	ldi	r24, 0x10	; 16
    3648:	60 e0       	ldi	r22, 0x00	; 0
    364a:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
		DIO_Write(ROWB, HIGH);
    364e:	81 e1       	ldi	r24, 0x11	; 17
    3650:	61 e0       	ldi	r22, 0x01	; 1
    3652:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
		DIO_Write(ROWC, HIGH);
    3656:	82 e1       	ldi	r24, 0x12	; 18
    3658:	61 e0       	ldi	r22, 0x01	; 1
    365a:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
		DIO_Write(ROWD, HIGH);
    365e:	83 e1       	ldi	r24, 0x13	; 19
    3660:	61 e0       	ldi	r22, 0x01	; 1
    3662:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
		DIO_Read(COL1, &u8Data);
    3666:	84 e1       	ldi	r24, 0x14	; 20
    3668:	9e 01       	movw	r18, r28
    366a:	2f 5f       	subi	r18, 0xFF	; 255
    366c:	3f 4f       	sbci	r19, 0xFF	; 255
    366e:	b9 01       	movw	r22, r18
    3670:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <DIO_Read>
		if(u8Data==LOW)
    3674:	89 81       	ldd	r24, Y+1	; 0x01
    3676:	88 23       	and	r24, r24
    3678:	39 f4       	brne	.+14     	; 0x3688 <KeyPad_getPressedKey+0x52>
		{
			*u8Key = 7;
    367a:	ea 81       	ldd	r30, Y+2	; 0x02
    367c:	fb 81       	ldd	r31, Y+3	; 0x03
    367e:	87 e0       	ldi	r24, 0x07	; 7
    3680:	80 83       	st	Z, r24
			return E_OK;
    3682:	81 e0       	ldi	r24, 0x01	; 1
    3684:	8c 83       	std	Y+4, r24	; 0x04
    3686:	2e c1       	rjmp	.+604    	; 0x38e4 <KeyPad_getPressedKey+0x2ae>
		}
		DIO_Read(COL2, &u8Data);
    3688:	85 e1       	ldi	r24, 0x15	; 21
    368a:	9e 01       	movw	r18, r28
    368c:	2f 5f       	subi	r18, 0xFF	; 255
    368e:	3f 4f       	sbci	r19, 0xFF	; 255
    3690:	b9 01       	movw	r22, r18
    3692:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <DIO_Read>
		if(u8Data==LOW)
    3696:	89 81       	ldd	r24, Y+1	; 0x01
    3698:	88 23       	and	r24, r24
    369a:	39 f4       	brne	.+14     	; 0x36aa <KeyPad_getPressedKey+0x74>
		{
			*u8Key = 8;
    369c:	ea 81       	ldd	r30, Y+2	; 0x02
    369e:	fb 81       	ldd	r31, Y+3	; 0x03
    36a0:	88 e0       	ldi	r24, 0x08	; 8
    36a2:	80 83       	st	Z, r24
			return E_OK;
    36a4:	81 e0       	ldi	r24, 0x01	; 1
    36a6:	8c 83       	std	Y+4, r24	; 0x04
    36a8:	1d c1       	rjmp	.+570    	; 0x38e4 <KeyPad_getPressedKey+0x2ae>
		}
		DIO_Read(COL3, &u8Data);
    36aa:	86 e1       	ldi	r24, 0x16	; 22
    36ac:	9e 01       	movw	r18, r28
    36ae:	2f 5f       	subi	r18, 0xFF	; 255
    36b0:	3f 4f       	sbci	r19, 0xFF	; 255
    36b2:	b9 01       	movw	r22, r18
    36b4:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <DIO_Read>
		if(u8Data==LOW)
    36b8:	89 81       	ldd	r24, Y+1	; 0x01
    36ba:	88 23       	and	r24, r24
    36bc:	39 f4       	brne	.+14     	; 0x36cc <KeyPad_getPressedKey+0x96>
		{
			*u8Key = 9;
    36be:	ea 81       	ldd	r30, Y+2	; 0x02
    36c0:	fb 81       	ldd	r31, Y+3	; 0x03
    36c2:	89 e0       	ldi	r24, 0x09	; 9
    36c4:	80 83       	st	Z, r24
			return E_OK;
    36c6:	81 e0       	ldi	r24, 0x01	; 1
    36c8:	8c 83       	std	Y+4, r24	; 0x04
    36ca:	0c c1       	rjmp	.+536    	; 0x38e4 <KeyPad_getPressedKey+0x2ae>
		}
		DIO_Read(COL4, &u8Data);
    36cc:	87 e1       	ldi	r24, 0x17	; 23
    36ce:	9e 01       	movw	r18, r28
    36d0:	2f 5f       	subi	r18, 0xFF	; 255
    36d2:	3f 4f       	sbci	r19, 0xFF	; 255
    36d4:	b9 01       	movw	r22, r18
    36d6:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <DIO_Read>
		if(u8Data==LOW)
    36da:	89 81       	ldd	r24, Y+1	; 0x01
    36dc:	88 23       	and	r24, r24
    36de:	39 f4       	brne	.+14     	; 0x36ee <KeyPad_getPressedKey+0xb8>
		{
			*u8Key = '/';
    36e0:	ea 81       	ldd	r30, Y+2	; 0x02
    36e2:	fb 81       	ldd	r31, Y+3	; 0x03
    36e4:	8f e2       	ldi	r24, 0x2F	; 47
    36e6:	80 83       	st	Z, r24
			return E_OK;
    36e8:	81 e0       	ldi	r24, 0x01	; 1
    36ea:	8c 83       	std	Y+4, r24	; 0x04
    36ec:	fb c0       	rjmp	.+502    	; 0x38e4 <KeyPad_getPressedKey+0x2ae>
		}

		DIO_Write(ROWB, LOW);
    36ee:	81 e1       	ldi	r24, 0x11	; 17
    36f0:	60 e0       	ldi	r22, 0x00	; 0
    36f2:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
		DIO_Write(ROWA, HIGH);
    36f6:	80 e1       	ldi	r24, 0x10	; 16
    36f8:	61 e0       	ldi	r22, 0x01	; 1
    36fa:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
		DIO_Write(ROWC, HIGH);
    36fe:	82 e1       	ldi	r24, 0x12	; 18
    3700:	61 e0       	ldi	r22, 0x01	; 1
    3702:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
		DIO_Write(ROWD, HIGH);
    3706:	83 e1       	ldi	r24, 0x13	; 19
    3708:	61 e0       	ldi	r22, 0x01	; 1
    370a:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
		DIO_Read(COL1, &u8Data);
    370e:	84 e1       	ldi	r24, 0x14	; 20
    3710:	9e 01       	movw	r18, r28
    3712:	2f 5f       	subi	r18, 0xFF	; 255
    3714:	3f 4f       	sbci	r19, 0xFF	; 255
    3716:	b9 01       	movw	r22, r18
    3718:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <DIO_Read>
		if(u8Data==LOW)
    371c:	89 81       	ldd	r24, Y+1	; 0x01
    371e:	88 23       	and	r24, r24
    3720:	39 f4       	brne	.+14     	; 0x3730 <KeyPad_getPressedKey+0xfa>
		{
			*u8Key = 4;
    3722:	ea 81       	ldd	r30, Y+2	; 0x02
    3724:	fb 81       	ldd	r31, Y+3	; 0x03
    3726:	84 e0       	ldi	r24, 0x04	; 4
    3728:	80 83       	st	Z, r24
			return E_OK;
    372a:	81 e0       	ldi	r24, 0x01	; 1
    372c:	8c 83       	std	Y+4, r24	; 0x04
    372e:	da c0       	rjmp	.+436    	; 0x38e4 <KeyPad_getPressedKey+0x2ae>
		}
		DIO_Read(COL2, &u8Data);
    3730:	85 e1       	ldi	r24, 0x15	; 21
    3732:	9e 01       	movw	r18, r28
    3734:	2f 5f       	subi	r18, 0xFF	; 255
    3736:	3f 4f       	sbci	r19, 0xFF	; 255
    3738:	b9 01       	movw	r22, r18
    373a:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <DIO_Read>
		if(u8Data==LOW)
    373e:	89 81       	ldd	r24, Y+1	; 0x01
    3740:	88 23       	and	r24, r24
    3742:	39 f4       	brne	.+14     	; 0x3752 <KeyPad_getPressedKey+0x11c>
		{
			*u8Key = 5;
    3744:	ea 81       	ldd	r30, Y+2	; 0x02
    3746:	fb 81       	ldd	r31, Y+3	; 0x03
    3748:	85 e0       	ldi	r24, 0x05	; 5
    374a:	80 83       	st	Z, r24
			return E_OK;
    374c:	81 e0       	ldi	r24, 0x01	; 1
    374e:	8c 83       	std	Y+4, r24	; 0x04
    3750:	c9 c0       	rjmp	.+402    	; 0x38e4 <KeyPad_getPressedKey+0x2ae>
		}
		DIO_Read(COL3, &u8Data);
    3752:	86 e1       	ldi	r24, 0x16	; 22
    3754:	9e 01       	movw	r18, r28
    3756:	2f 5f       	subi	r18, 0xFF	; 255
    3758:	3f 4f       	sbci	r19, 0xFF	; 255
    375a:	b9 01       	movw	r22, r18
    375c:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <DIO_Read>
		if(u8Data==LOW)
    3760:	89 81       	ldd	r24, Y+1	; 0x01
    3762:	88 23       	and	r24, r24
    3764:	39 f4       	brne	.+14     	; 0x3774 <KeyPad_getPressedKey+0x13e>
		{
			*u8Key = 6;
    3766:	ea 81       	ldd	r30, Y+2	; 0x02
    3768:	fb 81       	ldd	r31, Y+3	; 0x03
    376a:	86 e0       	ldi	r24, 0x06	; 6
    376c:	80 83       	st	Z, r24
			return E_OK;
    376e:	81 e0       	ldi	r24, 0x01	; 1
    3770:	8c 83       	std	Y+4, r24	; 0x04
    3772:	b8 c0       	rjmp	.+368    	; 0x38e4 <KeyPad_getPressedKey+0x2ae>
		}
		DIO_Read(COL4, &u8Data);
    3774:	87 e1       	ldi	r24, 0x17	; 23
    3776:	9e 01       	movw	r18, r28
    3778:	2f 5f       	subi	r18, 0xFF	; 255
    377a:	3f 4f       	sbci	r19, 0xFF	; 255
    377c:	b9 01       	movw	r22, r18
    377e:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <DIO_Read>
		if(u8Data==LOW)
    3782:	89 81       	ldd	r24, Y+1	; 0x01
    3784:	88 23       	and	r24, r24
    3786:	39 f4       	brne	.+14     	; 0x3796 <KeyPad_getPressedKey+0x160>
		{
			*u8Key = '*';
    3788:	ea 81       	ldd	r30, Y+2	; 0x02
    378a:	fb 81       	ldd	r31, Y+3	; 0x03
    378c:	8a e2       	ldi	r24, 0x2A	; 42
    378e:	80 83       	st	Z, r24
			return E_OK;
    3790:	81 e0       	ldi	r24, 0x01	; 1
    3792:	8c 83       	std	Y+4, r24	; 0x04
    3794:	a7 c0       	rjmp	.+334    	; 0x38e4 <KeyPad_getPressedKey+0x2ae>
		}

		DIO_Write(ROWC, LOW);
    3796:	82 e1       	ldi	r24, 0x12	; 18
    3798:	60 e0       	ldi	r22, 0x00	; 0
    379a:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
		DIO_Write(ROWB, HIGH);
    379e:	81 e1       	ldi	r24, 0x11	; 17
    37a0:	61 e0       	ldi	r22, 0x01	; 1
    37a2:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
		DIO_Write(ROWA, HIGH);
    37a6:	80 e1       	ldi	r24, 0x10	; 16
    37a8:	61 e0       	ldi	r22, 0x01	; 1
    37aa:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
		DIO_Write(ROWD, HIGH);
    37ae:	83 e1       	ldi	r24, 0x13	; 19
    37b0:	61 e0       	ldi	r22, 0x01	; 1
    37b2:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
		DIO_Read(COL1, &u8Data);
    37b6:	84 e1       	ldi	r24, 0x14	; 20
    37b8:	9e 01       	movw	r18, r28
    37ba:	2f 5f       	subi	r18, 0xFF	; 255
    37bc:	3f 4f       	sbci	r19, 0xFF	; 255
    37be:	b9 01       	movw	r22, r18
    37c0:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <DIO_Read>
		if(u8Data==LOW)
    37c4:	89 81       	ldd	r24, Y+1	; 0x01
    37c6:	88 23       	and	r24, r24
    37c8:	39 f4       	brne	.+14     	; 0x37d8 <KeyPad_getPressedKey+0x1a2>
		{
			*u8Key = 1;
    37ca:	ea 81       	ldd	r30, Y+2	; 0x02
    37cc:	fb 81       	ldd	r31, Y+3	; 0x03
    37ce:	81 e0       	ldi	r24, 0x01	; 1
    37d0:	80 83       	st	Z, r24
			return E_OK;
    37d2:	81 e0       	ldi	r24, 0x01	; 1
    37d4:	8c 83       	std	Y+4, r24	; 0x04
    37d6:	86 c0       	rjmp	.+268    	; 0x38e4 <KeyPad_getPressedKey+0x2ae>
		}
		DIO_Read(COL2, &u8Data);
    37d8:	85 e1       	ldi	r24, 0x15	; 21
    37da:	9e 01       	movw	r18, r28
    37dc:	2f 5f       	subi	r18, 0xFF	; 255
    37de:	3f 4f       	sbci	r19, 0xFF	; 255
    37e0:	b9 01       	movw	r22, r18
    37e2:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <DIO_Read>
		if(u8Data==LOW)
    37e6:	89 81       	ldd	r24, Y+1	; 0x01
    37e8:	88 23       	and	r24, r24
    37ea:	39 f4       	brne	.+14     	; 0x37fa <KeyPad_getPressedKey+0x1c4>
		{
			*u8Key = 2;
    37ec:	ea 81       	ldd	r30, Y+2	; 0x02
    37ee:	fb 81       	ldd	r31, Y+3	; 0x03
    37f0:	82 e0       	ldi	r24, 0x02	; 2
    37f2:	80 83       	st	Z, r24
			return E_OK;
    37f4:	81 e0       	ldi	r24, 0x01	; 1
    37f6:	8c 83       	std	Y+4, r24	; 0x04
    37f8:	75 c0       	rjmp	.+234    	; 0x38e4 <KeyPad_getPressedKey+0x2ae>
		}
		DIO_Read(COL3, &u8Data);
    37fa:	86 e1       	ldi	r24, 0x16	; 22
    37fc:	9e 01       	movw	r18, r28
    37fe:	2f 5f       	subi	r18, 0xFF	; 255
    3800:	3f 4f       	sbci	r19, 0xFF	; 255
    3802:	b9 01       	movw	r22, r18
    3804:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <DIO_Read>
		if(u8Data==LOW)
    3808:	89 81       	ldd	r24, Y+1	; 0x01
    380a:	88 23       	and	r24, r24
    380c:	39 f4       	brne	.+14     	; 0x381c <KeyPad_getPressedKey+0x1e6>
		{
			*u8Key = 3;
    380e:	ea 81       	ldd	r30, Y+2	; 0x02
    3810:	fb 81       	ldd	r31, Y+3	; 0x03
    3812:	83 e0       	ldi	r24, 0x03	; 3
    3814:	80 83       	st	Z, r24
			return E_OK;
    3816:	81 e0       	ldi	r24, 0x01	; 1
    3818:	8c 83       	std	Y+4, r24	; 0x04
    381a:	64 c0       	rjmp	.+200    	; 0x38e4 <KeyPad_getPressedKey+0x2ae>
		}
		DIO_Read(COL4, &u8Data);
    381c:	87 e1       	ldi	r24, 0x17	; 23
    381e:	9e 01       	movw	r18, r28
    3820:	2f 5f       	subi	r18, 0xFF	; 255
    3822:	3f 4f       	sbci	r19, 0xFF	; 255
    3824:	b9 01       	movw	r22, r18
    3826:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <DIO_Read>
		if(u8Data==LOW)
    382a:	89 81       	ldd	r24, Y+1	; 0x01
    382c:	88 23       	and	r24, r24
    382e:	39 f4       	brne	.+14     	; 0x383e <KeyPad_getPressedKey+0x208>
		{
			*u8Key = '-';
    3830:	ea 81       	ldd	r30, Y+2	; 0x02
    3832:	fb 81       	ldd	r31, Y+3	; 0x03
    3834:	8d e2       	ldi	r24, 0x2D	; 45
    3836:	80 83       	st	Z, r24
			return E_OK;
    3838:	81 e0       	ldi	r24, 0x01	; 1
    383a:	8c 83       	std	Y+4, r24	; 0x04
    383c:	53 c0       	rjmp	.+166    	; 0x38e4 <KeyPad_getPressedKey+0x2ae>
		}

		DIO_Write(ROWD, LOW);
    383e:	83 e1       	ldi	r24, 0x13	; 19
    3840:	60 e0       	ldi	r22, 0x00	; 0
    3842:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
		DIO_Write(ROWB, HIGH);
    3846:	81 e1       	ldi	r24, 0x11	; 17
    3848:	61 e0       	ldi	r22, 0x01	; 1
    384a:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
		DIO_Write(ROWC, HIGH);
    384e:	82 e1       	ldi	r24, 0x12	; 18
    3850:	61 e0       	ldi	r22, 0x01	; 1
    3852:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
		DIO_Write(ROWA, HIGH);
    3856:	80 e1       	ldi	r24, 0x10	; 16
    3858:	61 e0       	ldi	r22, 0x01	; 1
    385a:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
		DIO_Read(COL1, &u8Data);
    385e:	84 e1       	ldi	r24, 0x14	; 20
    3860:	9e 01       	movw	r18, r28
    3862:	2f 5f       	subi	r18, 0xFF	; 255
    3864:	3f 4f       	sbci	r19, 0xFF	; 255
    3866:	b9 01       	movw	r22, r18
    3868:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <DIO_Read>
		if(u8Data==LOW)
    386c:	89 81       	ldd	r24, Y+1	; 0x01
    386e:	88 23       	and	r24, r24
    3870:	39 f4       	brne	.+14     	; 0x3880 <KeyPad_getPressedKey+0x24a>
		{
			*u8Key = 'N';
    3872:	ea 81       	ldd	r30, Y+2	; 0x02
    3874:	fb 81       	ldd	r31, Y+3	; 0x03
    3876:	8e e4       	ldi	r24, 0x4E	; 78
    3878:	80 83       	st	Z, r24
			return E_OK;
    387a:	81 e0       	ldi	r24, 0x01	; 1
    387c:	8c 83       	std	Y+4, r24	; 0x04
    387e:	32 c0       	rjmp	.+100    	; 0x38e4 <KeyPad_getPressedKey+0x2ae>
		}
		DIO_Read(COL2, &u8Data);
    3880:	85 e1       	ldi	r24, 0x15	; 21
    3882:	9e 01       	movw	r18, r28
    3884:	2f 5f       	subi	r18, 0xFF	; 255
    3886:	3f 4f       	sbci	r19, 0xFF	; 255
    3888:	b9 01       	movw	r22, r18
    388a:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <DIO_Read>
		if(u8Data==LOW)
    388e:	89 81       	ldd	r24, Y+1	; 0x01
    3890:	88 23       	and	r24, r24
    3892:	31 f4       	brne	.+12     	; 0x38a0 <KeyPad_getPressedKey+0x26a>
		{
			*u8Key = 0;
    3894:	ea 81       	ldd	r30, Y+2	; 0x02
    3896:	fb 81       	ldd	r31, Y+3	; 0x03
    3898:	10 82       	st	Z, r1
			return E_OK;
    389a:	81 e0       	ldi	r24, 0x01	; 1
    389c:	8c 83       	std	Y+4, r24	; 0x04
    389e:	22 c0       	rjmp	.+68     	; 0x38e4 <KeyPad_getPressedKey+0x2ae>
		}
		DIO_Read(COL3, &u8Data);
    38a0:	86 e1       	ldi	r24, 0x16	; 22
    38a2:	9e 01       	movw	r18, r28
    38a4:	2f 5f       	subi	r18, 0xFF	; 255
    38a6:	3f 4f       	sbci	r19, 0xFF	; 255
    38a8:	b9 01       	movw	r22, r18
    38aa:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <DIO_Read>
		if(u8Data==LOW)
    38ae:	89 81       	ldd	r24, Y+1	; 0x01
    38b0:	88 23       	and	r24, r24
    38b2:	39 f4       	brne	.+14     	; 0x38c2 <KeyPad_getPressedKey+0x28c>
		{
			*u8Key = '=';
    38b4:	ea 81       	ldd	r30, Y+2	; 0x02
    38b6:	fb 81       	ldd	r31, Y+3	; 0x03
    38b8:	8d e3       	ldi	r24, 0x3D	; 61
    38ba:	80 83       	st	Z, r24
			return E_OK;
    38bc:	81 e0       	ldi	r24, 0x01	; 1
    38be:	8c 83       	std	Y+4, r24	; 0x04
    38c0:	11 c0       	rjmp	.+34     	; 0x38e4 <KeyPad_getPressedKey+0x2ae>
		}
		DIO_Read(COL4, &u8Data);
    38c2:	87 e1       	ldi	r24, 0x17	; 23
    38c4:	9e 01       	movw	r18, r28
    38c6:	2f 5f       	subi	r18, 0xFF	; 255
    38c8:	3f 4f       	sbci	r19, 0xFF	; 255
    38ca:	b9 01       	movw	r22, r18
    38cc:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <DIO_Read>
		if(u8Data==LOW)
    38d0:	89 81       	ldd	r24, Y+1	; 0x01
    38d2:	88 23       	and	r24, r24
    38d4:	09 f0       	breq	.+2      	; 0x38d8 <KeyPad_getPressedKey+0x2a2>
    38d6:	b7 ce       	rjmp	.-658    	; 0x3646 <KeyPad_getPressedKey+0x10>
		{
			*u8Key = '+';
    38d8:	ea 81       	ldd	r30, Y+2	; 0x02
    38da:	fb 81       	ldd	r31, Y+3	; 0x03
    38dc:	8b e2       	ldi	r24, 0x2B	; 43
    38de:	80 83       	st	Z, r24
			return E_OK;
    38e0:	81 e0       	ldi	r24, 0x01	; 1
    38e2:	8c 83       	std	Y+4, r24	; 0x04
		}

//		return E_ERROR;
	}//end while
    38e4:	8c 81       	ldd	r24, Y+4	; 0x04
}//end KeyPad_getPressedKey
    38e6:	0f 90       	pop	r0
    38e8:	0f 90       	pop	r0
    38ea:	0f 90       	pop	r0
    38ec:	0f 90       	pop	r0
    38ee:	cf 91       	pop	r28
    38f0:	df 91       	pop	r29
    38f2:	08 95       	ret

000038f4 <DCMotor_Init>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to initialize the motor
*************************************************************************************************/
enuErrorStatus_t DCMotor_Init(void)
{
    38f4:	df 93       	push	r29
    38f6:	cf 93       	push	r28
    38f8:	cd b7       	in	r28, 0x3d	; 61
    38fa:	de b7       	in	r29, 0x3e	; 62
	//configure PB0,PB1(Motor pins) as output pins
	return DIO_Init();
    38fc:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_Init>
}//end DCMotor_Init
    3900:	cf 91       	pop	r28
    3902:	df 91       	pop	r29
    3904:	08 95       	ret

00003906 <DCMotor_setDirection>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to set the motor direction
*************************************************************************************************/
enuErrorStatus_t DCMotor_setDirection(uint8_t u8_Motor, enuMotorDirection_t enuDirection)
{
    3906:	df 93       	push	r29
    3908:	cf 93       	push	r28
    390a:	00 d0       	rcall	.+0      	; 0x390c <DCMotor_setDirection+0x6>
    390c:	00 d0       	rcall	.+0      	; 0x390e <DCMotor_setDirection+0x8>
    390e:	cd b7       	in	r28, 0x3d	; 61
    3910:	de b7       	in	r29, 0x3e	; 62
    3912:	89 83       	std	Y+1, r24	; 0x01
    3914:	6a 83       	std	Y+2, r22	; 0x02
	switch(enuDirection)
    3916:	8a 81       	ldd	r24, Y+2	; 0x02
    3918:	28 2f       	mov	r18, r24
    391a:	30 e0       	ldi	r19, 0x00	; 0
    391c:	3c 83       	std	Y+4, r19	; 0x04
    391e:	2b 83       	std	Y+3, r18	; 0x03
    3920:	8b 81       	ldd	r24, Y+3	; 0x03
    3922:	9c 81       	ldd	r25, Y+4	; 0x04
    3924:	00 97       	sbiw	r24, 0x00	; 0
    3926:	31 f0       	breq	.+12     	; 0x3934 <DCMotor_setDirection+0x2e>
    3928:	2b 81       	ldd	r18, Y+3	; 0x03
    392a:	3c 81       	ldd	r19, Y+4	; 0x04
    392c:	21 30       	cpi	r18, 0x01	; 1
    392e:	31 05       	cpc	r19, r1
    3930:	c9 f0       	breq	.+50     	; 0x3964 <DCMotor_setDirection+0x5e>
    3932:	2f c0       	rjmp	.+94     	; 0x3992 <DCMotor_setDirection+0x8c>
	{
	case FORWARD:

		if(u8_Motor == MOTOR1)
    3934:	89 81       	ldd	r24, Y+1	; 0x01
    3936:	88 23       	and	r24, r24
    3938:	49 f4       	brne	.+18     	; 0x394c <DCMotor_setDirection+0x46>
		{
			DIO_Write(DC1_IN1, HIGH);
    393a:	87 e0       	ldi	r24, 0x07	; 7
    393c:	61 e0       	ldi	r22, 0x01	; 1
    393e:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
			DIO_Write(DC1_IN2, LOW);
    3942:	88 e0       	ldi	r24, 0x08	; 8
    3944:	60 e0       	ldi	r22, 0x00	; 0
    3946:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
    394a:	23 c0       	rjmp	.+70     	; 0x3992 <DCMotor_setDirection+0x8c>
		}
		else if(u8_Motor == MOTOR2)
    394c:	89 81       	ldd	r24, Y+1	; 0x01
    394e:	81 30       	cpi	r24, 0x01	; 1
    3950:	01 f5       	brne	.+64     	; 0x3992 <DCMotor_setDirection+0x8c>
		{
			DIO_Write(DC2_IN1, HIGH);
    3952:	8a e0       	ldi	r24, 0x0A	; 10
    3954:	61 e0       	ldi	r22, 0x01	; 1
    3956:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
			DIO_Write(DC2_IN2, LOW);
    395a:	8b e0       	ldi	r24, 0x0B	; 11
    395c:	60 e0       	ldi	r22, 0x00	; 0
    395e:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
    3962:	17 c0       	rjmp	.+46     	; 0x3992 <DCMotor_setDirection+0x8c>
		}
		break;
	case BACKWARD:

		if(u8_Motor == MOTOR1)
    3964:	89 81       	ldd	r24, Y+1	; 0x01
    3966:	88 23       	and	r24, r24
    3968:	49 f4       	brne	.+18     	; 0x397c <DCMotor_setDirection+0x76>
		{
			DIO_Write(DC1_IN1, LOW);
    396a:	87 e0       	ldi	r24, 0x07	; 7
    396c:	60 e0       	ldi	r22, 0x00	; 0
    396e:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
			DIO_Write(DC1_IN2, HIGH);
    3972:	88 e0       	ldi	r24, 0x08	; 8
    3974:	61 e0       	ldi	r22, 0x01	; 1
    3976:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
    397a:	0b c0       	rjmp	.+22     	; 0x3992 <DCMotor_setDirection+0x8c>
		}
		else if(u8_Motor == MOTOR2)
    397c:	89 81       	ldd	r24, Y+1	; 0x01
    397e:	81 30       	cpi	r24, 0x01	; 1
    3980:	41 f4       	brne	.+16     	; 0x3992 <DCMotor_setDirection+0x8c>
		{
			DIO_Write(DC2_IN1, LOW);
    3982:	8a e0       	ldi	r24, 0x0A	; 10
    3984:	60 e0       	ldi	r22, 0x00	; 0
    3986:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
			DIO_Write(DC2_IN2, HIGH);
    398a:	8b e0       	ldi	r24, 0x0B	; 11
    398c:	61 e0       	ldi	r22, 0x01	; 1
    398e:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
		}
		break;
	}//end switch
	return E_OK;
    3992:	81 e0       	ldi	r24, 0x01	; 1
}//end DCMotor_setDirection
    3994:	0f 90       	pop	r0
    3996:	0f 90       	pop	r0
    3998:	0f 90       	pop	r0
    399a:	0f 90       	pop	r0
    399c:	cf 91       	pop	r28
    399e:	df 91       	pop	r29
    39a0:	08 95       	ret

000039a2 <DCMotor_setSpeed>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to set the motor speed
*************************************************************************************************/
enuErrorStatus_t DCMotor_setSpeed(uint8_t u8_Speed)
{
    39a2:	df 93       	push	r29
    39a4:	cf 93       	push	r28
    39a6:	00 d0       	rcall	.+0      	; 0x39a8 <DCMotor_setSpeed+0x6>
    39a8:	cd b7       	in	r28, 0x3d	; 61
    39aa:	de b7       	in	r29, 0x3e	; 62
    39ac:	89 83       	std	Y+1, r24	; 0x01
	if(u8_Speed > 100)
    39ae:	89 81       	ldd	r24, Y+1	; 0x01
    39b0:	85 36       	cpi	r24, 0x65	; 101
    39b2:	10 f0       	brcs	.+4      	; 0x39b8 <DCMotor_setSpeed+0x16>
	{
		return E_ERROR;
    39b4:	1a 82       	std	Y+2, r1	; 0x02
    39b6:	07 c0       	rjmp	.+14     	; 0x39c6 <DCMotor_setSpeed+0x24>
	}//end if
	PWM_Init();
    39b8:	0e 94 4e 07 	call	0xe9c	; 0xe9c <PWM_Init>
	PWM_Start(u8_Speed);
    39bc:	89 81       	ldd	r24, Y+1	; 0x01
    39be:	0e 94 98 08 	call	0x1130	; 0x1130 <PWM_Start>

	return E_OK;
    39c2:	81 e0       	ldi	r24, 0x01	; 1
    39c4:	8a 83       	std	Y+2, r24	; 0x02
    39c6:	8a 81       	ldd	r24, Y+2	; 0x02

}//end DCMotor_setSpeed
    39c8:	0f 90       	pop	r0
    39ca:	0f 90       	pop	r0
    39cc:	cf 91       	pop	r28
    39ce:	df 91       	pop	r29
    39d0:	08 95       	ret

000039d2 <DCMotor_stop>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to stop the motor
*************************************************************************************************/
enuErrorStatus_t DCMotor_stop(uint8_t u8_Motor)
{
    39d2:	df 93       	push	r29
    39d4:	cf 93       	push	r28
    39d6:	0f 92       	push	r0
    39d8:	cd b7       	in	r28, 0x3d	; 61
    39da:	de b7       	in	r29, 0x3e	; 62
    39dc:	89 83       	std	Y+1, r24	; 0x01
	if(u8_Motor == MOTOR1)
    39de:	89 81       	ldd	r24, Y+1	; 0x01
    39e0:	88 23       	and	r24, r24
    39e2:	49 f4       	brne	.+18     	; 0x39f6 <DCMotor_stop+0x24>
	{
		DIO_Write(DC1_IN1, LOW);
    39e4:	87 e0       	ldi	r24, 0x07	; 7
    39e6:	60 e0       	ldi	r22, 0x00	; 0
    39e8:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
		DIO_Write(DC1_IN2, LOW);
    39ec:	88 e0       	ldi	r24, 0x08	; 8
    39ee:	60 e0       	ldi	r22, 0x00	; 0
    39f0:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
    39f4:	0b c0       	rjmp	.+22     	; 0x3a0c <DCMotor_stop+0x3a>
	}
	else if(u8_Motor == MOTOR2)
    39f6:	89 81       	ldd	r24, Y+1	; 0x01
    39f8:	81 30       	cpi	r24, 0x01	; 1
    39fa:	41 f4       	brne	.+16     	; 0x3a0c <DCMotor_stop+0x3a>
	{
		DIO_Write(DC2_IN1, LOW);
    39fc:	8a e0       	ldi	r24, 0x0A	; 10
    39fe:	60 e0       	ldi	r22, 0x00	; 0
    3a00:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
		DIO_Write(DC2_IN2, LOW);
    3a04:	8b e0       	ldi	r24, 0x0B	; 11
    3a06:	60 e0       	ldi	r22, 0x00	; 0
    3a08:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
	}

	return E_OK;
    3a0c:	81 e0       	ldi	r24, 0x01	; 1
}//end DCMotor_stop
    3a0e:	0f 90       	pop	r0
    3a10:	cf 91       	pop	r28
    3a12:	df 91       	pop	r29
    3a14:	08 95       	ret

00003a16 <Temp_Sensor>:
* Parameters (out): None
* Return Value    : void
* Description     : A static function to calculate the temperature value
*************************************************************************************************/
static void Temp_Sensor(uintt16_t* u16Temp)
{
    3a16:	df 93       	push	r29
    3a18:	cf 93       	push	r28
    3a1a:	00 d0       	rcall	.+0      	; 0x3a1c <Temp_Sensor+0x6>
    3a1c:	00 d0       	rcall	.+0      	; 0x3a1e <Temp_Sensor+0x8>
    3a1e:	00 d0       	rcall	.+0      	; 0x3a20 <Temp_Sensor+0xa>
    3a20:	cd b7       	in	r28, 0x3d	; 61
    3a22:	de b7       	in	r29, 0x3e	; 62
    3a24:	9e 83       	std	Y+6, r25	; 0x06
    3a26:	8d 83       	std	Y+5, r24	; 0x05
	uintt16_t adc_read = ADC_Read(ADC0);
    3a28:	88 e1       	ldi	r24, 0x18	; 24
    3a2a:	0e 94 14 12 	call	0x2428	; 0x2428 <ADC_Read>
    3a2e:	9c 83       	std	Y+4, r25	; 0x04
    3a30:	8b 83       	std	Y+3, r24	; 0x03
	uintt16_t volt = ((unsigned long)5000 * adc_read)/1024;
    3a32:	8b 81       	ldd	r24, Y+3	; 0x03
    3a34:	9c 81       	ldd	r25, Y+4	; 0x04
    3a36:	cc 01       	movw	r24, r24
    3a38:	a0 e0       	ldi	r26, 0x00	; 0
    3a3a:	b0 e0       	ldi	r27, 0x00	; 0
    3a3c:	28 e8       	ldi	r18, 0x88	; 136
    3a3e:	33 e1       	ldi	r19, 0x13	; 19
    3a40:	40 e0       	ldi	r20, 0x00	; 0
    3a42:	50 e0       	ldi	r21, 0x00	; 0
    3a44:	bc 01       	movw	r22, r24
    3a46:	cd 01       	movw	r24, r26
    3a48:	0e 94 30 1f 	call	0x3e60	; 0x3e60 <__mulsi3>
    3a4c:	dc 01       	movw	r26, r24
    3a4e:	cb 01       	movw	r24, r22
    3a50:	07 2e       	mov	r0, r23
    3a52:	7a e0       	ldi	r23, 0x0A	; 10
    3a54:	b6 95       	lsr	r27
    3a56:	a7 95       	ror	r26
    3a58:	97 95       	ror	r25
    3a5a:	87 95       	ror	r24
    3a5c:	7a 95       	dec	r23
    3a5e:	d1 f7       	brne	.-12     	; 0x3a54 <Temp_Sensor+0x3e>
    3a60:	70 2d       	mov	r23, r0
    3a62:	9a 83       	std	Y+2, r25	; 0x02
    3a64:	89 83       	std	Y+1, r24	; 0x01
	*u16Temp =  volt /10;
    3a66:	89 81       	ldd	r24, Y+1	; 0x01
    3a68:	9a 81       	ldd	r25, Y+2	; 0x02
    3a6a:	2a e0       	ldi	r18, 0x0A	; 10
    3a6c:	30 e0       	ldi	r19, 0x00	; 0
    3a6e:	b9 01       	movw	r22, r18
    3a70:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <__udivmodhi4>
    3a74:	cb 01       	movw	r24, r22
    3a76:	ed 81       	ldd	r30, Y+5	; 0x05
    3a78:	fe 81       	ldd	r31, Y+6	; 0x06
    3a7a:	91 83       	std	Z+1, r25	; 0x01
    3a7c:	80 83       	st	Z, r24
}//end Temp_Sensor
    3a7e:	26 96       	adiw	r28, 0x06	; 6
    3a80:	0f b6       	in	r0, 0x3f	; 63
    3a82:	f8 94       	cli
    3a84:	de bf       	out	0x3e, r29	; 62
    3a86:	0f be       	out	0x3f, r0	; 63
    3a88:	cd bf       	out	0x3d, r28	; 61
    3a8a:	cf 91       	pop	r28
    3a8c:	df 91       	pop	r29
    3a8e:	08 95       	ret

00003a90 <Thermostat_Init>:
* Parameters (out): None
* Return Value    : void
* Description     : A function to initialize the thermostat
*************************************************************************************************/
void Thermostat_Init(void)
{
    3a90:	df 93       	push	r29
    3a92:	cf 93       	push	r28
    3a94:	cd b7       	in	r28, 0x3d	; 61
    3a96:	de b7       	in	r29, 0x3e	; 62
	DIO_Init();
    3a98:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <DIO_Init>
	ADC_init(ADC_PRESCALLER_64,ADC_AVCC);
    3a9c:	85 e0       	ldi	r24, 0x05	; 5
    3a9e:	61 e0       	ldi	r22, 0x01	; 1
    3aa0:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <ADC_init>
	LCD_init();
    3aa4:	0e 94 4b 12 	call	0x2496	; 0x2496 <LCD_init>

	/* Motor Direction */
	DIO_Write(MOTORIN1, HIGH);
    3aa8:	89 e1       	ldi	r24, 0x19	; 25
    3aaa:	61 e0       	ldi	r22, 0x01	; 1
    3aac:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
	DIO_Write(MOTORIN2, LOW);
    3ab0:	8a e1       	ldi	r24, 0x1A	; 26
    3ab2:	60 e0       	ldi	r22, 0x00	; 0
    3ab4:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>

	LCD_displayStringRowColumn(0, 2, (uint8_t*)"Thermostat");
    3ab8:	26 e6       	ldi	r18, 0x66	; 102
    3aba:	30 e0       	ldi	r19, 0x00	; 0
    3abc:	80 e0       	ldi	r24, 0x00	; 0
    3abe:	62 e0       	ldi	r22, 0x02	; 2
    3ac0:	a9 01       	movw	r20, r18
    3ac2:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, (uint8_t*)"Desired Temp= ");
    3ac6:	21 e7       	ldi	r18, 0x71	; 113
    3ac8:	30 e0       	ldi	r19, 0x00	; 0
    3aca:	81 e0       	ldi	r24, 0x01	; 1
    3acc:	60 e0       	ldi	r22, 0x00	; 0
    3ace:	a9 01       	movw	r20, r18
    3ad0:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(2, 0, (uint8_t*)"Current Temp= ");
    3ad4:	20 e8       	ldi	r18, 0x80	; 128
    3ad6:	30 e0       	ldi	r19, 0x00	; 0
    3ad8:	82 e0       	ldi	r24, 0x02	; 2
    3ada:	60 e0       	ldi	r22, 0x00	; 0
    3adc:	a9 01       	movw	r20, r18
    3ade:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <LCD_displayStringRowColumn>
}//end Thermostat_Init
    3ae2:	cf 91       	pop	r28
    3ae4:	df 91       	pop	r29
    3ae6:	08 95       	ret

00003ae8 <Thermostat_Update>:
* Parameters (out): None
* Return Value    : void
* Description     : A function to update the thermostat
*************************************************************************************************/
void Thermostat_Update(void)
{
    3ae8:	df 93       	push	r29
    3aea:	cf 93       	push	r28
    3aec:	cd b7       	in	r28, 0x3d	; 61
    3aee:	de b7       	in	r29, 0x3e	; 62
    3af0:	e1 97       	sbiw	r28, 0x31	; 49
    3af2:	0f b6       	in	r0, 0x3f	; 63
    3af4:	f8 94       	cli
    3af6:	de bf       	out	0x3e, r29	; 62
    3af8:	0f be       	out	0x3f, r0	; 63
    3afa:	cd bf       	out	0x3d, r28	; 61
	uint8_t   u8KeyBuffer[2];
	uint8_t	  u8Key;
	uintt16_t u16DesiredTemp=0;
    3afc:	1c a6       	std	Y+44, r1	; 0x2c
    3afe:	1b a6       	std	Y+43, r1	; 0x2b
	uintt16_t u16CurrentTemp;

	/* Get the current temp from ADC and display it on LCD */
	Temp_Sensor(&u16CurrentTemp);
    3b00:	ce 01       	movw	r24, r28
    3b02:	c0 96       	adiw	r24, 0x30	; 48
    3b04:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <Temp_Sensor>
	LCD_goToRowColumn(2, 13);
    3b08:	82 e0       	ldi	r24, 0x02	; 2
    3b0a:	6d e0       	ldi	r22, 0x0D	; 13
    3b0c:	0e 94 93 1a 	call	0x3526	; 0x3526 <LCD_goToRowColumn>
	LCD_intgerToString(u16CurrentTemp);
    3b10:	88 a9       	ldd	r24, Y+48	; 0x30
    3b12:	99 a9       	ldd	r25, Y+49	; 0x31
    3b14:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <LCD_intgerToString>

	/* Get the desired temp from Keypad */
	KeyPad_getPressedKey(&u8KeyBuffer[0]);
    3b18:	ce 01       	movw	r24, r28
    3b1a:	8d 96       	adiw	r24, 0x2d	; 45
    3b1c:	0e 94 1b 1b 	call	0x3636	; 0x3636 <KeyPad_getPressedKey>
    3b20:	80 e0       	ldi	r24, 0x00	; 0
    3b22:	90 e0       	ldi	r25, 0x00	; 0
    3b24:	aa ef       	ldi	r26, 0xFA	; 250
    3b26:	b3 e4       	ldi	r27, 0x43	; 67
    3b28:	8f a3       	std	Y+39, r24	; 0x27
    3b2a:	98 a7       	std	Y+40, r25	; 0x28
    3b2c:	a9 a7       	std	Y+41, r26	; 0x29
    3b2e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b30:	6f a1       	ldd	r22, Y+39	; 0x27
    3b32:	78 a5       	ldd	r23, Y+40	; 0x28
    3b34:	89 a5       	ldd	r24, Y+41	; 0x29
    3b36:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b38:	20 e0       	ldi	r18, 0x00	; 0
    3b3a:	30 e0       	ldi	r19, 0x00	; 0
    3b3c:	4a ef       	ldi	r20, 0xFA	; 250
    3b3e:	54 e4       	ldi	r21, 0x44	; 68
    3b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b44:	dc 01       	movw	r26, r24
    3b46:	cb 01       	movw	r24, r22
    3b48:	8b a3       	std	Y+35, r24	; 0x23
    3b4a:	9c a3       	std	Y+36, r25	; 0x24
    3b4c:	ad a3       	std	Y+37, r26	; 0x25
    3b4e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3b50:	6b a1       	ldd	r22, Y+35	; 0x23
    3b52:	7c a1       	ldd	r23, Y+36	; 0x24
    3b54:	8d a1       	ldd	r24, Y+37	; 0x25
    3b56:	9e a1       	ldd	r25, Y+38	; 0x26
    3b58:	20 e0       	ldi	r18, 0x00	; 0
    3b5a:	30 e0       	ldi	r19, 0x00	; 0
    3b5c:	40 e8       	ldi	r20, 0x80	; 128
    3b5e:	5f e3       	ldi	r21, 0x3F	; 63
    3b60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b64:	88 23       	and	r24, r24
    3b66:	2c f4       	brge	.+10     	; 0x3b72 <Thermostat_Update+0x8a>
		__ticks = 1;
    3b68:	81 e0       	ldi	r24, 0x01	; 1
    3b6a:	90 e0       	ldi	r25, 0x00	; 0
    3b6c:	9a a3       	std	Y+34, r25	; 0x22
    3b6e:	89 a3       	std	Y+33, r24	; 0x21
    3b70:	3f c0       	rjmp	.+126    	; 0x3bf0 <Thermostat_Update+0x108>
	else if (__tmp > 65535)
    3b72:	6b a1       	ldd	r22, Y+35	; 0x23
    3b74:	7c a1       	ldd	r23, Y+36	; 0x24
    3b76:	8d a1       	ldd	r24, Y+37	; 0x25
    3b78:	9e a1       	ldd	r25, Y+38	; 0x26
    3b7a:	20 e0       	ldi	r18, 0x00	; 0
    3b7c:	3f ef       	ldi	r19, 0xFF	; 255
    3b7e:	4f e7       	ldi	r20, 0x7F	; 127
    3b80:	57 e4       	ldi	r21, 0x47	; 71
    3b82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b86:	18 16       	cp	r1, r24
    3b88:	4c f5       	brge	.+82     	; 0x3bdc <Thermostat_Update+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b8a:	6f a1       	ldd	r22, Y+39	; 0x27
    3b8c:	78 a5       	ldd	r23, Y+40	; 0x28
    3b8e:	89 a5       	ldd	r24, Y+41	; 0x29
    3b90:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b92:	20 e0       	ldi	r18, 0x00	; 0
    3b94:	30 e0       	ldi	r19, 0x00	; 0
    3b96:	40 e2       	ldi	r20, 0x20	; 32
    3b98:	51 e4       	ldi	r21, 0x41	; 65
    3b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b9e:	dc 01       	movw	r26, r24
    3ba0:	cb 01       	movw	r24, r22
    3ba2:	bc 01       	movw	r22, r24
    3ba4:	cd 01       	movw	r24, r26
    3ba6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3baa:	dc 01       	movw	r26, r24
    3bac:	cb 01       	movw	r24, r22
    3bae:	9a a3       	std	Y+34, r25	; 0x22
    3bb0:	89 a3       	std	Y+33, r24	; 0x21
    3bb2:	0f c0       	rjmp	.+30     	; 0x3bd2 <Thermostat_Update+0xea>
    3bb4:	88 ec       	ldi	r24, 0xC8	; 200
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	98 a3       	std	Y+32, r25	; 0x20
    3bba:	8f 8f       	std	Y+31, r24	; 0x1f
    3bbc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3bbe:	98 a1       	ldd	r25, Y+32	; 0x20
    3bc0:	01 97       	sbiw	r24, 0x01	; 1
    3bc2:	f1 f7       	brne	.-4      	; 0x3bc0 <Thermostat_Update+0xd8>
    3bc4:	98 a3       	std	Y+32, r25	; 0x20
    3bc6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bc8:	89 a1       	ldd	r24, Y+33	; 0x21
    3bca:	9a a1       	ldd	r25, Y+34	; 0x22
    3bcc:	01 97       	sbiw	r24, 0x01	; 1
    3bce:	9a a3       	std	Y+34, r25	; 0x22
    3bd0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bd2:	89 a1       	ldd	r24, Y+33	; 0x21
    3bd4:	9a a1       	ldd	r25, Y+34	; 0x22
    3bd6:	00 97       	sbiw	r24, 0x00	; 0
    3bd8:	69 f7       	brne	.-38     	; 0x3bb4 <Thermostat_Update+0xcc>
    3bda:	14 c0       	rjmp	.+40     	; 0x3c04 <Thermostat_Update+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bdc:	6b a1       	ldd	r22, Y+35	; 0x23
    3bde:	7c a1       	ldd	r23, Y+36	; 0x24
    3be0:	8d a1       	ldd	r24, Y+37	; 0x25
    3be2:	9e a1       	ldd	r25, Y+38	; 0x26
    3be4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3be8:	dc 01       	movw	r26, r24
    3bea:	cb 01       	movw	r24, r22
    3bec:	9a a3       	std	Y+34, r25	; 0x22
    3bee:	89 a3       	std	Y+33, r24	; 0x21
    3bf0:	89 a1       	ldd	r24, Y+33	; 0x21
    3bf2:	9a a1       	ldd	r25, Y+34	; 0x22
    3bf4:	9e 8f       	std	Y+30, r25	; 0x1e
    3bf6:	8d 8f       	std	Y+29, r24	; 0x1d
    3bf8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3bfa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3bfc:	01 97       	sbiw	r24, 0x01	; 1
    3bfe:	f1 f7       	brne	.-4      	; 0x3bfc <Thermostat_Update+0x114>
    3c00:	9e 8f       	std	Y+30, r25	; 0x1e
    3c02:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(500); /* Press time */
	KeyPad_getPressedKey(&u8KeyBuffer[1]);
    3c04:	ce 01       	movw	r24, r28
    3c06:	8d 96       	adiw	r24, 0x2d	; 45
    3c08:	01 96       	adiw	r24, 0x01	; 1
    3c0a:	0e 94 1b 1b 	call	0x3636	; 0x3636 <KeyPad_getPressedKey>
    3c0e:	80 e0       	ldi	r24, 0x00	; 0
    3c10:	90 e0       	ldi	r25, 0x00	; 0
    3c12:	aa ef       	ldi	r26, 0xFA	; 250
    3c14:	b3 e4       	ldi	r27, 0x43	; 67
    3c16:	89 8f       	std	Y+25, r24	; 0x19
    3c18:	9a 8f       	std	Y+26, r25	; 0x1a
    3c1a:	ab 8f       	std	Y+27, r26	; 0x1b
    3c1c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c1e:	69 8d       	ldd	r22, Y+25	; 0x19
    3c20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c26:	20 e0       	ldi	r18, 0x00	; 0
    3c28:	30 e0       	ldi	r19, 0x00	; 0
    3c2a:	4a ef       	ldi	r20, 0xFA	; 250
    3c2c:	54 e4       	ldi	r21, 0x44	; 68
    3c2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c32:	dc 01       	movw	r26, r24
    3c34:	cb 01       	movw	r24, r22
    3c36:	8d 8b       	std	Y+21, r24	; 0x15
    3c38:	9e 8b       	std	Y+22, r25	; 0x16
    3c3a:	af 8b       	std	Y+23, r26	; 0x17
    3c3c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3c3e:	6d 89       	ldd	r22, Y+21	; 0x15
    3c40:	7e 89       	ldd	r23, Y+22	; 0x16
    3c42:	8f 89       	ldd	r24, Y+23	; 0x17
    3c44:	98 8d       	ldd	r25, Y+24	; 0x18
    3c46:	20 e0       	ldi	r18, 0x00	; 0
    3c48:	30 e0       	ldi	r19, 0x00	; 0
    3c4a:	40 e8       	ldi	r20, 0x80	; 128
    3c4c:	5f e3       	ldi	r21, 0x3F	; 63
    3c4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c52:	88 23       	and	r24, r24
    3c54:	2c f4       	brge	.+10     	; 0x3c60 <Thermostat_Update+0x178>
		__ticks = 1;
    3c56:	81 e0       	ldi	r24, 0x01	; 1
    3c58:	90 e0       	ldi	r25, 0x00	; 0
    3c5a:	9c 8b       	std	Y+20, r25	; 0x14
    3c5c:	8b 8b       	std	Y+19, r24	; 0x13
    3c5e:	3f c0       	rjmp	.+126    	; 0x3cde <Thermostat_Update+0x1f6>
	else if (__tmp > 65535)
    3c60:	6d 89       	ldd	r22, Y+21	; 0x15
    3c62:	7e 89       	ldd	r23, Y+22	; 0x16
    3c64:	8f 89       	ldd	r24, Y+23	; 0x17
    3c66:	98 8d       	ldd	r25, Y+24	; 0x18
    3c68:	20 e0       	ldi	r18, 0x00	; 0
    3c6a:	3f ef       	ldi	r19, 0xFF	; 255
    3c6c:	4f e7       	ldi	r20, 0x7F	; 127
    3c6e:	57 e4       	ldi	r21, 0x47	; 71
    3c70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c74:	18 16       	cp	r1, r24
    3c76:	4c f5       	brge	.+82     	; 0x3cca <Thermostat_Update+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c78:	69 8d       	ldd	r22, Y+25	; 0x19
    3c7a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3c7c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3c7e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3c80:	20 e0       	ldi	r18, 0x00	; 0
    3c82:	30 e0       	ldi	r19, 0x00	; 0
    3c84:	40 e2       	ldi	r20, 0x20	; 32
    3c86:	51 e4       	ldi	r21, 0x41	; 65
    3c88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c8c:	dc 01       	movw	r26, r24
    3c8e:	cb 01       	movw	r24, r22
    3c90:	bc 01       	movw	r22, r24
    3c92:	cd 01       	movw	r24, r26
    3c94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c98:	dc 01       	movw	r26, r24
    3c9a:	cb 01       	movw	r24, r22
    3c9c:	9c 8b       	std	Y+20, r25	; 0x14
    3c9e:	8b 8b       	std	Y+19, r24	; 0x13
    3ca0:	0f c0       	rjmp	.+30     	; 0x3cc0 <Thermostat_Update+0x1d8>
    3ca2:	88 ec       	ldi	r24, 0xC8	; 200
    3ca4:	90 e0       	ldi	r25, 0x00	; 0
    3ca6:	9a 8b       	std	Y+18, r25	; 0x12
    3ca8:	89 8b       	std	Y+17, r24	; 0x11
    3caa:	89 89       	ldd	r24, Y+17	; 0x11
    3cac:	9a 89       	ldd	r25, Y+18	; 0x12
    3cae:	01 97       	sbiw	r24, 0x01	; 1
    3cb0:	f1 f7       	brne	.-4      	; 0x3cae <Thermostat_Update+0x1c6>
    3cb2:	9a 8b       	std	Y+18, r25	; 0x12
    3cb4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cb6:	8b 89       	ldd	r24, Y+19	; 0x13
    3cb8:	9c 89       	ldd	r25, Y+20	; 0x14
    3cba:	01 97       	sbiw	r24, 0x01	; 1
    3cbc:	9c 8b       	std	Y+20, r25	; 0x14
    3cbe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cc0:	8b 89       	ldd	r24, Y+19	; 0x13
    3cc2:	9c 89       	ldd	r25, Y+20	; 0x14
    3cc4:	00 97       	sbiw	r24, 0x00	; 0
    3cc6:	69 f7       	brne	.-38     	; 0x3ca2 <Thermostat_Update+0x1ba>
    3cc8:	14 c0       	rjmp	.+40     	; 0x3cf2 <Thermostat_Update+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cca:	6d 89       	ldd	r22, Y+21	; 0x15
    3ccc:	7e 89       	ldd	r23, Y+22	; 0x16
    3cce:	8f 89       	ldd	r24, Y+23	; 0x17
    3cd0:	98 8d       	ldd	r25, Y+24	; 0x18
    3cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cd6:	dc 01       	movw	r26, r24
    3cd8:	cb 01       	movw	r24, r22
    3cda:	9c 8b       	std	Y+20, r25	; 0x14
    3cdc:	8b 8b       	std	Y+19, r24	; 0x13
    3cde:	8b 89       	ldd	r24, Y+19	; 0x13
    3ce0:	9c 89       	ldd	r25, Y+20	; 0x14
    3ce2:	98 8b       	std	Y+16, r25	; 0x10
    3ce4:	8f 87       	std	Y+15, r24	; 0x0f
    3ce6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ce8:	98 89       	ldd	r25, Y+16	; 0x10
    3cea:	01 97       	sbiw	r24, 0x01	; 1
    3cec:	f1 f7       	brne	.-4      	; 0x3cea <Thermostat_Update+0x202>
    3cee:	98 8b       	std	Y+16, r25	; 0x10
    3cf0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500); /* Press time */
	KeyPad_getPressedKey(&u8Key);
    3cf2:	ce 01       	movw	r24, r28
    3cf4:	8f 96       	adiw	r24, 0x2f	; 47
    3cf6:	0e 94 1b 1b 	call	0x3636	; 0x3636 <KeyPad_getPressedKey>
    3cfa:	80 e0       	ldi	r24, 0x00	; 0
    3cfc:	90 e0       	ldi	r25, 0x00	; 0
    3cfe:	aa ef       	ldi	r26, 0xFA	; 250
    3d00:	b3 e4       	ldi	r27, 0x43	; 67
    3d02:	8b 87       	std	Y+11, r24	; 0x0b
    3d04:	9c 87       	std	Y+12, r25	; 0x0c
    3d06:	ad 87       	std	Y+13, r26	; 0x0d
    3d08:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d0a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d0c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d0e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d10:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d12:	20 e0       	ldi	r18, 0x00	; 0
    3d14:	30 e0       	ldi	r19, 0x00	; 0
    3d16:	4a ef       	ldi	r20, 0xFA	; 250
    3d18:	54 e4       	ldi	r21, 0x44	; 68
    3d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d1e:	dc 01       	movw	r26, r24
    3d20:	cb 01       	movw	r24, r22
    3d22:	8f 83       	std	Y+7, r24	; 0x07
    3d24:	98 87       	std	Y+8, r25	; 0x08
    3d26:	a9 87       	std	Y+9, r26	; 0x09
    3d28:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3d2a:	6f 81       	ldd	r22, Y+7	; 0x07
    3d2c:	78 85       	ldd	r23, Y+8	; 0x08
    3d2e:	89 85       	ldd	r24, Y+9	; 0x09
    3d30:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d32:	20 e0       	ldi	r18, 0x00	; 0
    3d34:	30 e0       	ldi	r19, 0x00	; 0
    3d36:	40 e8       	ldi	r20, 0x80	; 128
    3d38:	5f e3       	ldi	r21, 0x3F	; 63
    3d3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d3e:	88 23       	and	r24, r24
    3d40:	2c f4       	brge	.+10     	; 0x3d4c <Thermostat_Update+0x264>
		__ticks = 1;
    3d42:	81 e0       	ldi	r24, 0x01	; 1
    3d44:	90 e0       	ldi	r25, 0x00	; 0
    3d46:	9e 83       	std	Y+6, r25	; 0x06
    3d48:	8d 83       	std	Y+5, r24	; 0x05
    3d4a:	3f c0       	rjmp	.+126    	; 0x3dca <Thermostat_Update+0x2e2>
	else if (__tmp > 65535)
    3d4c:	6f 81       	ldd	r22, Y+7	; 0x07
    3d4e:	78 85       	ldd	r23, Y+8	; 0x08
    3d50:	89 85       	ldd	r24, Y+9	; 0x09
    3d52:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d54:	20 e0       	ldi	r18, 0x00	; 0
    3d56:	3f ef       	ldi	r19, 0xFF	; 255
    3d58:	4f e7       	ldi	r20, 0x7F	; 127
    3d5a:	57 e4       	ldi	r21, 0x47	; 71
    3d5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d60:	18 16       	cp	r1, r24
    3d62:	4c f5       	brge	.+82     	; 0x3db6 <Thermostat_Update+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d64:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d66:	7c 85       	ldd	r23, Y+12	; 0x0c
    3d68:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d6c:	20 e0       	ldi	r18, 0x00	; 0
    3d6e:	30 e0       	ldi	r19, 0x00	; 0
    3d70:	40 e2       	ldi	r20, 0x20	; 32
    3d72:	51 e4       	ldi	r21, 0x41	; 65
    3d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d78:	dc 01       	movw	r26, r24
    3d7a:	cb 01       	movw	r24, r22
    3d7c:	bc 01       	movw	r22, r24
    3d7e:	cd 01       	movw	r24, r26
    3d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d84:	dc 01       	movw	r26, r24
    3d86:	cb 01       	movw	r24, r22
    3d88:	9e 83       	std	Y+6, r25	; 0x06
    3d8a:	8d 83       	std	Y+5, r24	; 0x05
    3d8c:	0f c0       	rjmp	.+30     	; 0x3dac <Thermostat_Update+0x2c4>
    3d8e:	88 ec       	ldi	r24, 0xC8	; 200
    3d90:	90 e0       	ldi	r25, 0x00	; 0
    3d92:	9c 83       	std	Y+4, r25	; 0x04
    3d94:	8b 83       	std	Y+3, r24	; 0x03
    3d96:	8b 81       	ldd	r24, Y+3	; 0x03
    3d98:	9c 81       	ldd	r25, Y+4	; 0x04
    3d9a:	01 97       	sbiw	r24, 0x01	; 1
    3d9c:	f1 f7       	brne	.-4      	; 0x3d9a <Thermostat_Update+0x2b2>
    3d9e:	9c 83       	std	Y+4, r25	; 0x04
    3da0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3da2:	8d 81       	ldd	r24, Y+5	; 0x05
    3da4:	9e 81       	ldd	r25, Y+6	; 0x06
    3da6:	01 97       	sbiw	r24, 0x01	; 1
    3da8:	9e 83       	std	Y+6, r25	; 0x06
    3daa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dac:	8d 81       	ldd	r24, Y+5	; 0x05
    3dae:	9e 81       	ldd	r25, Y+6	; 0x06
    3db0:	00 97       	sbiw	r24, 0x00	; 0
    3db2:	69 f7       	brne	.-38     	; 0x3d8e <Thermostat_Update+0x2a6>
    3db4:	14 c0       	rjmp	.+40     	; 0x3dde <Thermostat_Update+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3db6:	6f 81       	ldd	r22, Y+7	; 0x07
    3db8:	78 85       	ldd	r23, Y+8	; 0x08
    3dba:	89 85       	ldd	r24, Y+9	; 0x09
    3dbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dc2:	dc 01       	movw	r26, r24
    3dc4:	cb 01       	movw	r24, r22
    3dc6:	9e 83       	std	Y+6, r25	; 0x06
    3dc8:	8d 83       	std	Y+5, r24	; 0x05
    3dca:	8d 81       	ldd	r24, Y+5	; 0x05
    3dcc:	9e 81       	ldd	r25, Y+6	; 0x06
    3dce:	9a 83       	std	Y+2, r25	; 0x02
    3dd0:	89 83       	std	Y+1, r24	; 0x01
    3dd2:	89 81       	ldd	r24, Y+1	; 0x01
    3dd4:	9a 81       	ldd	r25, Y+2	; 0x02
    3dd6:	01 97       	sbiw	r24, 0x01	; 1
    3dd8:	f1 f7       	brne	.-4      	; 0x3dd6 <Thermostat_Update+0x2ee>
    3dda:	9a 83       	std	Y+2, r25	; 0x02
    3ddc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500); /* Press time */
	if(u8Key=='=')
    3dde:	8f a5       	ldd	r24, Y+47	; 0x2f
    3de0:	8d 33       	cpi	r24, 0x3D	; 61
    3de2:	a1 f4       	brne	.+40     	; 0x3e0c <Thermostat_Update+0x324>
	{
		u16DesiredTemp = ((u8KeyBuffer[0])*10) + (u8KeyBuffer[1]);
    3de4:	8d a5       	ldd	r24, Y+45	; 0x2d
    3de6:	88 2f       	mov	r24, r24
    3de8:	90 e0       	ldi	r25, 0x00	; 0
    3dea:	9c 01       	movw	r18, r24
    3dec:	22 0f       	add	r18, r18
    3dee:	33 1f       	adc	r19, r19
    3df0:	c9 01       	movw	r24, r18
    3df2:	88 0f       	add	r24, r24
    3df4:	99 1f       	adc	r25, r25
    3df6:	88 0f       	add	r24, r24
    3df8:	99 1f       	adc	r25, r25
    3dfa:	28 0f       	add	r18, r24
    3dfc:	39 1f       	adc	r19, r25
    3dfe:	8e a5       	ldd	r24, Y+46	; 0x2e
    3e00:	88 2f       	mov	r24, r24
    3e02:	90 e0       	ldi	r25, 0x00	; 0
    3e04:	82 0f       	add	r24, r18
    3e06:	93 1f       	adc	r25, r19
    3e08:	9c a7       	std	Y+44, r25	; 0x2c
    3e0a:	8b a7       	std	Y+43, r24	; 0x2b
//		LCD_goToRowColumn(3, 0);
//		LCD_intgerToString(u16DesiredTemp);
	}

	/* LCD */
	LCD_goToRowColumn(1, 13);
    3e0c:	81 e0       	ldi	r24, 0x01	; 1
    3e0e:	6d e0       	ldi	r22, 0x0D	; 13
    3e10:	0e 94 93 1a 	call	0x3526	; 0x3526 <LCD_goToRowColumn>
	LCD_intgerToString(u16DesiredTemp);
    3e14:	8b a5       	ldd	r24, Y+43	; 0x2b
    3e16:	9c a5       	ldd	r25, Y+44	; 0x2c
    3e18:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <LCD_intgerToString>

	/* Check if the current is less or more than the desired temp */
	if(u16CurrentTemp <= u16DesiredTemp)
    3e1c:	28 a9       	ldd	r18, Y+48	; 0x30
    3e1e:	39 a9       	ldd	r19, Y+49	; 0x31
    3e20:	8b a5       	ldd	r24, Y+43	; 0x2b
    3e22:	9c a5       	ldd	r25, Y+44	; 0x2c
    3e24:	82 17       	cp	r24, r18
    3e26:	93 07       	cpc	r25, r19
    3e28:	28 f0       	brcs	.+10     	; 0x3e34 <Thermostat_Update+0x34c>
	{
		DIO_Write(MOTORIEN1, LOW);
    3e2a:	8b e1       	ldi	r24, 0x1B	; 27
    3e2c:	60 e0       	ldi	r22, 0x00	; 0
    3e2e:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
    3e32:	04 c0       	rjmp	.+8      	; 0x3e3c <Thermostat_Update+0x354>
	}//end if
	else
	{
		DIO_Write(MOTORIEN1, HIGH);
    3e34:	8b e1       	ldi	r24, 0x1B	; 27
    3e36:	61 e0       	ldi	r22, 0x01	; 1
    3e38:	0e 94 0a 0d 	call	0x1a14	; 0x1a14 <DIO_Write>
	}//end else
}//end Thermostat_Update
    3e3c:	e1 96       	adiw	r28, 0x31	; 49
    3e3e:	0f b6       	in	r0, 0x3f	; 63
    3e40:	f8 94       	cli
    3e42:	de bf       	out	0x3e, r29	; 62
    3e44:	0f be       	out	0x3f, r0	; 63
    3e46:	cd bf       	out	0x3d, r28	; 61
    3e48:	cf 91       	pop	r28
    3e4a:	df 91       	pop	r29
    3e4c:	08 95       	ret

00003e4e <main>:
#include "../MCAL/UART/UART.h"
#include <avr/delay.h>

/*- MAIN FUNCTION---------------------------------------------*/
int main(void)
{
    3e4e:	df 93       	push	r29
    3e50:	cf 93       	push	r28
    3e52:	cd b7       	in	r28, 0x3d	; 61
    3e54:	de b7       	in	r29, 0x3e	; 62
	Thermostat_Init();
    3e56:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <Thermostat_Init>

	while(1)
	{
		Thermostat_Update();
    3e5a:	0e 94 74 1d 	call	0x3ae8	; 0x3ae8 <Thermostat_Update>
    3e5e:	fd cf       	rjmp	.-6      	; 0x3e5a <main+0xc>

00003e60 <__mulsi3>:
    3e60:	62 9f       	mul	r22, r18
    3e62:	d0 01       	movw	r26, r0
    3e64:	73 9f       	mul	r23, r19
    3e66:	f0 01       	movw	r30, r0
    3e68:	82 9f       	mul	r24, r18
    3e6a:	e0 0d       	add	r30, r0
    3e6c:	f1 1d       	adc	r31, r1
    3e6e:	64 9f       	mul	r22, r20
    3e70:	e0 0d       	add	r30, r0
    3e72:	f1 1d       	adc	r31, r1
    3e74:	92 9f       	mul	r25, r18
    3e76:	f0 0d       	add	r31, r0
    3e78:	83 9f       	mul	r24, r19
    3e7a:	f0 0d       	add	r31, r0
    3e7c:	74 9f       	mul	r23, r20
    3e7e:	f0 0d       	add	r31, r0
    3e80:	65 9f       	mul	r22, r21
    3e82:	f0 0d       	add	r31, r0
    3e84:	99 27       	eor	r25, r25
    3e86:	72 9f       	mul	r23, r18
    3e88:	b0 0d       	add	r27, r0
    3e8a:	e1 1d       	adc	r30, r1
    3e8c:	f9 1f       	adc	r31, r25
    3e8e:	63 9f       	mul	r22, r19
    3e90:	b0 0d       	add	r27, r0
    3e92:	e1 1d       	adc	r30, r1
    3e94:	f9 1f       	adc	r31, r25
    3e96:	bd 01       	movw	r22, r26
    3e98:	cf 01       	movw	r24, r30
    3e9a:	11 24       	eor	r1, r1
    3e9c:	08 95       	ret

00003e9e <__udivmodhi4>:
    3e9e:	aa 1b       	sub	r26, r26
    3ea0:	bb 1b       	sub	r27, r27
    3ea2:	51 e1       	ldi	r21, 0x11	; 17
    3ea4:	07 c0       	rjmp	.+14     	; 0x3eb4 <__udivmodhi4_ep>

00003ea6 <__udivmodhi4_loop>:
    3ea6:	aa 1f       	adc	r26, r26
    3ea8:	bb 1f       	adc	r27, r27
    3eaa:	a6 17       	cp	r26, r22
    3eac:	b7 07       	cpc	r27, r23
    3eae:	10 f0       	brcs	.+4      	; 0x3eb4 <__udivmodhi4_ep>
    3eb0:	a6 1b       	sub	r26, r22
    3eb2:	b7 0b       	sbc	r27, r23

00003eb4 <__udivmodhi4_ep>:
    3eb4:	88 1f       	adc	r24, r24
    3eb6:	99 1f       	adc	r25, r25
    3eb8:	5a 95       	dec	r21
    3eba:	a9 f7       	brne	.-22     	; 0x3ea6 <__udivmodhi4_loop>
    3ebc:	80 95       	com	r24
    3ebe:	90 95       	com	r25
    3ec0:	bc 01       	movw	r22, r24
    3ec2:	cd 01       	movw	r24, r26
    3ec4:	08 95       	ret

00003ec6 <__divmodhi4>:
    3ec6:	97 fb       	bst	r25, 7
    3ec8:	09 2e       	mov	r0, r25
    3eca:	07 26       	eor	r0, r23
    3ecc:	0a d0       	rcall	.+20     	; 0x3ee2 <__divmodhi4_neg1>
    3ece:	77 fd       	sbrc	r23, 7
    3ed0:	04 d0       	rcall	.+8      	; 0x3eda <__divmodhi4_neg2>
    3ed2:	e5 df       	rcall	.-54     	; 0x3e9e <__udivmodhi4>
    3ed4:	06 d0       	rcall	.+12     	; 0x3ee2 <__divmodhi4_neg1>
    3ed6:	00 20       	and	r0, r0
    3ed8:	1a f4       	brpl	.+6      	; 0x3ee0 <__divmodhi4_exit>

00003eda <__divmodhi4_neg2>:
    3eda:	70 95       	com	r23
    3edc:	61 95       	neg	r22
    3ede:	7f 4f       	sbci	r23, 0xFF	; 255

00003ee0 <__divmodhi4_exit>:
    3ee0:	08 95       	ret

00003ee2 <__divmodhi4_neg1>:
    3ee2:	f6 f7       	brtc	.-4      	; 0x3ee0 <__divmodhi4_exit>
    3ee4:	90 95       	com	r25
    3ee6:	81 95       	neg	r24
    3ee8:	9f 4f       	sbci	r25, 0xFF	; 255
    3eea:	08 95       	ret

00003eec <__prologue_saves__>:
    3eec:	2f 92       	push	r2
    3eee:	3f 92       	push	r3
    3ef0:	4f 92       	push	r4
    3ef2:	5f 92       	push	r5
    3ef4:	6f 92       	push	r6
    3ef6:	7f 92       	push	r7
    3ef8:	8f 92       	push	r8
    3efa:	9f 92       	push	r9
    3efc:	af 92       	push	r10
    3efe:	bf 92       	push	r11
    3f00:	cf 92       	push	r12
    3f02:	df 92       	push	r13
    3f04:	ef 92       	push	r14
    3f06:	ff 92       	push	r15
    3f08:	0f 93       	push	r16
    3f0a:	1f 93       	push	r17
    3f0c:	cf 93       	push	r28
    3f0e:	df 93       	push	r29
    3f10:	cd b7       	in	r28, 0x3d	; 61
    3f12:	de b7       	in	r29, 0x3e	; 62
    3f14:	ca 1b       	sub	r28, r26
    3f16:	db 0b       	sbc	r29, r27
    3f18:	0f b6       	in	r0, 0x3f	; 63
    3f1a:	f8 94       	cli
    3f1c:	de bf       	out	0x3e, r29	; 62
    3f1e:	0f be       	out	0x3f, r0	; 63
    3f20:	cd bf       	out	0x3d, r28	; 61
    3f22:	09 94       	ijmp

00003f24 <__epilogue_restores__>:
    3f24:	2a 88       	ldd	r2, Y+18	; 0x12
    3f26:	39 88       	ldd	r3, Y+17	; 0x11
    3f28:	48 88       	ldd	r4, Y+16	; 0x10
    3f2a:	5f 84       	ldd	r5, Y+15	; 0x0f
    3f2c:	6e 84       	ldd	r6, Y+14	; 0x0e
    3f2e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3f30:	8c 84       	ldd	r8, Y+12	; 0x0c
    3f32:	9b 84       	ldd	r9, Y+11	; 0x0b
    3f34:	aa 84       	ldd	r10, Y+10	; 0x0a
    3f36:	b9 84       	ldd	r11, Y+9	; 0x09
    3f38:	c8 84       	ldd	r12, Y+8	; 0x08
    3f3a:	df 80       	ldd	r13, Y+7	; 0x07
    3f3c:	ee 80       	ldd	r14, Y+6	; 0x06
    3f3e:	fd 80       	ldd	r15, Y+5	; 0x05
    3f40:	0c 81       	ldd	r16, Y+4	; 0x04
    3f42:	1b 81       	ldd	r17, Y+3	; 0x03
    3f44:	aa 81       	ldd	r26, Y+2	; 0x02
    3f46:	b9 81       	ldd	r27, Y+1	; 0x01
    3f48:	ce 0f       	add	r28, r30
    3f4a:	d1 1d       	adc	r29, r1
    3f4c:	0f b6       	in	r0, 0x3f	; 63
    3f4e:	f8 94       	cli
    3f50:	de bf       	out	0x3e, r29	; 62
    3f52:	0f be       	out	0x3f, r0	; 63
    3f54:	cd bf       	out	0x3d, r28	; 61
    3f56:	ed 01       	movw	r28, r26
    3f58:	08 95       	ret

00003f5a <itoa>:
    3f5a:	fb 01       	movw	r30, r22
    3f5c:	9f 01       	movw	r18, r30
    3f5e:	e8 94       	clt
    3f60:	42 30       	cpi	r20, 0x02	; 2
    3f62:	c4 f0       	brlt	.+48     	; 0x3f94 <itoa+0x3a>
    3f64:	45 32       	cpi	r20, 0x25	; 37
    3f66:	b4 f4       	brge	.+44     	; 0x3f94 <itoa+0x3a>
    3f68:	4a 30       	cpi	r20, 0x0A	; 10
    3f6a:	29 f4       	brne	.+10     	; 0x3f76 <itoa+0x1c>
    3f6c:	97 fb       	bst	r25, 7
    3f6e:	1e f4       	brtc	.+6      	; 0x3f76 <itoa+0x1c>
    3f70:	90 95       	com	r25
    3f72:	81 95       	neg	r24
    3f74:	9f 4f       	sbci	r25, 0xFF	; 255
    3f76:	64 2f       	mov	r22, r20
    3f78:	77 27       	eor	r23, r23
    3f7a:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <__udivmodhi4>
    3f7e:	80 5d       	subi	r24, 0xD0	; 208
    3f80:	8a 33       	cpi	r24, 0x3A	; 58
    3f82:	0c f0       	brlt	.+2      	; 0x3f86 <itoa+0x2c>
    3f84:	89 5d       	subi	r24, 0xD9	; 217
    3f86:	81 93       	st	Z+, r24
    3f88:	cb 01       	movw	r24, r22
    3f8a:	00 97       	sbiw	r24, 0x00	; 0
    3f8c:	a1 f7       	brne	.-24     	; 0x3f76 <itoa+0x1c>
    3f8e:	16 f4       	brtc	.+4      	; 0x3f94 <itoa+0x3a>
    3f90:	5d e2       	ldi	r21, 0x2D	; 45
    3f92:	51 93       	st	Z+, r21
    3f94:	10 82       	st	Z, r1
    3f96:	c9 01       	movw	r24, r18
    3f98:	0c 94 ce 1f 	jmp	0x3f9c	; 0x3f9c <strrev>

00003f9c <strrev>:
    3f9c:	dc 01       	movw	r26, r24
    3f9e:	fc 01       	movw	r30, r24
    3fa0:	67 2f       	mov	r22, r23
    3fa2:	71 91       	ld	r23, Z+
    3fa4:	77 23       	and	r23, r23
    3fa6:	e1 f7       	brne	.-8      	; 0x3fa0 <strrev+0x4>
    3fa8:	32 97       	sbiw	r30, 0x02	; 2
    3faa:	04 c0       	rjmp	.+8      	; 0x3fb4 <strrev+0x18>
    3fac:	7c 91       	ld	r23, X
    3fae:	6d 93       	st	X+, r22
    3fb0:	70 83       	st	Z, r23
    3fb2:	62 91       	ld	r22, -Z
    3fb4:	ae 17       	cp	r26, r30
    3fb6:	bf 07       	cpc	r27, r31
    3fb8:	c8 f3       	brcs	.-14     	; 0x3fac <strrev+0x10>
    3fba:	08 95       	ret

00003fbc <_exit>:
    3fbc:	f8 94       	cli

00003fbe <__stop_program>:
    3fbe:	ff cf       	rjmp	.-2      	; 0x3fbe <__stop_program>
