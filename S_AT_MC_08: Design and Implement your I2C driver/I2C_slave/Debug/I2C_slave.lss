
I2C_slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000012a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004e  00800060  000012a2  00001316  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000f30  00000000  00000000  00001364  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000823  00000000  00000000  00002294  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ea       	ldi	r30, 0xA2	; 162
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3a       	cpi	r26, 0xAE	; 174
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 37 09 	call	0x126e	; 0x126e <main>
      7a:	0c 94 4f 09 	jmp	0x129e	; 0x129e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <TWI_initMatser>:
      82:	df 93       	push	r29
      84:	cf 93       	push	r28
      86:	cd b7       	in	r28, 0x3d	; 61
      88:	de b7       	in	r29, 0x3e	; 62
      8a:	a1 e2       	ldi	r26, 0x21	; 33
      8c:	b0 e0       	ldi	r27, 0x00	; 0
      8e:	e1 e2       	ldi	r30, 0x21	; 33
      90:	f0 e0       	ldi	r31, 0x00	; 0
      92:	80 81       	ld	r24, Z
      94:	8d 7f       	andi	r24, 0xFD	; 253
      96:	8c 93       	st	X, r24
      98:	a1 e2       	ldi	r26, 0x21	; 33
      9a:	b0 e0       	ldi	r27, 0x00	; 0
      9c:	e1 e2       	ldi	r30, 0x21	; 33
      9e:	f0 e0       	ldi	r31, 0x00	; 0
      a0:	80 81       	ld	r24, Z
      a2:	8e 7f       	andi	r24, 0xFE	; 254
      a4:	8c 93       	st	X, r24
      a6:	e0 e2       	ldi	r30, 0x20	; 32
      a8:	f0 e0       	ldi	r31, 0x00	; 0
      aa:	80 e2       	ldi	r24, 0x20	; 32
      ac:	80 83       	st	Z, r24
      ae:	81 e0       	ldi	r24, 0x01	; 1
      b0:	cf 91       	pop	r28
      b2:	df 91       	pop	r29
      b4:	08 95       	ret

000000b6 <TWI_initSlave>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to initialize the TWI slave
*************************************************************************************************/
enuErrorStatus_t TWI_initSlave(void)
{
      b6:	df 93       	push	r29
      b8:	cf 93       	push	r28
      ba:	cd b7       	in	r28, 0x3d	; 61
      bc:	de b7       	in	r29, 0x3e	; 62
	//set the address of the slave to be 0x01
	TWAR_R = 0x01<<1;
      be:	e2 e2       	ldi	r30, 0x22	; 34
      c0:	f0 e0       	ldi	r31, 0x00	; 0
      c2:	82 e0       	ldi	r24, 0x02	; 2
      c4:	80 83       	st	Z, r24

	return E_OK;
      c6:	81 e0       	ldi	r24, 0x01	; 1
}//end TWI_initSlave
      c8:	cf 91       	pop	r28
      ca:	df 91       	pop	r29
      cc:	08 95       	ret

000000ce <TWI_start>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to transmit start condition
*************************************************************************************************/
enuErrorStatus_t TWI_start(void)
{
      ce:	df 93       	push	r29
      d0:	cf 93       	push	r28
      d2:	0f 92       	push	r0
      d4:	cd b7       	in	r28, 0x3d	; 61
      d6:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR_R = (1 << TWINT_B) | (1 << TWSTA_B) | (1 << TWEN_B);
      d8:	e6 e5       	ldi	r30, 0x56	; 86
      da:	f0 e0       	ldi	r31, 0x00	; 0
      dc:	84 ea       	ldi	r24, 0xA4	; 164
      de:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(!GET_BIT(TWCR_R,TWINT_B));
      e0:	e6 e5       	ldi	r30, 0x56	; 86
      e2:	f0 e0       	ldi	r31, 0x00	; 0
      e4:	80 81       	ld	r24, Z
      e6:	88 23       	and	r24, r24
      e8:	dc f7       	brge	.-10     	; 0xe0 <TWI_start+0x12>

    //check if start bit is transmitted successfully
    if(TWI_getStatus() != TW_START)
      ea:	0e 94 3e 01 	call	0x27c	; 0x27c <TWI_getStatus>
      ee:	88 30       	cpi	r24, 0x08	; 8
      f0:	11 f0       	breq	.+4      	; 0xf6 <TWI_start+0x28>
    {
    	return E_ERROR;
      f2:	19 82       	std	Y+1, r1	; 0x01
      f4:	02 c0       	rjmp	.+4      	; 0xfa <TWI_start+0x2c>
    }
    return E_OK;
      f6:	81 e0       	ldi	r24, 0x01	; 1
      f8:	89 83       	std	Y+1, r24	; 0x01
      fa:	89 81       	ldd	r24, Y+1	; 0x01
}//end TWI_start
      fc:	0f 90       	pop	r0
      fe:	cf 91       	pop	r28
     100:	df 91       	pop	r29
     102:	08 95       	ret

00000104 <TWI_repeatedStart>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to transmit repeated start condition
*************************************************************************************************/
enuErrorStatus_t TWI_repeatedStart(void)
{
     104:	df 93       	push	r29
     106:	cf 93       	push	r28
     108:	0f 92       	push	r0
     10a:	cd b7       	in	r28, 0x3d	; 61
     10c:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR_R = (1 << TWINT_B) | (1 << TWSTA_B) | (1 << TWEN_B);
     10e:	e6 e5       	ldi	r30, 0x56	; 86
     110:	f0 e0       	ldi	r31, 0x00	; 0
     112:	84 ea       	ldi	r24, 0xA4	; 164
     114:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(!GET_BIT(TWCR_R,TWINT_B));
     116:	e6 e5       	ldi	r30, 0x56	; 86
     118:	f0 e0       	ldi	r31, 0x00	; 0
     11a:	80 81       	ld	r24, Z
     11c:	88 23       	and	r24, r24
     11e:	dc f7       	brge	.-10     	; 0x116 <TWI_repeatedStart+0x12>

    //check if start bit is transmitted successfully
    if(TWI_getStatus() != TW_REP_START)
     120:	0e 94 3e 01 	call	0x27c	; 0x27c <TWI_getStatus>
     124:	80 31       	cpi	r24, 0x10	; 16
     126:	11 f0       	breq	.+4      	; 0x12c <TWI_repeatedStart+0x28>
    {
    	return E_ERROR;
     128:	19 82       	std	Y+1, r1	; 0x01
     12a:	02 c0       	rjmp	.+4      	; 0x130 <TWI_repeatedStart+0x2c>
    }
    return E_OK;
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	89 83       	std	Y+1, r24	; 0x01
     130:	89 81       	ldd	r24, Y+1	; 0x01
}//end TWI_start
     132:	0f 90       	pop	r0
     134:	cf 91       	pop	r28
     136:	df 91       	pop	r29
     138:	08 95       	ret

0000013a <TWI_stop>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to transmit stop condition
*************************************************************************************************/
enuErrorStatus_t TWI_stop(void)
{
     13a:	df 93       	push	r29
     13c:	cf 93       	push	r28
     13e:	cd b7       	in	r28, 0x3d	; 61
     140:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR_R = (1 << TWINT_B) | (1 << TWSTO_B) | (1 << TWEN_B);
     142:	e6 e5       	ldi	r30, 0x56	; 86
     144:	f0 e0       	ldi	r31, 0x00	; 0
     146:	84 e9       	ldi	r24, 0x94	; 148
     148:	80 83       	st	Z, r24

    return E_OK;
     14a:	81 e0       	ldi	r24, 0x01	; 1
}//end TWI_stop
     14c:	cf 91       	pop	r28
     14e:	df 91       	pop	r29
     150:	08 95       	ret

00000152 <TWI_writeData>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to transmit data
*************************************************************************************************/
enuErrorStatus_t TWI_writeData(uint8_t u8Data)
{
     152:	df 93       	push	r29
     154:	cf 93       	push	r28
     156:	00 d0       	rcall	.+0      	; 0x158 <TWI_writeData+0x6>
     158:	cd b7       	in	r28, 0x3d	; 61
     15a:	de b7       	in	r29, 0x3e	; 62
     15c:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR_R = u8Data;
     15e:	e3 e2       	ldi	r30, 0x23	; 35
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	89 81       	ldd	r24, Y+1	; 0x01
     164:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR_R = (1 << TWINT_B) | (1 << TWEN_B);
     166:	e6 e5       	ldi	r30, 0x56	; 86
     168:	f0 e0       	ldi	r31, 0x00	; 0
     16a:	84 e8       	ldi	r24, 0x84	; 132
     16c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(!GET_BIT(TWCR_R,TWINT_B));
     16e:	e6 e5       	ldi	r30, 0x56	; 86
     170:	f0 e0       	ldi	r31, 0x00	; 0
     172:	80 81       	ld	r24, Z
     174:	88 23       	and	r24, r24
     176:	dc f7       	brge	.-10     	; 0x16e <TWI_writeData+0x1c>

    //check if data is transmitted successfully
    if(TWI_getStatus() != TW_MT_DATA_ACK)
     178:	0e 94 3e 01 	call	0x27c	; 0x27c <TWI_getStatus>
     17c:	88 32       	cpi	r24, 0x28	; 40
     17e:	11 f0       	breq	.+4      	; 0x184 <TWI_writeData+0x32>
    {
    	return E_ERROR;
     180:	1a 82       	std	Y+2, r1	; 0x02
     182:	02 c0       	rjmp	.+4      	; 0x188 <TWI_writeData+0x36>
    }
    return E_OK;
     184:	81 e0       	ldi	r24, 0x01	; 1
     186:	8a 83       	std	Y+2, r24	; 0x02
     188:	8a 81       	ldd	r24, Y+2	; 0x02
}//end TWI_writeData
     18a:	0f 90       	pop	r0
     18c:	0f 90       	pop	r0
     18e:	cf 91       	pop	r28
     190:	df 91       	pop	r29
     192:	08 95       	ret

00000194 <TWI_writeAddress>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to transmit address
*************************************************************************************************/
enuErrorStatus_t TWI_writeAddress(uint8_t u8Address)
{
     194:	df 93       	push	r29
     196:	cf 93       	push	r28
     198:	00 d0       	rcall	.+0      	; 0x19a <TWI_writeAddress+0x6>
     19a:	cd b7       	in	r28, 0x3d	; 61
     19c:	de b7       	in	r29, 0x3e	; 62
     19e:	89 83       	std	Y+1, r24	; 0x01
    /* Put address On TWI data Register */
    TWDR_R = u8Address<<1;
     1a0:	e3 e2       	ldi	r30, 0x23	; 35
     1a2:	f0 e0       	ldi	r31, 0x00	; 0
     1a4:	89 81       	ldd	r24, Y+1	; 0x01
     1a6:	88 0f       	add	r24, r24
     1a8:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR_R = (1 << TWINT_B) | (1 << TWEN_B);
     1aa:	e6 e5       	ldi	r30, 0x56	; 86
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	84 e8       	ldi	r24, 0x84	; 132
     1b0:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(!GET_BIT(TWCR_R,TWINT_B));
     1b2:	e6 e5       	ldi	r30, 0x56	; 86
     1b4:	f0 e0       	ldi	r31, 0x00	; 0
     1b6:	80 81       	ld	r24, Z
     1b8:	88 23       	and	r24, r24
     1ba:	dc f7       	brge	.-10     	; 0x1b2 <TWI_writeAddress+0x1e>

    //check if address is transmitted successfully
    if(TWI_getStatus() != TW_MT_SLA_W_ACK)
     1bc:	0e 94 3e 01 	call	0x27c	; 0x27c <TWI_getStatus>
     1c0:	88 31       	cpi	r24, 0x18	; 24
     1c2:	11 f0       	breq	.+4      	; 0x1c8 <TWI_writeAddress+0x34>
    {
    	return E_ERROR;
     1c4:	1a 82       	std	Y+2, r1	; 0x02
     1c6:	02 c0       	rjmp	.+4      	; 0x1cc <TWI_writeAddress+0x38>
    }
    return E_OK;
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	8a 83       	std	Y+2, r24	; 0x02
     1cc:	8a 81       	ldd	r24, Y+2	; 0x02
}//end TWI_writeAddress
     1ce:	0f 90       	pop	r0
     1d0:	0f 90       	pop	r0
     1d2:	cf 91       	pop	r28
     1d4:	df 91       	pop	r29
     1d6:	08 95       	ret

000001d8 <TWI_readDataWithACK>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to read data from slave with ACK
*************************************************************************************************/
enuErrorStatus_t TWI_readDataWithACK(uint8_t* pu8Data)
{
     1d8:	df 93       	push	r29
     1da:	cf 93       	push	r28
     1dc:	00 d0       	rcall	.+0      	; 0x1de <TWI_readDataWithACK+0x6>
     1de:	0f 92       	push	r0
     1e0:	cd b7       	in	r28, 0x3d	; 61
     1e2:	de b7       	in	r29, 0x3e	; 62
     1e4:	9a 83       	std	Y+2, r25	; 0x02
     1e6:	89 83       	std	Y+1, r24	; 0x01
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR_R = (1 << TWINT_B) | (1 << TWEN_B) | (1 << TWEA_B);
     1e8:	e6 e5       	ldi	r30, 0x56	; 86
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	84 ec       	ldi	r24, 0xC4	; 196
     1ee:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(!GET_BIT(TWCR_R,TWINT_B));
     1f0:	e6 e5       	ldi	r30, 0x56	; 86
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	80 81       	ld	r24, Z
     1f6:	88 23       	and	r24, r24
     1f8:	dc f7       	brge	.-10     	; 0x1f0 <TWI_readDataWithACK+0x18>

    /* Read Data */
    *pu8Data = TWDR_R;
     1fa:	e3 e2       	ldi	r30, 0x23	; 35
     1fc:	f0 e0       	ldi	r31, 0x00	; 0
     1fe:	80 81       	ld	r24, Z
     200:	e9 81       	ldd	r30, Y+1	; 0x01
     202:	fa 81       	ldd	r31, Y+2	; 0x02
     204:	80 83       	st	Z, r24

    //check if data is received successfully
    if(TWI_getStatus() != TW_MR_DATA_ACK)
     206:	0e 94 3e 01 	call	0x27c	; 0x27c <TWI_getStatus>
     20a:	80 35       	cpi	r24, 0x50	; 80
     20c:	11 f0       	breq	.+4      	; 0x212 <TWI_readDataWithACK+0x3a>
    {
    	return E_ERROR;
     20e:	1b 82       	std	Y+3, r1	; 0x03
     210:	08 c0       	rjmp	.+16     	; 0x222 <TWI_readDataWithACK+0x4a>
    }

    /* Read Data */
    *pu8Data = TWDR_R;
     212:	e3 e2       	ldi	r30, 0x23	; 35
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	80 81       	ld	r24, Z
     218:	e9 81       	ldd	r30, Y+1	; 0x01
     21a:	fa 81       	ldd	r31, Y+2	; 0x02
     21c:	80 83       	st	Z, r24

    return E_OK;
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	8b 83       	std	Y+3, r24	; 0x03
     222:	8b 81       	ldd	r24, Y+3	; 0x03
}//end TWI_readDataWithACK
     224:	0f 90       	pop	r0
     226:	0f 90       	pop	r0
     228:	0f 90       	pop	r0
     22a:	cf 91       	pop	r28
     22c:	df 91       	pop	r29
     22e:	08 95       	ret

00000230 <TWI_readDataWithNACK>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to read data from slave with NACK
*************************************************************************************************/
enuErrorStatus_t TWI_readDataWithNACK(uint8_t* pu8Data)
{
     230:	df 93       	push	r29
     232:	cf 93       	push	r28
     234:	00 d0       	rcall	.+0      	; 0x236 <TWI_readDataWithNACK+0x6>
     236:	0f 92       	push	r0
     238:	cd b7       	in	r28, 0x3d	; 61
     23a:	de b7       	in	r29, 0x3e	; 62
     23c:	9a 83       	std	Y+2, r25	; 0x02
     23e:	89 83       	std	Y+1, r24	; 0x01
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR_R = (1 << TWINT_B) | (1 << TWEN_B);
     240:	e6 e5       	ldi	r30, 0x56	; 86
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	84 e8       	ldi	r24, 0x84	; 132
     246:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(!GET_BIT(TWCR_R,TWINT_B));
     248:	e6 e5       	ldi	r30, 0x56	; 86
     24a:	f0 e0       	ldi	r31, 0x00	; 0
     24c:	80 81       	ld	r24, Z
     24e:	88 23       	and	r24, r24
     250:	dc f7       	brge	.-10     	; 0x248 <TWI_readDataWithNACK+0x18>

    //check if data is received successfully
    if(TWI_getStatus() != TW_MR_DATA_NACK)
     252:	0e 94 3e 01 	call	0x27c	; 0x27c <TWI_getStatus>
     256:	88 35       	cpi	r24, 0x58	; 88
     258:	11 f0       	breq	.+4      	; 0x25e <TWI_readDataWithNACK+0x2e>
    {
    	return E_ERROR;
     25a:	1b 82       	std	Y+3, r1	; 0x03
     25c:	08 c0       	rjmp	.+16     	; 0x26e <TWI_readDataWithNACK+0x3e>
    }

    /* Read Data */
    *pu8Data = TWDR_R;
     25e:	e3 e2       	ldi	r30, 0x23	; 35
     260:	f0 e0       	ldi	r31, 0x00	; 0
     262:	80 81       	ld	r24, Z
     264:	e9 81       	ldd	r30, Y+1	; 0x01
     266:	fa 81       	ldd	r31, Y+2	; 0x02
     268:	80 83       	st	Z, r24

    return E_OK;
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	8b 83       	std	Y+3, r24	; 0x03
     26e:	8b 81       	ldd	r24, Y+3	; 0x03
}//end TWI_readDataWithNACK
     270:	0f 90       	pop	r0
     272:	0f 90       	pop	r0
     274:	0f 90       	pop	r0
     276:	cf 91       	pop	r28
     278:	df 91       	pop	r29
     27a:	08 95       	ret

0000027c <TWI_getStatus>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to get the status of the transmission
*************************************************************************************************/
uint8_t TWI_getStatus(void)
{
     27c:	df 93       	push	r29
     27e:	cf 93       	push	r28
     280:	0f 92       	push	r0
     282:	cd b7       	in	r28, 0x3d	; 61
     284:	de b7       	in	r29, 0x3e	; 62
    uint8_t u8Status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    u8Status = TWSR_R & 0xF8;
     286:	e1 e2       	ldi	r30, 0x21	; 33
     288:	f0 e0       	ldi	r31, 0x00	; 0
     28a:	80 81       	ld	r24, Z
     28c:	88 7f       	andi	r24, 0xF8	; 248
     28e:	89 83       	std	Y+1, r24	; 0x01
    return u8Status;
     290:	89 81       	ldd	r24, Y+1	; 0x01
}//end TWI_getStatus
     292:	0f 90       	pop	r0
     294:	cf 91       	pop	r28
     296:	df 91       	pop	r29
     298:	08 95       	ret

0000029a <DIO_Init>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to initialize all the DIO groups according to the configuration
*************************************************************************************************/
enuErrorStatus_t DIO_Init(void)
{
     29a:	df 93       	push	r29
     29c:	cf 93       	push	r28
     29e:	0f 92       	push	r0
     2a0:	cd b7       	in	r28, 0x3d	; 61
     2a2:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_i;

	for(u8_i=0; u8_i<DIO_GROUPS_NO; u8_i++)
     2a4:	19 82       	std	Y+1, r1	; 0x01
     2a6:	02 c4       	rjmp	.+2052   	; 0xaac <__stack+0x24d>
	{
		//set the pin direction (input, output)
		if(astrDIOConfigParameters[u8_i].enuPinDir == INPUT)
     2a8:	89 81       	ldd	r24, Y+1	; 0x01
     2aa:	28 2f       	mov	r18, r24
     2ac:	30 e0       	ldi	r19, 0x00	; 0
     2ae:	c9 01       	movw	r24, r18
     2b0:	88 0f       	add	r24, r24
     2b2:	99 1f       	adc	r25, r25
     2b4:	82 0f       	add	r24, r18
     2b6:	93 1f       	adc	r25, r19
     2b8:	fc 01       	movw	r30, r24
     2ba:	ef 59       	subi	r30, 0x9F	; 159
     2bc:	ff 4f       	sbci	r31, 0xFF	; 255
     2be:	80 81       	ld	r24, Z
     2c0:	88 23       	and	r24, r24
     2c2:	09 f0       	breq	.+2      	; 0x2c6 <DIO_Init+0x2c>
     2c4:	ed c0       	rjmp	.+474    	; 0x4a0 <DIO_Init+0x206>
		{
			//if PORTA
			if((astrDIOConfigParameters[u8_i].enuPinNo >= 0) && (astrDIOConfigParameters[u8_i].enuPinNo < 8))
     2c6:	89 81       	ldd	r24, Y+1	; 0x01
     2c8:	28 2f       	mov	r18, r24
     2ca:	30 e0       	ldi	r19, 0x00	; 0
     2cc:	c9 01       	movw	r24, r18
     2ce:	88 0f       	add	r24, r24
     2d0:	99 1f       	adc	r25, r25
     2d2:	82 0f       	add	r24, r18
     2d4:	93 1f       	adc	r25, r19
     2d6:	fc 01       	movw	r30, r24
     2d8:	e0 5a       	subi	r30, 0xA0	; 160
     2da:	ff 4f       	sbci	r31, 0xFF	; 255
     2dc:	80 81       	ld	r24, Z
     2de:	88 30       	cpi	r24, 0x08	; 8
     2e0:	00 f5       	brcc	.+64     	; 0x322 <DIO_Init+0x88>
			{
				CLR_BIT(DDRA_R, astrDIOConfigParameters[u8_i].enuPinNo);
     2e2:	aa e3       	ldi	r26, 0x3A	; 58
     2e4:	b0 e0       	ldi	r27, 0x00	; 0
     2e6:	ea e3       	ldi	r30, 0x3A	; 58
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	80 81       	ld	r24, Z
     2ec:	48 2f       	mov	r20, r24
     2ee:	89 81       	ldd	r24, Y+1	; 0x01
     2f0:	28 2f       	mov	r18, r24
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	c9 01       	movw	r24, r18
     2f6:	88 0f       	add	r24, r24
     2f8:	99 1f       	adc	r25, r25
     2fa:	82 0f       	add	r24, r18
     2fc:	93 1f       	adc	r25, r19
     2fe:	fc 01       	movw	r30, r24
     300:	e0 5a       	subi	r30, 0xA0	; 160
     302:	ff 4f       	sbci	r31, 0xFF	; 255
     304:	80 81       	ld	r24, Z
     306:	28 2f       	mov	r18, r24
     308:	30 e0       	ldi	r19, 0x00	; 0
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	02 2e       	mov	r0, r18
     310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_Init+0x7c>
     312:	88 0f       	add	r24, r24
     314:	99 1f       	adc	r25, r25
     316:	0a 94       	dec	r0
     318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_Init+0x78>
     31a:	80 95       	com	r24
     31c:	84 23       	and	r24, r20
     31e:	8c 93       	st	X, r24
     320:	b3 c1       	rjmp	.+870    	; 0x688 <DIO_Init+0x3ee>
			}//end if

			//if PORTB
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 8) && (astrDIOConfigParameters[u8_i].enuPinNo < 16))
     322:	89 81       	ldd	r24, Y+1	; 0x01
     324:	28 2f       	mov	r18, r24
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	c9 01       	movw	r24, r18
     32a:	88 0f       	add	r24, r24
     32c:	99 1f       	adc	r25, r25
     32e:	82 0f       	add	r24, r18
     330:	93 1f       	adc	r25, r19
     332:	fc 01       	movw	r30, r24
     334:	e0 5a       	subi	r30, 0xA0	; 160
     336:	ff 4f       	sbci	r31, 0xFF	; 255
     338:	80 81       	ld	r24, Z
     33a:	88 30       	cpi	r24, 0x08	; 8
     33c:	88 f1       	brcs	.+98     	; 0x3a0 <DIO_Init+0x106>
     33e:	89 81       	ldd	r24, Y+1	; 0x01
     340:	28 2f       	mov	r18, r24
     342:	30 e0       	ldi	r19, 0x00	; 0
     344:	c9 01       	movw	r24, r18
     346:	88 0f       	add	r24, r24
     348:	99 1f       	adc	r25, r25
     34a:	82 0f       	add	r24, r18
     34c:	93 1f       	adc	r25, r19
     34e:	fc 01       	movw	r30, r24
     350:	e0 5a       	subi	r30, 0xA0	; 160
     352:	ff 4f       	sbci	r31, 0xFF	; 255
     354:	80 81       	ld	r24, Z
     356:	80 31       	cpi	r24, 0x10	; 16
     358:	18 f5       	brcc	.+70     	; 0x3a0 <DIO_Init+0x106>
			{
				CLR_BIT(DDRB_R,(astrDIOConfigParameters[u8_i].enuPinNo - 8));
     35a:	a7 e3       	ldi	r26, 0x37	; 55
     35c:	b0 e0       	ldi	r27, 0x00	; 0
     35e:	e7 e3       	ldi	r30, 0x37	; 55
     360:	f0 e0       	ldi	r31, 0x00	; 0
     362:	80 81       	ld	r24, Z
     364:	48 2f       	mov	r20, r24
     366:	89 81       	ldd	r24, Y+1	; 0x01
     368:	28 2f       	mov	r18, r24
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	c9 01       	movw	r24, r18
     36e:	88 0f       	add	r24, r24
     370:	99 1f       	adc	r25, r25
     372:	82 0f       	add	r24, r18
     374:	93 1f       	adc	r25, r19
     376:	fc 01       	movw	r30, r24
     378:	e0 5a       	subi	r30, 0xA0	; 160
     37a:	ff 4f       	sbci	r31, 0xFF	; 255
     37c:	80 81       	ld	r24, Z
     37e:	88 2f       	mov	r24, r24
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	9c 01       	movw	r18, r24
     384:	28 50       	subi	r18, 0x08	; 8
     386:	30 40       	sbci	r19, 0x00	; 0
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	02 2e       	mov	r0, r18
     38e:	02 c0       	rjmp	.+4      	; 0x394 <DIO_Init+0xfa>
     390:	88 0f       	add	r24, r24
     392:	99 1f       	adc	r25, r25
     394:	0a 94       	dec	r0
     396:	e2 f7       	brpl	.-8      	; 0x390 <DIO_Init+0xf6>
     398:	80 95       	com	r24
     39a:	84 23       	and	r24, r20
     39c:	8c 93       	st	X, r24
     39e:	74 c1       	rjmp	.+744    	; 0x688 <DIO_Init+0x3ee>
			}//end else if

			//if PORTC
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 16) && (astrDIOConfigParameters[u8_i].enuPinNo < 24))
     3a0:	89 81       	ldd	r24, Y+1	; 0x01
     3a2:	28 2f       	mov	r18, r24
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	c9 01       	movw	r24, r18
     3a8:	88 0f       	add	r24, r24
     3aa:	99 1f       	adc	r25, r25
     3ac:	82 0f       	add	r24, r18
     3ae:	93 1f       	adc	r25, r19
     3b0:	fc 01       	movw	r30, r24
     3b2:	e0 5a       	subi	r30, 0xA0	; 160
     3b4:	ff 4f       	sbci	r31, 0xFF	; 255
     3b6:	80 81       	ld	r24, Z
     3b8:	80 31       	cpi	r24, 0x10	; 16
     3ba:	88 f1       	brcs	.+98     	; 0x41e <DIO_Init+0x184>
     3bc:	89 81       	ldd	r24, Y+1	; 0x01
     3be:	28 2f       	mov	r18, r24
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	c9 01       	movw	r24, r18
     3c4:	88 0f       	add	r24, r24
     3c6:	99 1f       	adc	r25, r25
     3c8:	82 0f       	add	r24, r18
     3ca:	93 1f       	adc	r25, r19
     3cc:	fc 01       	movw	r30, r24
     3ce:	e0 5a       	subi	r30, 0xA0	; 160
     3d0:	ff 4f       	sbci	r31, 0xFF	; 255
     3d2:	80 81       	ld	r24, Z
     3d4:	88 31       	cpi	r24, 0x18	; 24
     3d6:	18 f5       	brcc	.+70     	; 0x41e <DIO_Init+0x184>
			{
				CLR_BIT(DDRC_R,(astrDIOConfigParameters[u8_i].enuPinNo - 16));
     3d8:	a4 e3       	ldi	r26, 0x34	; 52
     3da:	b0 e0       	ldi	r27, 0x00	; 0
     3dc:	e4 e3       	ldi	r30, 0x34	; 52
     3de:	f0 e0       	ldi	r31, 0x00	; 0
     3e0:	80 81       	ld	r24, Z
     3e2:	48 2f       	mov	r20, r24
     3e4:	89 81       	ldd	r24, Y+1	; 0x01
     3e6:	28 2f       	mov	r18, r24
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	c9 01       	movw	r24, r18
     3ec:	88 0f       	add	r24, r24
     3ee:	99 1f       	adc	r25, r25
     3f0:	82 0f       	add	r24, r18
     3f2:	93 1f       	adc	r25, r19
     3f4:	fc 01       	movw	r30, r24
     3f6:	e0 5a       	subi	r30, 0xA0	; 160
     3f8:	ff 4f       	sbci	r31, 0xFF	; 255
     3fa:	80 81       	ld	r24, Z
     3fc:	88 2f       	mov	r24, r24
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	9c 01       	movw	r18, r24
     402:	20 51       	subi	r18, 0x10	; 16
     404:	30 40       	sbci	r19, 0x00	; 0
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	02 2e       	mov	r0, r18
     40c:	02 c0       	rjmp	.+4      	; 0x412 <DIO_Init+0x178>
     40e:	88 0f       	add	r24, r24
     410:	99 1f       	adc	r25, r25
     412:	0a 94       	dec	r0
     414:	e2 f7       	brpl	.-8      	; 0x40e <DIO_Init+0x174>
     416:	80 95       	com	r24
     418:	84 23       	and	r24, r20
     41a:	8c 93       	st	X, r24
     41c:	35 c1       	rjmp	.+618    	; 0x688 <DIO_Init+0x3ee>
			}//end else if

			//if PORTD
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 24) && (astrDIOConfigParameters[u8_i].enuPinNo < 32))
     41e:	89 81       	ldd	r24, Y+1	; 0x01
     420:	28 2f       	mov	r18, r24
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	c9 01       	movw	r24, r18
     426:	88 0f       	add	r24, r24
     428:	99 1f       	adc	r25, r25
     42a:	82 0f       	add	r24, r18
     42c:	93 1f       	adc	r25, r19
     42e:	fc 01       	movw	r30, r24
     430:	e0 5a       	subi	r30, 0xA0	; 160
     432:	ff 4f       	sbci	r31, 0xFF	; 255
     434:	80 81       	ld	r24, Z
     436:	88 31       	cpi	r24, 0x18	; 24
     438:	08 f4       	brcc	.+2      	; 0x43c <DIO_Init+0x1a2>
     43a:	26 c1       	rjmp	.+588    	; 0x688 <DIO_Init+0x3ee>
     43c:	89 81       	ldd	r24, Y+1	; 0x01
     43e:	28 2f       	mov	r18, r24
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	c9 01       	movw	r24, r18
     444:	88 0f       	add	r24, r24
     446:	99 1f       	adc	r25, r25
     448:	82 0f       	add	r24, r18
     44a:	93 1f       	adc	r25, r19
     44c:	fc 01       	movw	r30, r24
     44e:	e0 5a       	subi	r30, 0xA0	; 160
     450:	ff 4f       	sbci	r31, 0xFF	; 255
     452:	80 81       	ld	r24, Z
     454:	80 32       	cpi	r24, 0x20	; 32
     456:	08 f0       	brcs	.+2      	; 0x45a <DIO_Init+0x1c0>
     458:	17 c1       	rjmp	.+558    	; 0x688 <DIO_Init+0x3ee>
			{
				CLR_BIT(DDRD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
     45a:	a1 e3       	ldi	r26, 0x31	; 49
     45c:	b0 e0       	ldi	r27, 0x00	; 0
     45e:	e1 e3       	ldi	r30, 0x31	; 49
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	80 81       	ld	r24, Z
     464:	48 2f       	mov	r20, r24
     466:	89 81       	ldd	r24, Y+1	; 0x01
     468:	28 2f       	mov	r18, r24
     46a:	30 e0       	ldi	r19, 0x00	; 0
     46c:	c9 01       	movw	r24, r18
     46e:	88 0f       	add	r24, r24
     470:	99 1f       	adc	r25, r25
     472:	82 0f       	add	r24, r18
     474:	93 1f       	adc	r25, r19
     476:	fc 01       	movw	r30, r24
     478:	e0 5a       	subi	r30, 0xA0	; 160
     47a:	ff 4f       	sbci	r31, 0xFF	; 255
     47c:	80 81       	ld	r24, Z
     47e:	88 2f       	mov	r24, r24
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	9c 01       	movw	r18, r24
     484:	28 51       	subi	r18, 0x18	; 24
     486:	30 40       	sbci	r19, 0x00	; 0
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	02 2e       	mov	r0, r18
     48e:	02 c0       	rjmp	.+4      	; 0x494 <DIO_Init+0x1fa>
     490:	88 0f       	add	r24, r24
     492:	99 1f       	adc	r25, r25
     494:	0a 94       	dec	r0
     496:	e2 f7       	brpl	.-8      	; 0x490 <DIO_Init+0x1f6>
     498:	80 95       	com	r24
     49a:	84 23       	and	r24, r20
     49c:	8c 93       	st	X, r24
     49e:	f4 c0       	rjmp	.+488    	; 0x688 <DIO_Init+0x3ee>
			}//end else if
		}//end if

		else if(astrDIOConfigParameters[u8_i].enuPinDir == OUTPUT)
     4a0:	89 81       	ldd	r24, Y+1	; 0x01
     4a2:	28 2f       	mov	r18, r24
     4a4:	30 e0       	ldi	r19, 0x00	; 0
     4a6:	c9 01       	movw	r24, r18
     4a8:	88 0f       	add	r24, r24
     4aa:	99 1f       	adc	r25, r25
     4ac:	82 0f       	add	r24, r18
     4ae:	93 1f       	adc	r25, r19
     4b0:	fc 01       	movw	r30, r24
     4b2:	ef 59       	subi	r30, 0x9F	; 159
     4b4:	ff 4f       	sbci	r31, 0xFF	; 255
     4b6:	80 81       	ld	r24, Z
     4b8:	81 30       	cpi	r24, 0x01	; 1
     4ba:	09 f0       	breq	.+2      	; 0x4be <DIO_Init+0x224>
     4bc:	e5 c0       	rjmp	.+458    	; 0x688 <DIO_Init+0x3ee>
		{
			if((astrDIOConfigParameters[u8_i].enuPinNo >= 0) && (astrDIOConfigParameters[u8_i].enuPinNo < 8))	//if porta
     4be:	89 81       	ldd	r24, Y+1	; 0x01
     4c0:	28 2f       	mov	r18, r24
     4c2:	30 e0       	ldi	r19, 0x00	; 0
     4c4:	c9 01       	movw	r24, r18
     4c6:	88 0f       	add	r24, r24
     4c8:	99 1f       	adc	r25, r25
     4ca:	82 0f       	add	r24, r18
     4cc:	93 1f       	adc	r25, r19
     4ce:	fc 01       	movw	r30, r24
     4d0:	e0 5a       	subi	r30, 0xA0	; 160
     4d2:	ff 4f       	sbci	r31, 0xFF	; 255
     4d4:	80 81       	ld	r24, Z
     4d6:	88 30       	cpi	r24, 0x08	; 8
     4d8:	f8 f4       	brcc	.+62     	; 0x518 <DIO_Init+0x27e>
			{
				SET_BIT(DDRA_R, astrDIOConfigParameters[u8_i].enuPinNo);
     4da:	aa e3       	ldi	r26, 0x3A	; 58
     4dc:	b0 e0       	ldi	r27, 0x00	; 0
     4de:	ea e3       	ldi	r30, 0x3A	; 58
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	80 81       	ld	r24, Z
     4e4:	48 2f       	mov	r20, r24
     4e6:	89 81       	ldd	r24, Y+1	; 0x01
     4e8:	28 2f       	mov	r18, r24
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	c9 01       	movw	r24, r18
     4ee:	88 0f       	add	r24, r24
     4f0:	99 1f       	adc	r25, r25
     4f2:	82 0f       	add	r24, r18
     4f4:	93 1f       	adc	r25, r19
     4f6:	fc 01       	movw	r30, r24
     4f8:	e0 5a       	subi	r30, 0xA0	; 160
     4fa:	ff 4f       	sbci	r31, 0xFF	; 255
     4fc:	80 81       	ld	r24, Z
     4fe:	28 2f       	mov	r18, r24
     500:	30 e0       	ldi	r19, 0x00	; 0
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	02 2e       	mov	r0, r18
     508:	02 c0       	rjmp	.+4      	; 0x50e <DIO_Init+0x274>
     50a:	88 0f       	add	r24, r24
     50c:	99 1f       	adc	r25, r25
     50e:	0a 94       	dec	r0
     510:	e2 f7       	brpl	.-8      	; 0x50a <DIO_Init+0x270>
     512:	84 2b       	or	r24, r20
     514:	8c 93       	st	X, r24
     516:	b8 c0       	rjmp	.+368    	; 0x688 <DIO_Init+0x3ee>
			}//end if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 8) && (astrDIOConfigParameters[u8_i].enuPinNo < 16))	//if portb
     518:	89 81       	ldd	r24, Y+1	; 0x01
     51a:	28 2f       	mov	r18, r24
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	c9 01       	movw	r24, r18
     520:	88 0f       	add	r24, r24
     522:	99 1f       	adc	r25, r25
     524:	82 0f       	add	r24, r18
     526:	93 1f       	adc	r25, r19
     528:	fc 01       	movw	r30, r24
     52a:	e0 5a       	subi	r30, 0xA0	; 160
     52c:	ff 4f       	sbci	r31, 0xFF	; 255
     52e:	80 81       	ld	r24, Z
     530:	88 30       	cpi	r24, 0x08	; 8
     532:	80 f1       	brcs	.+96     	; 0x594 <DIO_Init+0x2fa>
     534:	89 81       	ldd	r24, Y+1	; 0x01
     536:	28 2f       	mov	r18, r24
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	c9 01       	movw	r24, r18
     53c:	88 0f       	add	r24, r24
     53e:	99 1f       	adc	r25, r25
     540:	82 0f       	add	r24, r18
     542:	93 1f       	adc	r25, r19
     544:	fc 01       	movw	r30, r24
     546:	e0 5a       	subi	r30, 0xA0	; 160
     548:	ff 4f       	sbci	r31, 0xFF	; 255
     54a:	80 81       	ld	r24, Z
     54c:	80 31       	cpi	r24, 0x10	; 16
     54e:	10 f5       	brcc	.+68     	; 0x594 <DIO_Init+0x2fa>
			{
				SET_BIT(DDRB_R,(astrDIOConfigParameters[u8_i].enuPinNo - 8));
     550:	a7 e3       	ldi	r26, 0x37	; 55
     552:	b0 e0       	ldi	r27, 0x00	; 0
     554:	e7 e3       	ldi	r30, 0x37	; 55
     556:	f0 e0       	ldi	r31, 0x00	; 0
     558:	80 81       	ld	r24, Z
     55a:	48 2f       	mov	r20, r24
     55c:	89 81       	ldd	r24, Y+1	; 0x01
     55e:	28 2f       	mov	r18, r24
     560:	30 e0       	ldi	r19, 0x00	; 0
     562:	c9 01       	movw	r24, r18
     564:	88 0f       	add	r24, r24
     566:	99 1f       	adc	r25, r25
     568:	82 0f       	add	r24, r18
     56a:	93 1f       	adc	r25, r19
     56c:	fc 01       	movw	r30, r24
     56e:	e0 5a       	subi	r30, 0xA0	; 160
     570:	ff 4f       	sbci	r31, 0xFF	; 255
     572:	80 81       	ld	r24, Z
     574:	88 2f       	mov	r24, r24
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	9c 01       	movw	r18, r24
     57a:	28 50       	subi	r18, 0x08	; 8
     57c:	30 40       	sbci	r19, 0x00	; 0
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	02 2e       	mov	r0, r18
     584:	02 c0       	rjmp	.+4      	; 0x58a <DIO_Init+0x2f0>
     586:	88 0f       	add	r24, r24
     588:	99 1f       	adc	r25, r25
     58a:	0a 94       	dec	r0
     58c:	e2 f7       	brpl	.-8      	; 0x586 <DIO_Init+0x2ec>
     58e:	84 2b       	or	r24, r20
     590:	8c 93       	st	X, r24
     592:	7a c0       	rjmp	.+244    	; 0x688 <DIO_Init+0x3ee>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 16) && (astrDIOConfigParameters[u8_i].enuPinNo < 24))	//if portc
     594:	89 81       	ldd	r24, Y+1	; 0x01
     596:	28 2f       	mov	r18, r24
     598:	30 e0       	ldi	r19, 0x00	; 0
     59a:	c9 01       	movw	r24, r18
     59c:	88 0f       	add	r24, r24
     59e:	99 1f       	adc	r25, r25
     5a0:	82 0f       	add	r24, r18
     5a2:	93 1f       	adc	r25, r19
     5a4:	fc 01       	movw	r30, r24
     5a6:	e0 5a       	subi	r30, 0xA0	; 160
     5a8:	ff 4f       	sbci	r31, 0xFF	; 255
     5aa:	80 81       	ld	r24, Z
     5ac:	80 31       	cpi	r24, 0x10	; 16
     5ae:	80 f1       	brcs	.+96     	; 0x610 <DIO_Init+0x376>
     5b0:	89 81       	ldd	r24, Y+1	; 0x01
     5b2:	28 2f       	mov	r18, r24
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	c9 01       	movw	r24, r18
     5b8:	88 0f       	add	r24, r24
     5ba:	99 1f       	adc	r25, r25
     5bc:	82 0f       	add	r24, r18
     5be:	93 1f       	adc	r25, r19
     5c0:	fc 01       	movw	r30, r24
     5c2:	e0 5a       	subi	r30, 0xA0	; 160
     5c4:	ff 4f       	sbci	r31, 0xFF	; 255
     5c6:	80 81       	ld	r24, Z
     5c8:	88 31       	cpi	r24, 0x18	; 24
     5ca:	10 f5       	brcc	.+68     	; 0x610 <DIO_Init+0x376>
			{
				SET_BIT(DDRC_R,(astrDIOConfigParameters[u8_i].enuPinNo - 16));
     5cc:	a4 e3       	ldi	r26, 0x34	; 52
     5ce:	b0 e0       	ldi	r27, 0x00	; 0
     5d0:	e4 e3       	ldi	r30, 0x34	; 52
     5d2:	f0 e0       	ldi	r31, 0x00	; 0
     5d4:	80 81       	ld	r24, Z
     5d6:	48 2f       	mov	r20, r24
     5d8:	89 81       	ldd	r24, Y+1	; 0x01
     5da:	28 2f       	mov	r18, r24
     5dc:	30 e0       	ldi	r19, 0x00	; 0
     5de:	c9 01       	movw	r24, r18
     5e0:	88 0f       	add	r24, r24
     5e2:	99 1f       	adc	r25, r25
     5e4:	82 0f       	add	r24, r18
     5e6:	93 1f       	adc	r25, r19
     5e8:	fc 01       	movw	r30, r24
     5ea:	e0 5a       	subi	r30, 0xA0	; 160
     5ec:	ff 4f       	sbci	r31, 0xFF	; 255
     5ee:	80 81       	ld	r24, Z
     5f0:	88 2f       	mov	r24, r24
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	9c 01       	movw	r18, r24
     5f6:	20 51       	subi	r18, 0x10	; 16
     5f8:	30 40       	sbci	r19, 0x00	; 0
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	02 2e       	mov	r0, r18
     600:	02 c0       	rjmp	.+4      	; 0x606 <DIO_Init+0x36c>
     602:	88 0f       	add	r24, r24
     604:	99 1f       	adc	r25, r25
     606:	0a 94       	dec	r0
     608:	e2 f7       	brpl	.-8      	; 0x602 <DIO_Init+0x368>
     60a:	84 2b       	or	r24, r20
     60c:	8c 93       	st	X, r24
     60e:	3c c0       	rjmp	.+120    	; 0x688 <DIO_Init+0x3ee>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 24) && (astrDIOConfigParameters[u8_i].enuPinNo < 32))	//if portd
     610:	89 81       	ldd	r24, Y+1	; 0x01
     612:	28 2f       	mov	r18, r24
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	c9 01       	movw	r24, r18
     618:	88 0f       	add	r24, r24
     61a:	99 1f       	adc	r25, r25
     61c:	82 0f       	add	r24, r18
     61e:	93 1f       	adc	r25, r19
     620:	fc 01       	movw	r30, r24
     622:	e0 5a       	subi	r30, 0xA0	; 160
     624:	ff 4f       	sbci	r31, 0xFF	; 255
     626:	80 81       	ld	r24, Z
     628:	88 31       	cpi	r24, 0x18	; 24
     62a:	70 f1       	brcs	.+92     	; 0x688 <DIO_Init+0x3ee>
     62c:	89 81       	ldd	r24, Y+1	; 0x01
     62e:	28 2f       	mov	r18, r24
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	c9 01       	movw	r24, r18
     634:	88 0f       	add	r24, r24
     636:	99 1f       	adc	r25, r25
     638:	82 0f       	add	r24, r18
     63a:	93 1f       	adc	r25, r19
     63c:	fc 01       	movw	r30, r24
     63e:	e0 5a       	subi	r30, 0xA0	; 160
     640:	ff 4f       	sbci	r31, 0xFF	; 255
     642:	80 81       	ld	r24, Z
     644:	80 32       	cpi	r24, 0x20	; 32
     646:	00 f5       	brcc	.+64     	; 0x688 <DIO_Init+0x3ee>
			{
				SET_BIT(DDRD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
     648:	a1 e3       	ldi	r26, 0x31	; 49
     64a:	b0 e0       	ldi	r27, 0x00	; 0
     64c:	e1 e3       	ldi	r30, 0x31	; 49
     64e:	f0 e0       	ldi	r31, 0x00	; 0
     650:	80 81       	ld	r24, Z
     652:	48 2f       	mov	r20, r24
     654:	89 81       	ldd	r24, Y+1	; 0x01
     656:	28 2f       	mov	r18, r24
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	c9 01       	movw	r24, r18
     65c:	88 0f       	add	r24, r24
     65e:	99 1f       	adc	r25, r25
     660:	82 0f       	add	r24, r18
     662:	93 1f       	adc	r25, r19
     664:	fc 01       	movw	r30, r24
     666:	e0 5a       	subi	r30, 0xA0	; 160
     668:	ff 4f       	sbci	r31, 0xFF	; 255
     66a:	80 81       	ld	r24, Z
     66c:	88 2f       	mov	r24, r24
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	9c 01       	movw	r18, r24
     672:	28 51       	subi	r18, 0x18	; 24
     674:	30 40       	sbci	r19, 0x00	; 0
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	02 c0       	rjmp	.+4      	; 0x680 <DIO_Init+0x3e6>
     67c:	88 0f       	add	r24, r24
     67e:	99 1f       	adc	r25, r25
     680:	2a 95       	dec	r18
     682:	e2 f7       	brpl	.-8      	; 0x67c <DIO_Init+0x3e2>
     684:	84 2b       	or	r24, r20
     686:	8c 93       	st	X, r24
			}//end else if
		}//end else if

		//enable or disable pull-up resistor
		if(astrDIOConfigParameters[u8_i].enuPinDir == INPUT &&
     688:	89 81       	ldd	r24, Y+1	; 0x01
     68a:	28 2f       	mov	r18, r24
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	c9 01       	movw	r24, r18
     690:	88 0f       	add	r24, r24
     692:	99 1f       	adc	r25, r25
     694:	82 0f       	add	r24, r18
     696:	93 1f       	adc	r25, r19
     698:	fc 01       	movw	r30, r24
     69a:	ef 59       	subi	r30, 0x9F	; 159
     69c:	ff 4f       	sbci	r31, 0xFF	; 255
     69e:	80 81       	ld	r24, Z
     6a0:	88 23       	and	r24, r24
     6a2:	09 f0       	breq	.+2      	; 0x6a6 <DIO_Init+0x40c>
     6a4:	fc c0       	rjmp	.+504    	; 0x89e <__stack+0x3f>
     6a6:	89 81       	ldd	r24, Y+1	; 0x01
     6a8:	28 2f       	mov	r18, r24
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	c9 01       	movw	r24, r18
     6ae:	88 0f       	add	r24, r24
     6b0:	99 1f       	adc	r25, r25
     6b2:	82 0f       	add	r24, r18
     6b4:	93 1f       	adc	r25, r19
     6b6:	fc 01       	movw	r30, r24
     6b8:	ee 59       	subi	r30, 0x9E	; 158
     6ba:	ff 4f       	sbci	r31, 0xFF	; 255
     6bc:	80 81       	ld	r24, Z
     6be:	88 23       	and	r24, r24
     6c0:	09 f0       	breq	.+2      	; 0x6c4 <DIO_Init+0x42a>
     6c2:	ed c0       	rjmp	.+474    	; 0x89e <__stack+0x3f>
		   astrDIOConfigParameters[u8_i].enuPullupResEn == NO_CONNECTION)
		{
			if((astrDIOConfigParameters[u8_i].enuPinNo >= 0) && (astrDIOConfigParameters[u8_i].enuPinNo < 8))	//if porta
     6c4:	89 81       	ldd	r24, Y+1	; 0x01
     6c6:	28 2f       	mov	r18, r24
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	c9 01       	movw	r24, r18
     6cc:	88 0f       	add	r24, r24
     6ce:	99 1f       	adc	r25, r25
     6d0:	82 0f       	add	r24, r18
     6d2:	93 1f       	adc	r25, r19
     6d4:	fc 01       	movw	r30, r24
     6d6:	e0 5a       	subi	r30, 0xA0	; 160
     6d8:	ff 4f       	sbci	r31, 0xFF	; 255
     6da:	80 81       	ld	r24, Z
     6dc:	88 30       	cpi	r24, 0x08	; 8
     6de:	00 f5       	brcc	.+64     	; 0x720 <DIO_Init+0x486>
			{
				CLR_BIT(PORTA_R, astrDIOConfigParameters[u8_i].enuPinNo);
     6e0:	ab e3       	ldi	r26, 0x3B	; 59
     6e2:	b0 e0       	ldi	r27, 0x00	; 0
     6e4:	eb e3       	ldi	r30, 0x3B	; 59
     6e6:	f0 e0       	ldi	r31, 0x00	; 0
     6e8:	80 81       	ld	r24, Z
     6ea:	48 2f       	mov	r20, r24
     6ec:	89 81       	ldd	r24, Y+1	; 0x01
     6ee:	28 2f       	mov	r18, r24
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	c9 01       	movw	r24, r18
     6f4:	88 0f       	add	r24, r24
     6f6:	99 1f       	adc	r25, r25
     6f8:	82 0f       	add	r24, r18
     6fa:	93 1f       	adc	r25, r19
     6fc:	fc 01       	movw	r30, r24
     6fe:	e0 5a       	subi	r30, 0xA0	; 160
     700:	ff 4f       	sbci	r31, 0xFF	; 255
     702:	80 81       	ld	r24, Z
     704:	28 2f       	mov	r18, r24
     706:	30 e0       	ldi	r19, 0x00	; 0
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	02 2e       	mov	r0, r18
     70e:	02 c0       	rjmp	.+4      	; 0x714 <DIO_Init+0x47a>
     710:	88 0f       	add	r24, r24
     712:	99 1f       	adc	r25, r25
     714:	0a 94       	dec	r0
     716:	e2 f7       	brpl	.-8      	; 0x710 <DIO_Init+0x476>
     718:	80 95       	com	r24
     71a:	84 23       	and	r24, r20
     71c:	8c 93       	st	X, r24
     71e:	c3 c1       	rjmp	.+902    	; 0xaa6 <__stack+0x247>
			}//end if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 8) && (astrDIOConfigParameters[u8_i].enuPinNo < 16))	//if portb
     720:	89 81       	ldd	r24, Y+1	; 0x01
     722:	28 2f       	mov	r18, r24
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	c9 01       	movw	r24, r18
     728:	88 0f       	add	r24, r24
     72a:	99 1f       	adc	r25, r25
     72c:	82 0f       	add	r24, r18
     72e:	93 1f       	adc	r25, r19
     730:	fc 01       	movw	r30, r24
     732:	e0 5a       	subi	r30, 0xA0	; 160
     734:	ff 4f       	sbci	r31, 0xFF	; 255
     736:	80 81       	ld	r24, Z
     738:	88 30       	cpi	r24, 0x08	; 8
     73a:	88 f1       	brcs	.+98     	; 0x79e <DIO_Init+0x504>
     73c:	89 81       	ldd	r24, Y+1	; 0x01
     73e:	28 2f       	mov	r18, r24
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	c9 01       	movw	r24, r18
     744:	88 0f       	add	r24, r24
     746:	99 1f       	adc	r25, r25
     748:	82 0f       	add	r24, r18
     74a:	93 1f       	adc	r25, r19
     74c:	fc 01       	movw	r30, r24
     74e:	e0 5a       	subi	r30, 0xA0	; 160
     750:	ff 4f       	sbci	r31, 0xFF	; 255
     752:	80 81       	ld	r24, Z
     754:	80 31       	cpi	r24, 0x10	; 16
     756:	18 f5       	brcc	.+70     	; 0x79e <DIO_Init+0x504>
			{
				CLR_BIT(PORTB_R,(astrDIOConfigParameters[u8_i].enuPinNo - 8));
     758:	a8 e3       	ldi	r26, 0x38	; 56
     75a:	b0 e0       	ldi	r27, 0x00	; 0
     75c:	e8 e3       	ldi	r30, 0x38	; 56
     75e:	f0 e0       	ldi	r31, 0x00	; 0
     760:	80 81       	ld	r24, Z
     762:	48 2f       	mov	r20, r24
     764:	89 81       	ldd	r24, Y+1	; 0x01
     766:	28 2f       	mov	r18, r24
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	c9 01       	movw	r24, r18
     76c:	88 0f       	add	r24, r24
     76e:	99 1f       	adc	r25, r25
     770:	82 0f       	add	r24, r18
     772:	93 1f       	adc	r25, r19
     774:	fc 01       	movw	r30, r24
     776:	e0 5a       	subi	r30, 0xA0	; 160
     778:	ff 4f       	sbci	r31, 0xFF	; 255
     77a:	80 81       	ld	r24, Z
     77c:	88 2f       	mov	r24, r24
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	9c 01       	movw	r18, r24
     782:	28 50       	subi	r18, 0x08	; 8
     784:	30 40       	sbci	r19, 0x00	; 0
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	02 2e       	mov	r0, r18
     78c:	02 c0       	rjmp	.+4      	; 0x792 <DIO_Init+0x4f8>
     78e:	88 0f       	add	r24, r24
     790:	99 1f       	adc	r25, r25
     792:	0a 94       	dec	r0
     794:	e2 f7       	brpl	.-8      	; 0x78e <DIO_Init+0x4f4>
     796:	80 95       	com	r24
     798:	84 23       	and	r24, r20
     79a:	8c 93       	st	X, r24
     79c:	84 c1       	rjmp	.+776    	; 0xaa6 <__stack+0x247>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 16) && (astrDIOConfigParameters[u8_i].enuPinNo < 24))	//if portc
     79e:	89 81       	ldd	r24, Y+1	; 0x01
     7a0:	28 2f       	mov	r18, r24
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	c9 01       	movw	r24, r18
     7a6:	88 0f       	add	r24, r24
     7a8:	99 1f       	adc	r25, r25
     7aa:	82 0f       	add	r24, r18
     7ac:	93 1f       	adc	r25, r19
     7ae:	fc 01       	movw	r30, r24
     7b0:	e0 5a       	subi	r30, 0xA0	; 160
     7b2:	ff 4f       	sbci	r31, 0xFF	; 255
     7b4:	80 81       	ld	r24, Z
     7b6:	80 31       	cpi	r24, 0x10	; 16
     7b8:	88 f1       	brcs	.+98     	; 0x81c <DIO_Init+0x582>
     7ba:	89 81       	ldd	r24, Y+1	; 0x01
     7bc:	28 2f       	mov	r18, r24
     7be:	30 e0       	ldi	r19, 0x00	; 0
     7c0:	c9 01       	movw	r24, r18
     7c2:	88 0f       	add	r24, r24
     7c4:	99 1f       	adc	r25, r25
     7c6:	82 0f       	add	r24, r18
     7c8:	93 1f       	adc	r25, r19
     7ca:	fc 01       	movw	r30, r24
     7cc:	e0 5a       	subi	r30, 0xA0	; 160
     7ce:	ff 4f       	sbci	r31, 0xFF	; 255
     7d0:	80 81       	ld	r24, Z
     7d2:	88 31       	cpi	r24, 0x18	; 24
     7d4:	18 f5       	brcc	.+70     	; 0x81c <DIO_Init+0x582>
			{
				CLR_BIT(PORTC_R,(astrDIOConfigParameters[u8_i].enuPinNo - 16));
     7d6:	a5 e3       	ldi	r26, 0x35	; 53
     7d8:	b0 e0       	ldi	r27, 0x00	; 0
     7da:	e5 e3       	ldi	r30, 0x35	; 53
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	80 81       	ld	r24, Z
     7e0:	48 2f       	mov	r20, r24
     7e2:	89 81       	ldd	r24, Y+1	; 0x01
     7e4:	28 2f       	mov	r18, r24
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	c9 01       	movw	r24, r18
     7ea:	88 0f       	add	r24, r24
     7ec:	99 1f       	adc	r25, r25
     7ee:	82 0f       	add	r24, r18
     7f0:	93 1f       	adc	r25, r19
     7f2:	fc 01       	movw	r30, r24
     7f4:	e0 5a       	subi	r30, 0xA0	; 160
     7f6:	ff 4f       	sbci	r31, 0xFF	; 255
     7f8:	80 81       	ld	r24, Z
     7fa:	88 2f       	mov	r24, r24
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	9c 01       	movw	r18, r24
     800:	20 51       	subi	r18, 0x10	; 16
     802:	30 40       	sbci	r19, 0x00	; 0
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	02 2e       	mov	r0, r18
     80a:	02 c0       	rjmp	.+4      	; 0x810 <DIO_Init+0x576>
     80c:	88 0f       	add	r24, r24
     80e:	99 1f       	adc	r25, r25
     810:	0a 94       	dec	r0
     812:	e2 f7       	brpl	.-8      	; 0x80c <DIO_Init+0x572>
     814:	80 95       	com	r24
     816:	84 23       	and	r24, r20
     818:	8c 93       	st	X, r24
     81a:	45 c1       	rjmp	.+650    	; 0xaa6 <__stack+0x247>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 24) && (astrDIOConfigParameters[u8_i].enuPinNo < 32))	//if portd
     81c:	89 81       	ldd	r24, Y+1	; 0x01
     81e:	28 2f       	mov	r18, r24
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	c9 01       	movw	r24, r18
     824:	88 0f       	add	r24, r24
     826:	99 1f       	adc	r25, r25
     828:	82 0f       	add	r24, r18
     82a:	93 1f       	adc	r25, r19
     82c:	fc 01       	movw	r30, r24
     82e:	e0 5a       	subi	r30, 0xA0	; 160
     830:	ff 4f       	sbci	r31, 0xFF	; 255
     832:	80 81       	ld	r24, Z
     834:	88 31       	cpi	r24, 0x18	; 24
     836:	08 f4       	brcc	.+2      	; 0x83a <DIO_Init+0x5a0>
     838:	36 c1       	rjmp	.+620    	; 0xaa6 <__stack+0x247>
     83a:	89 81       	ldd	r24, Y+1	; 0x01
     83c:	28 2f       	mov	r18, r24
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	c9 01       	movw	r24, r18
     842:	88 0f       	add	r24, r24
     844:	99 1f       	adc	r25, r25
     846:	82 0f       	add	r24, r18
     848:	93 1f       	adc	r25, r19
     84a:	fc 01       	movw	r30, r24
     84c:	e0 5a       	subi	r30, 0xA0	; 160
     84e:	ff 4f       	sbci	r31, 0xFF	; 255
     850:	80 81       	ld	r24, Z
     852:	80 32       	cpi	r24, 0x20	; 32
     854:	08 f0       	brcs	.+2      	; 0x858 <DIO_Init+0x5be>
     856:	27 c1       	rjmp	.+590    	; 0xaa6 <__stack+0x247>
			{
				CLR_BIT(PORTD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
     858:	a2 e3       	ldi	r26, 0x32	; 50
     85a:	b0 e0       	ldi	r27, 0x00	; 0
     85c:	e2 e3       	ldi	r30, 0x32	; 50
     85e:	f0 e0       	ldi	r31, 0x00	; 0
     860:	80 81       	ld	r24, Z
     862:	48 2f       	mov	r20, r24
     864:	89 81       	ldd	r24, Y+1	; 0x01
     866:	28 2f       	mov	r18, r24
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	c9 01       	movw	r24, r18
     86c:	88 0f       	add	r24, r24
     86e:	99 1f       	adc	r25, r25
     870:	82 0f       	add	r24, r18
     872:	93 1f       	adc	r25, r19
     874:	fc 01       	movw	r30, r24
     876:	e0 5a       	subi	r30, 0xA0	; 160
     878:	ff 4f       	sbci	r31, 0xFF	; 255
     87a:	80 81       	ld	r24, Z
     87c:	88 2f       	mov	r24, r24
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	9c 01       	movw	r18, r24
     882:	28 51       	subi	r18, 0x18	; 24
     884:	30 40       	sbci	r19, 0x00	; 0
     886:	81 e0       	ldi	r24, 0x01	; 1
     888:	90 e0       	ldi	r25, 0x00	; 0
     88a:	02 2e       	mov	r0, r18
     88c:	02 c0       	rjmp	.+4      	; 0x892 <__stack+0x33>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	0a 94       	dec	r0
     894:	e2 f7       	brpl	.-8      	; 0x88e <__stack+0x2f>
     896:	80 95       	com	r24
     898:	84 23       	and	r24, r20
     89a:	8c 93       	st	X, r24
     89c:	04 c1       	rjmp	.+520    	; 0xaa6 <__stack+0x247>
			}//end else if
		}//end if

		else if(astrDIOConfigParameters[u8_i].enuPinDir == INPUT &&
     89e:	89 81       	ldd	r24, Y+1	; 0x01
     8a0:	28 2f       	mov	r18, r24
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	c9 01       	movw	r24, r18
     8a6:	88 0f       	add	r24, r24
     8a8:	99 1f       	adc	r25, r25
     8aa:	82 0f       	add	r24, r18
     8ac:	93 1f       	adc	r25, r19
     8ae:	fc 01       	movw	r30, r24
     8b0:	ef 59       	subi	r30, 0x9F	; 159
     8b2:	ff 4f       	sbci	r31, 0xFF	; 255
     8b4:	80 81       	ld	r24, Z
     8b6:	88 23       	and	r24, r24
     8b8:	09 f0       	breq	.+2      	; 0x8bc <__stack+0x5d>
     8ba:	f5 c0       	rjmp	.+490    	; 0xaa6 <__stack+0x247>
     8bc:	89 81       	ldd	r24, Y+1	; 0x01
     8be:	28 2f       	mov	r18, r24
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	c9 01       	movw	r24, r18
     8c4:	88 0f       	add	r24, r24
     8c6:	99 1f       	adc	r25, r25
     8c8:	82 0f       	add	r24, r18
     8ca:	93 1f       	adc	r25, r19
     8cc:	fc 01       	movw	r30, r24
     8ce:	ee 59       	subi	r30, 0x9E	; 158
     8d0:	ff 4f       	sbci	r31, 0xFF	; 255
     8d2:	80 81       	ld	r24, Z
     8d4:	81 30       	cpi	r24, 0x01	; 1
     8d6:	09 f0       	breq	.+2      	; 0x8da <__stack+0x7b>
     8d8:	e6 c0       	rjmp	.+460    	; 0xaa6 <__stack+0x247>
				astrDIOConfigParameters[u8_i].enuPullupResEn == PULL_UP_ENABLE)
		{
			if((astrDIOConfigParameters[u8_i].enuPinNo >= 0) && (astrDIOConfigParameters[u8_i].enuPinNo < 8))	//if porta
     8da:	89 81       	ldd	r24, Y+1	; 0x01
     8dc:	28 2f       	mov	r18, r24
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	c9 01       	movw	r24, r18
     8e2:	88 0f       	add	r24, r24
     8e4:	99 1f       	adc	r25, r25
     8e6:	82 0f       	add	r24, r18
     8e8:	93 1f       	adc	r25, r19
     8ea:	fc 01       	movw	r30, r24
     8ec:	e0 5a       	subi	r30, 0xA0	; 160
     8ee:	ff 4f       	sbci	r31, 0xFF	; 255
     8f0:	80 81       	ld	r24, Z
     8f2:	88 30       	cpi	r24, 0x08	; 8
     8f4:	f8 f4       	brcc	.+62     	; 0x934 <__stack+0xd5>
			{
				SET_BIT(PORTA_R, astrDIOConfigParameters[u8_i].enuPinNo);
     8f6:	ab e3       	ldi	r26, 0x3B	; 59
     8f8:	b0 e0       	ldi	r27, 0x00	; 0
     8fa:	eb e3       	ldi	r30, 0x3B	; 59
     8fc:	f0 e0       	ldi	r31, 0x00	; 0
     8fe:	80 81       	ld	r24, Z
     900:	48 2f       	mov	r20, r24
     902:	89 81       	ldd	r24, Y+1	; 0x01
     904:	28 2f       	mov	r18, r24
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	c9 01       	movw	r24, r18
     90a:	88 0f       	add	r24, r24
     90c:	99 1f       	adc	r25, r25
     90e:	82 0f       	add	r24, r18
     910:	93 1f       	adc	r25, r19
     912:	fc 01       	movw	r30, r24
     914:	e0 5a       	subi	r30, 0xA0	; 160
     916:	ff 4f       	sbci	r31, 0xFF	; 255
     918:	80 81       	ld	r24, Z
     91a:	28 2f       	mov	r18, r24
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	02 2e       	mov	r0, r18
     924:	02 c0       	rjmp	.+4      	; 0x92a <__stack+0xcb>
     926:	88 0f       	add	r24, r24
     928:	99 1f       	adc	r25, r25
     92a:	0a 94       	dec	r0
     92c:	e2 f7       	brpl	.-8      	; 0x926 <__stack+0xc7>
     92e:	84 2b       	or	r24, r20
     930:	8c 93       	st	X, r24
     932:	b9 c0       	rjmp	.+370    	; 0xaa6 <__stack+0x247>
			}//end if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 8) && (astrDIOConfigParameters[u8_i].enuPinNo < 16))	//if portb
     934:	89 81       	ldd	r24, Y+1	; 0x01
     936:	28 2f       	mov	r18, r24
     938:	30 e0       	ldi	r19, 0x00	; 0
     93a:	c9 01       	movw	r24, r18
     93c:	88 0f       	add	r24, r24
     93e:	99 1f       	adc	r25, r25
     940:	82 0f       	add	r24, r18
     942:	93 1f       	adc	r25, r19
     944:	fc 01       	movw	r30, r24
     946:	e0 5a       	subi	r30, 0xA0	; 160
     948:	ff 4f       	sbci	r31, 0xFF	; 255
     94a:	80 81       	ld	r24, Z
     94c:	88 30       	cpi	r24, 0x08	; 8
     94e:	80 f1       	brcs	.+96     	; 0x9b0 <__stack+0x151>
     950:	89 81       	ldd	r24, Y+1	; 0x01
     952:	28 2f       	mov	r18, r24
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	c9 01       	movw	r24, r18
     958:	88 0f       	add	r24, r24
     95a:	99 1f       	adc	r25, r25
     95c:	82 0f       	add	r24, r18
     95e:	93 1f       	adc	r25, r19
     960:	fc 01       	movw	r30, r24
     962:	e0 5a       	subi	r30, 0xA0	; 160
     964:	ff 4f       	sbci	r31, 0xFF	; 255
     966:	80 81       	ld	r24, Z
     968:	80 31       	cpi	r24, 0x10	; 16
     96a:	10 f5       	brcc	.+68     	; 0x9b0 <__stack+0x151>
			{
				SET_BIT(PORTB_R,(astrDIOConfigParameters[u8_i].enuPinNo - 8));
     96c:	a8 e3       	ldi	r26, 0x38	; 56
     96e:	b0 e0       	ldi	r27, 0x00	; 0
     970:	e8 e3       	ldi	r30, 0x38	; 56
     972:	f0 e0       	ldi	r31, 0x00	; 0
     974:	80 81       	ld	r24, Z
     976:	48 2f       	mov	r20, r24
     978:	89 81       	ldd	r24, Y+1	; 0x01
     97a:	28 2f       	mov	r18, r24
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	c9 01       	movw	r24, r18
     980:	88 0f       	add	r24, r24
     982:	99 1f       	adc	r25, r25
     984:	82 0f       	add	r24, r18
     986:	93 1f       	adc	r25, r19
     988:	fc 01       	movw	r30, r24
     98a:	e0 5a       	subi	r30, 0xA0	; 160
     98c:	ff 4f       	sbci	r31, 0xFF	; 255
     98e:	80 81       	ld	r24, Z
     990:	88 2f       	mov	r24, r24
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	9c 01       	movw	r18, r24
     996:	28 50       	subi	r18, 0x08	; 8
     998:	30 40       	sbci	r19, 0x00	; 0
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	02 2e       	mov	r0, r18
     9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <__stack+0x147>
     9a2:	88 0f       	add	r24, r24
     9a4:	99 1f       	adc	r25, r25
     9a6:	0a 94       	dec	r0
     9a8:	e2 f7       	brpl	.-8      	; 0x9a2 <__stack+0x143>
     9aa:	84 2b       	or	r24, r20
     9ac:	8c 93       	st	X, r24
     9ae:	7b c0       	rjmp	.+246    	; 0xaa6 <__stack+0x247>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 16) && (astrDIOConfigParameters[u8_i].enuPinNo < 24))	//if portc
     9b0:	89 81       	ldd	r24, Y+1	; 0x01
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	c9 01       	movw	r24, r18
     9b8:	88 0f       	add	r24, r24
     9ba:	99 1f       	adc	r25, r25
     9bc:	82 0f       	add	r24, r18
     9be:	93 1f       	adc	r25, r19
     9c0:	fc 01       	movw	r30, r24
     9c2:	e0 5a       	subi	r30, 0xA0	; 160
     9c4:	ff 4f       	sbci	r31, 0xFF	; 255
     9c6:	80 81       	ld	r24, Z
     9c8:	80 31       	cpi	r24, 0x10	; 16
     9ca:	80 f1       	brcs	.+96     	; 0xa2c <__stack+0x1cd>
     9cc:	89 81       	ldd	r24, Y+1	; 0x01
     9ce:	28 2f       	mov	r18, r24
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	c9 01       	movw	r24, r18
     9d4:	88 0f       	add	r24, r24
     9d6:	99 1f       	adc	r25, r25
     9d8:	82 0f       	add	r24, r18
     9da:	93 1f       	adc	r25, r19
     9dc:	fc 01       	movw	r30, r24
     9de:	e0 5a       	subi	r30, 0xA0	; 160
     9e0:	ff 4f       	sbci	r31, 0xFF	; 255
     9e2:	80 81       	ld	r24, Z
     9e4:	88 31       	cpi	r24, 0x18	; 24
     9e6:	10 f5       	brcc	.+68     	; 0xa2c <__stack+0x1cd>
			{
				SET_BIT(PORTC_R,(astrDIOConfigParameters[u8_i].enuPinNo - 16));
     9e8:	a5 e3       	ldi	r26, 0x35	; 53
     9ea:	b0 e0       	ldi	r27, 0x00	; 0
     9ec:	e5 e3       	ldi	r30, 0x35	; 53
     9ee:	f0 e0       	ldi	r31, 0x00	; 0
     9f0:	80 81       	ld	r24, Z
     9f2:	48 2f       	mov	r20, r24
     9f4:	89 81       	ldd	r24, Y+1	; 0x01
     9f6:	28 2f       	mov	r18, r24
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	c9 01       	movw	r24, r18
     9fc:	88 0f       	add	r24, r24
     9fe:	99 1f       	adc	r25, r25
     a00:	82 0f       	add	r24, r18
     a02:	93 1f       	adc	r25, r19
     a04:	fc 01       	movw	r30, r24
     a06:	e0 5a       	subi	r30, 0xA0	; 160
     a08:	ff 4f       	sbci	r31, 0xFF	; 255
     a0a:	80 81       	ld	r24, Z
     a0c:	88 2f       	mov	r24, r24
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	9c 01       	movw	r18, r24
     a12:	20 51       	subi	r18, 0x10	; 16
     a14:	30 40       	sbci	r19, 0x00	; 0
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	02 2e       	mov	r0, r18
     a1c:	02 c0       	rjmp	.+4      	; 0xa22 <__stack+0x1c3>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	0a 94       	dec	r0
     a24:	e2 f7       	brpl	.-8      	; 0xa1e <__stack+0x1bf>
     a26:	84 2b       	or	r24, r20
     a28:	8c 93       	st	X, r24
     a2a:	3d c0       	rjmp	.+122    	; 0xaa6 <__stack+0x247>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 24) && (astrDIOConfigParameters[u8_i].enuPinNo < 32))	//if portd
     a2c:	89 81       	ldd	r24, Y+1	; 0x01
     a2e:	28 2f       	mov	r18, r24
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	c9 01       	movw	r24, r18
     a34:	88 0f       	add	r24, r24
     a36:	99 1f       	adc	r25, r25
     a38:	82 0f       	add	r24, r18
     a3a:	93 1f       	adc	r25, r19
     a3c:	fc 01       	movw	r30, r24
     a3e:	e0 5a       	subi	r30, 0xA0	; 160
     a40:	ff 4f       	sbci	r31, 0xFF	; 255
     a42:	80 81       	ld	r24, Z
     a44:	88 31       	cpi	r24, 0x18	; 24
     a46:	78 f1       	brcs	.+94     	; 0xaa6 <__stack+0x247>
     a48:	89 81       	ldd	r24, Y+1	; 0x01
     a4a:	28 2f       	mov	r18, r24
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	c9 01       	movw	r24, r18
     a50:	88 0f       	add	r24, r24
     a52:	99 1f       	adc	r25, r25
     a54:	82 0f       	add	r24, r18
     a56:	93 1f       	adc	r25, r19
     a58:	fc 01       	movw	r30, r24
     a5a:	e0 5a       	subi	r30, 0xA0	; 160
     a5c:	ff 4f       	sbci	r31, 0xFF	; 255
     a5e:	80 81       	ld	r24, Z
     a60:	80 32       	cpi	r24, 0x20	; 32
     a62:	08 f5       	brcc	.+66     	; 0xaa6 <__stack+0x247>
			{
				SET_BIT(PORTD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
     a64:	a2 e3       	ldi	r26, 0x32	; 50
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	e2 e3       	ldi	r30, 0x32	; 50
     a6a:	f0 e0       	ldi	r31, 0x00	; 0
     a6c:	80 81       	ld	r24, Z
     a6e:	48 2f       	mov	r20, r24
     a70:	89 81       	ldd	r24, Y+1	; 0x01
     a72:	28 2f       	mov	r18, r24
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	c9 01       	movw	r24, r18
     a78:	88 0f       	add	r24, r24
     a7a:	99 1f       	adc	r25, r25
     a7c:	82 0f       	add	r24, r18
     a7e:	93 1f       	adc	r25, r19
     a80:	fc 01       	movw	r30, r24
     a82:	e0 5a       	subi	r30, 0xA0	; 160
     a84:	ff 4f       	sbci	r31, 0xFF	; 255
     a86:	80 81       	ld	r24, Z
     a88:	88 2f       	mov	r24, r24
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	9c 01       	movw	r18, r24
     a8e:	28 51       	subi	r18, 0x18	; 24
     a90:	30 40       	sbci	r19, 0x00	; 0
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	02 2e       	mov	r0, r18
     a98:	02 c0       	rjmp	.+4      	; 0xa9e <__stack+0x23f>
     a9a:	88 0f       	add	r24, r24
     a9c:	99 1f       	adc	r25, r25
     a9e:	0a 94       	dec	r0
     aa0:	e2 f7       	brpl	.-8      	; 0xa9a <__stack+0x23b>
     aa2:	84 2b       	or	r24, r20
     aa4:	8c 93       	st	X, r24
*************************************************************************************************/
enuErrorStatus_t DIO_Init(void)
{
	uint8_t u8_i;

	for(u8_i=0; u8_i<DIO_GROUPS_NO; u8_i++)
     aa6:	89 81       	ldd	r24, Y+1	; 0x01
     aa8:	8f 5f       	subi	r24, 0xFF	; 255
     aaa:	89 83       	std	Y+1, r24	; 0x01
     aac:	89 81       	ldd	r24, Y+1	; 0x01
     aae:	8a 31       	cpi	r24, 0x1A	; 26
     ab0:	08 f4       	brcc	.+2      	; 0xab4 <__stack+0x255>
     ab2:	fa cb       	rjmp	.-2060   	; 0x2a8 <DIO_Init+0xe>
				SET_BIT(PORTD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
			}//end else if
		}//end else if

	}//end for
    return E_OK;
     ab4:	81 e0       	ldi	r24, 0x01	; 1
}//end DIO_Init
     ab6:	0f 90       	pop	r0
     ab8:	cf 91       	pop	r28
     aba:	df 91       	pop	r29
     abc:	08 95       	ret

00000abe <DIO_Write>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to write a digital value into the selected DIO pin
*************************************************************************************************/
enuErrorStatus_t DIO_Write(uint8_t u8_GroupId, uint8_t u8_Data)
{
     abe:	df 93       	push	r29
     ac0:	cf 93       	push	r28
     ac2:	00 d0       	rcall	.+0      	; 0xac4 <DIO_Write+0x6>
     ac4:	cd b7       	in	r28, 0x3d	; 61
     ac6:	de b7       	in	r29, 0x3e	; 62
     ac8:	89 83       	std	Y+1, r24	; 0x01
     aca:	6a 83       	std	Y+2, r22	; 0x02
//	if(DIO_Init() == E_ERROR)	return E_ERROR;
//	else{

		if (u8_Data == LOW)
     acc:	8a 81       	ldd	r24, Y+2	; 0x02
     ace:	88 23       	and	r24, r24
     ad0:	09 f0       	breq	.+2      	; 0xad4 <DIO_Write+0x16>
     ad2:	ed c0       	rjmp	.+474    	; 0xcae <DIO_Write+0x1f0>
	    {
			if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 0) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 8))	//if porta
     ad4:	89 81       	ldd	r24, Y+1	; 0x01
     ad6:	28 2f       	mov	r18, r24
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	c9 01       	movw	r24, r18
     adc:	88 0f       	add	r24, r24
     ade:	99 1f       	adc	r25, r25
     ae0:	82 0f       	add	r24, r18
     ae2:	93 1f       	adc	r25, r19
     ae4:	fc 01       	movw	r30, r24
     ae6:	e0 5a       	subi	r30, 0xA0	; 160
     ae8:	ff 4f       	sbci	r31, 0xFF	; 255
     aea:	80 81       	ld	r24, Z
     aec:	88 30       	cpi	r24, 0x08	; 8
     aee:	00 f5       	brcc	.+64     	; 0xb30 <DIO_Write+0x72>
			{
				CLR_BIT(PORTA_R, astrDIOConfigParameters[u8_GroupId].enuPinNo);
     af0:	ab e3       	ldi	r26, 0x3B	; 59
     af2:	b0 e0       	ldi	r27, 0x00	; 0
     af4:	eb e3       	ldi	r30, 0x3B	; 59
     af6:	f0 e0       	ldi	r31, 0x00	; 0
     af8:	80 81       	ld	r24, Z
     afa:	48 2f       	mov	r20, r24
     afc:	89 81       	ldd	r24, Y+1	; 0x01
     afe:	28 2f       	mov	r18, r24
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	c9 01       	movw	r24, r18
     b04:	88 0f       	add	r24, r24
     b06:	99 1f       	adc	r25, r25
     b08:	82 0f       	add	r24, r18
     b0a:	93 1f       	adc	r25, r19
     b0c:	fc 01       	movw	r30, r24
     b0e:	e0 5a       	subi	r30, 0xA0	; 160
     b10:	ff 4f       	sbci	r31, 0xFF	; 255
     b12:	80 81       	ld	r24, Z
     b14:	28 2f       	mov	r18, r24
     b16:	30 e0       	ldi	r19, 0x00	; 0
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	02 2e       	mov	r0, r18
     b1e:	02 c0       	rjmp	.+4      	; 0xb24 <DIO_Write+0x66>
     b20:	88 0f       	add	r24, r24
     b22:	99 1f       	adc	r25, r25
     b24:	0a 94       	dec	r0
     b26:	e2 f7       	brpl	.-8      	; 0xb20 <DIO_Write+0x62>
     b28:	80 95       	com	r24
     b2a:	84 23       	and	r24, r20
     b2c:	8c 93       	st	X, r24
     b2e:	a9 c1       	rjmp	.+850    	; 0xe82 <DIO_Write+0x3c4>
			}//end if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 8) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 16))	//if portb
     b30:	89 81       	ldd	r24, Y+1	; 0x01
     b32:	28 2f       	mov	r18, r24
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	c9 01       	movw	r24, r18
     b38:	88 0f       	add	r24, r24
     b3a:	99 1f       	adc	r25, r25
     b3c:	82 0f       	add	r24, r18
     b3e:	93 1f       	adc	r25, r19
     b40:	fc 01       	movw	r30, r24
     b42:	e0 5a       	subi	r30, 0xA0	; 160
     b44:	ff 4f       	sbci	r31, 0xFF	; 255
     b46:	80 81       	ld	r24, Z
     b48:	88 30       	cpi	r24, 0x08	; 8
     b4a:	88 f1       	brcs	.+98     	; 0xbae <DIO_Write+0xf0>
     b4c:	89 81       	ldd	r24, Y+1	; 0x01
     b4e:	28 2f       	mov	r18, r24
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	c9 01       	movw	r24, r18
     b54:	88 0f       	add	r24, r24
     b56:	99 1f       	adc	r25, r25
     b58:	82 0f       	add	r24, r18
     b5a:	93 1f       	adc	r25, r19
     b5c:	fc 01       	movw	r30, r24
     b5e:	e0 5a       	subi	r30, 0xA0	; 160
     b60:	ff 4f       	sbci	r31, 0xFF	; 255
     b62:	80 81       	ld	r24, Z
     b64:	80 31       	cpi	r24, 0x10	; 16
     b66:	18 f5       	brcc	.+70     	; 0xbae <DIO_Write+0xf0>
			{
				CLR_BIT(PORTB_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 8));
     b68:	a8 e3       	ldi	r26, 0x38	; 56
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	e8 e3       	ldi	r30, 0x38	; 56
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 81       	ld	r24, Z
     b72:	48 2f       	mov	r20, r24
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	28 2f       	mov	r18, r24
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	c9 01       	movw	r24, r18
     b7c:	88 0f       	add	r24, r24
     b7e:	99 1f       	adc	r25, r25
     b80:	82 0f       	add	r24, r18
     b82:	93 1f       	adc	r25, r19
     b84:	fc 01       	movw	r30, r24
     b86:	e0 5a       	subi	r30, 0xA0	; 160
     b88:	ff 4f       	sbci	r31, 0xFF	; 255
     b8a:	80 81       	ld	r24, Z
     b8c:	88 2f       	mov	r24, r24
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	9c 01       	movw	r18, r24
     b92:	28 50       	subi	r18, 0x08	; 8
     b94:	30 40       	sbci	r19, 0x00	; 0
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	02 2e       	mov	r0, r18
     b9c:	02 c0       	rjmp	.+4      	; 0xba2 <DIO_Write+0xe4>
     b9e:	88 0f       	add	r24, r24
     ba0:	99 1f       	adc	r25, r25
     ba2:	0a 94       	dec	r0
     ba4:	e2 f7       	brpl	.-8      	; 0xb9e <DIO_Write+0xe0>
     ba6:	80 95       	com	r24
     ba8:	84 23       	and	r24, r20
     baa:	8c 93       	st	X, r24
     bac:	6a c1       	rjmp	.+724    	; 0xe82 <DIO_Write+0x3c4>
			}//end else if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 16) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 24))	//if portc
     bae:	89 81       	ldd	r24, Y+1	; 0x01
     bb0:	28 2f       	mov	r18, r24
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	c9 01       	movw	r24, r18
     bb6:	88 0f       	add	r24, r24
     bb8:	99 1f       	adc	r25, r25
     bba:	82 0f       	add	r24, r18
     bbc:	93 1f       	adc	r25, r19
     bbe:	fc 01       	movw	r30, r24
     bc0:	e0 5a       	subi	r30, 0xA0	; 160
     bc2:	ff 4f       	sbci	r31, 0xFF	; 255
     bc4:	80 81       	ld	r24, Z
     bc6:	80 31       	cpi	r24, 0x10	; 16
     bc8:	88 f1       	brcs	.+98     	; 0xc2c <DIO_Write+0x16e>
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	28 2f       	mov	r18, r24
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	c9 01       	movw	r24, r18
     bd2:	88 0f       	add	r24, r24
     bd4:	99 1f       	adc	r25, r25
     bd6:	82 0f       	add	r24, r18
     bd8:	93 1f       	adc	r25, r19
     bda:	fc 01       	movw	r30, r24
     bdc:	e0 5a       	subi	r30, 0xA0	; 160
     bde:	ff 4f       	sbci	r31, 0xFF	; 255
     be0:	80 81       	ld	r24, Z
     be2:	88 31       	cpi	r24, 0x18	; 24
     be4:	18 f5       	brcc	.+70     	; 0xc2c <DIO_Write+0x16e>
			{
				CLR_BIT(PORTC_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 16));
     be6:	a5 e3       	ldi	r26, 0x35	; 53
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	e5 e3       	ldi	r30, 0x35	; 53
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	48 2f       	mov	r20, r24
     bf2:	89 81       	ldd	r24, Y+1	; 0x01
     bf4:	28 2f       	mov	r18, r24
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	c9 01       	movw	r24, r18
     bfa:	88 0f       	add	r24, r24
     bfc:	99 1f       	adc	r25, r25
     bfe:	82 0f       	add	r24, r18
     c00:	93 1f       	adc	r25, r19
     c02:	fc 01       	movw	r30, r24
     c04:	e0 5a       	subi	r30, 0xA0	; 160
     c06:	ff 4f       	sbci	r31, 0xFF	; 255
     c08:	80 81       	ld	r24, Z
     c0a:	88 2f       	mov	r24, r24
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	9c 01       	movw	r18, r24
     c10:	20 51       	subi	r18, 0x10	; 16
     c12:	30 40       	sbci	r19, 0x00	; 0
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	02 2e       	mov	r0, r18
     c1a:	02 c0       	rjmp	.+4      	; 0xc20 <DIO_Write+0x162>
     c1c:	88 0f       	add	r24, r24
     c1e:	99 1f       	adc	r25, r25
     c20:	0a 94       	dec	r0
     c22:	e2 f7       	brpl	.-8      	; 0xc1c <DIO_Write+0x15e>
     c24:	80 95       	com	r24
     c26:	84 23       	and	r24, r20
     c28:	8c 93       	st	X, r24
     c2a:	2b c1       	rjmp	.+598    	; 0xe82 <DIO_Write+0x3c4>
			}//end else if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 24) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 32))	//if portd
     c2c:	89 81       	ldd	r24, Y+1	; 0x01
     c2e:	28 2f       	mov	r18, r24
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	c9 01       	movw	r24, r18
     c34:	88 0f       	add	r24, r24
     c36:	99 1f       	adc	r25, r25
     c38:	82 0f       	add	r24, r18
     c3a:	93 1f       	adc	r25, r19
     c3c:	fc 01       	movw	r30, r24
     c3e:	e0 5a       	subi	r30, 0xA0	; 160
     c40:	ff 4f       	sbci	r31, 0xFF	; 255
     c42:	80 81       	ld	r24, Z
     c44:	88 31       	cpi	r24, 0x18	; 24
     c46:	08 f4       	brcc	.+2      	; 0xc4a <DIO_Write+0x18c>
     c48:	1c c1       	rjmp	.+568    	; 0xe82 <DIO_Write+0x3c4>
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
     c4c:	28 2f       	mov	r18, r24
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	c9 01       	movw	r24, r18
     c52:	88 0f       	add	r24, r24
     c54:	99 1f       	adc	r25, r25
     c56:	82 0f       	add	r24, r18
     c58:	93 1f       	adc	r25, r19
     c5a:	fc 01       	movw	r30, r24
     c5c:	e0 5a       	subi	r30, 0xA0	; 160
     c5e:	ff 4f       	sbci	r31, 0xFF	; 255
     c60:	80 81       	ld	r24, Z
     c62:	80 32       	cpi	r24, 0x20	; 32
     c64:	08 f0       	brcs	.+2      	; 0xc68 <DIO_Write+0x1aa>
     c66:	0d c1       	rjmp	.+538    	; 0xe82 <DIO_Write+0x3c4>
			{
				CLR_BIT(PORTD_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 24));
     c68:	a2 e3       	ldi	r26, 0x32	; 50
     c6a:	b0 e0       	ldi	r27, 0x00	; 0
     c6c:	e2 e3       	ldi	r30, 0x32	; 50
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	80 81       	ld	r24, Z
     c72:	48 2f       	mov	r20, r24
     c74:	89 81       	ldd	r24, Y+1	; 0x01
     c76:	28 2f       	mov	r18, r24
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	c9 01       	movw	r24, r18
     c7c:	88 0f       	add	r24, r24
     c7e:	99 1f       	adc	r25, r25
     c80:	82 0f       	add	r24, r18
     c82:	93 1f       	adc	r25, r19
     c84:	fc 01       	movw	r30, r24
     c86:	e0 5a       	subi	r30, 0xA0	; 160
     c88:	ff 4f       	sbci	r31, 0xFF	; 255
     c8a:	80 81       	ld	r24, Z
     c8c:	88 2f       	mov	r24, r24
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	9c 01       	movw	r18, r24
     c92:	28 51       	subi	r18, 0x18	; 24
     c94:	30 40       	sbci	r19, 0x00	; 0
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	02 2e       	mov	r0, r18
     c9c:	02 c0       	rjmp	.+4      	; 0xca2 <DIO_Write+0x1e4>
     c9e:	88 0f       	add	r24, r24
     ca0:	99 1f       	adc	r25, r25
     ca2:	0a 94       	dec	r0
     ca4:	e2 f7       	brpl	.-8      	; 0xc9e <DIO_Write+0x1e0>
     ca6:	80 95       	com	r24
     ca8:	84 23       	and	r24, r20
     caa:	8c 93       	st	X, r24
     cac:	ea c0       	rjmp	.+468    	; 0xe82 <DIO_Write+0x3c4>
			}//end else if
	    }//end if

	    else if(u8_Data == HIGH)
     cae:	8a 81       	ldd	r24, Y+2	; 0x02
     cb0:	81 30       	cpi	r24, 0x01	; 1
     cb2:	09 f0       	breq	.+2      	; 0xcb6 <DIO_Write+0x1f8>
     cb4:	e6 c0       	rjmp	.+460    	; 0xe82 <DIO_Write+0x3c4>
	    {
			if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 0) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 8))	//if porta
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	28 2f       	mov	r18, r24
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	c9 01       	movw	r24, r18
     cbe:	88 0f       	add	r24, r24
     cc0:	99 1f       	adc	r25, r25
     cc2:	82 0f       	add	r24, r18
     cc4:	93 1f       	adc	r25, r19
     cc6:	fc 01       	movw	r30, r24
     cc8:	e0 5a       	subi	r30, 0xA0	; 160
     cca:	ff 4f       	sbci	r31, 0xFF	; 255
     ccc:	80 81       	ld	r24, Z
     cce:	88 30       	cpi	r24, 0x08	; 8
     cd0:	f8 f4       	brcc	.+62     	; 0xd10 <DIO_Write+0x252>
			{
				SET_BIT(PORTA_R, astrDIOConfigParameters[u8_GroupId].enuPinNo);
     cd2:	ab e3       	ldi	r26, 0x3B	; 59
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	eb e3       	ldi	r30, 0x3B	; 59
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	48 2f       	mov	r20, r24
     cde:	89 81       	ldd	r24, Y+1	; 0x01
     ce0:	28 2f       	mov	r18, r24
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	c9 01       	movw	r24, r18
     ce6:	88 0f       	add	r24, r24
     ce8:	99 1f       	adc	r25, r25
     cea:	82 0f       	add	r24, r18
     cec:	93 1f       	adc	r25, r19
     cee:	fc 01       	movw	r30, r24
     cf0:	e0 5a       	subi	r30, 0xA0	; 160
     cf2:	ff 4f       	sbci	r31, 0xFF	; 255
     cf4:	80 81       	ld	r24, Z
     cf6:	28 2f       	mov	r18, r24
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	02 2e       	mov	r0, r18
     d00:	02 c0       	rjmp	.+4      	; 0xd06 <DIO_Write+0x248>
     d02:	88 0f       	add	r24, r24
     d04:	99 1f       	adc	r25, r25
     d06:	0a 94       	dec	r0
     d08:	e2 f7       	brpl	.-8      	; 0xd02 <DIO_Write+0x244>
     d0a:	84 2b       	or	r24, r20
     d0c:	8c 93       	st	X, r24
     d0e:	b9 c0       	rjmp	.+370    	; 0xe82 <DIO_Write+0x3c4>
			}//end if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 8) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 16))	//if portb
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	28 2f       	mov	r18, r24
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	c9 01       	movw	r24, r18
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	82 0f       	add	r24, r18
     d1e:	93 1f       	adc	r25, r19
     d20:	fc 01       	movw	r30, r24
     d22:	e0 5a       	subi	r30, 0xA0	; 160
     d24:	ff 4f       	sbci	r31, 0xFF	; 255
     d26:	80 81       	ld	r24, Z
     d28:	88 30       	cpi	r24, 0x08	; 8
     d2a:	80 f1       	brcs	.+96     	; 0xd8c <DIO_Write+0x2ce>
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	28 2f       	mov	r18, r24
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	c9 01       	movw	r24, r18
     d34:	88 0f       	add	r24, r24
     d36:	99 1f       	adc	r25, r25
     d38:	82 0f       	add	r24, r18
     d3a:	93 1f       	adc	r25, r19
     d3c:	fc 01       	movw	r30, r24
     d3e:	e0 5a       	subi	r30, 0xA0	; 160
     d40:	ff 4f       	sbci	r31, 0xFF	; 255
     d42:	80 81       	ld	r24, Z
     d44:	80 31       	cpi	r24, 0x10	; 16
     d46:	10 f5       	brcc	.+68     	; 0xd8c <DIO_Write+0x2ce>
			{
				SET_BIT(PORTB_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 8));
     d48:	a8 e3       	ldi	r26, 0x38	; 56
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	e8 e3       	ldi	r30, 0x38	; 56
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	48 2f       	mov	r20, r24
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	28 2f       	mov	r18, r24
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	c9 01       	movw	r24, r18
     d5c:	88 0f       	add	r24, r24
     d5e:	99 1f       	adc	r25, r25
     d60:	82 0f       	add	r24, r18
     d62:	93 1f       	adc	r25, r19
     d64:	fc 01       	movw	r30, r24
     d66:	e0 5a       	subi	r30, 0xA0	; 160
     d68:	ff 4f       	sbci	r31, 0xFF	; 255
     d6a:	80 81       	ld	r24, Z
     d6c:	88 2f       	mov	r24, r24
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	9c 01       	movw	r18, r24
     d72:	28 50       	subi	r18, 0x08	; 8
     d74:	30 40       	sbci	r19, 0x00	; 0
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	02 2e       	mov	r0, r18
     d7c:	02 c0       	rjmp	.+4      	; 0xd82 <DIO_Write+0x2c4>
     d7e:	88 0f       	add	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	0a 94       	dec	r0
     d84:	e2 f7       	brpl	.-8      	; 0xd7e <DIO_Write+0x2c0>
     d86:	84 2b       	or	r24, r20
     d88:	8c 93       	st	X, r24
     d8a:	7b c0       	rjmp	.+246    	; 0xe82 <DIO_Write+0x3c4>
			}//end else if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 16) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 24))	//if portc
     d8c:	89 81       	ldd	r24, Y+1	; 0x01
     d8e:	28 2f       	mov	r18, r24
     d90:	30 e0       	ldi	r19, 0x00	; 0
     d92:	c9 01       	movw	r24, r18
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	82 0f       	add	r24, r18
     d9a:	93 1f       	adc	r25, r19
     d9c:	fc 01       	movw	r30, r24
     d9e:	e0 5a       	subi	r30, 0xA0	; 160
     da0:	ff 4f       	sbci	r31, 0xFF	; 255
     da2:	80 81       	ld	r24, Z
     da4:	80 31       	cpi	r24, 0x10	; 16
     da6:	80 f1       	brcs	.+96     	; 0xe08 <DIO_Write+0x34a>
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	28 2f       	mov	r18, r24
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	c9 01       	movw	r24, r18
     db0:	88 0f       	add	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	82 0f       	add	r24, r18
     db6:	93 1f       	adc	r25, r19
     db8:	fc 01       	movw	r30, r24
     dba:	e0 5a       	subi	r30, 0xA0	; 160
     dbc:	ff 4f       	sbci	r31, 0xFF	; 255
     dbe:	80 81       	ld	r24, Z
     dc0:	88 31       	cpi	r24, 0x18	; 24
     dc2:	10 f5       	brcc	.+68     	; 0xe08 <DIO_Write+0x34a>
			{
				SET_BIT(PORTC_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 16));
     dc4:	a5 e3       	ldi	r26, 0x35	; 53
     dc6:	b0 e0       	ldi	r27, 0x00	; 0
     dc8:	e5 e3       	ldi	r30, 0x35	; 53
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	48 2f       	mov	r20, r24
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	28 2f       	mov	r18, r24
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	c9 01       	movw	r24, r18
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	82 0f       	add	r24, r18
     dde:	93 1f       	adc	r25, r19
     de0:	fc 01       	movw	r30, r24
     de2:	e0 5a       	subi	r30, 0xA0	; 160
     de4:	ff 4f       	sbci	r31, 0xFF	; 255
     de6:	80 81       	ld	r24, Z
     de8:	88 2f       	mov	r24, r24
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	9c 01       	movw	r18, r24
     dee:	20 51       	subi	r18, 0x10	; 16
     df0:	30 40       	sbci	r19, 0x00	; 0
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	02 2e       	mov	r0, r18
     df8:	02 c0       	rjmp	.+4      	; 0xdfe <DIO_Write+0x340>
     dfa:	88 0f       	add	r24, r24
     dfc:	99 1f       	adc	r25, r25
     dfe:	0a 94       	dec	r0
     e00:	e2 f7       	brpl	.-8      	; 0xdfa <DIO_Write+0x33c>
     e02:	84 2b       	or	r24, r20
     e04:	8c 93       	st	X, r24
     e06:	3d c0       	rjmp	.+122    	; 0xe82 <DIO_Write+0x3c4>
			}//end else if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 24) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 32))	//if portd
     e08:	89 81       	ldd	r24, Y+1	; 0x01
     e0a:	28 2f       	mov	r18, r24
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	c9 01       	movw	r24, r18
     e10:	88 0f       	add	r24, r24
     e12:	99 1f       	adc	r25, r25
     e14:	82 0f       	add	r24, r18
     e16:	93 1f       	adc	r25, r19
     e18:	fc 01       	movw	r30, r24
     e1a:	e0 5a       	subi	r30, 0xA0	; 160
     e1c:	ff 4f       	sbci	r31, 0xFF	; 255
     e1e:	80 81       	ld	r24, Z
     e20:	88 31       	cpi	r24, 0x18	; 24
     e22:	78 f1       	brcs	.+94     	; 0xe82 <DIO_Write+0x3c4>
     e24:	89 81       	ldd	r24, Y+1	; 0x01
     e26:	28 2f       	mov	r18, r24
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	c9 01       	movw	r24, r18
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	82 0f       	add	r24, r18
     e32:	93 1f       	adc	r25, r19
     e34:	fc 01       	movw	r30, r24
     e36:	e0 5a       	subi	r30, 0xA0	; 160
     e38:	ff 4f       	sbci	r31, 0xFF	; 255
     e3a:	80 81       	ld	r24, Z
     e3c:	80 32       	cpi	r24, 0x20	; 32
     e3e:	08 f5       	brcc	.+66     	; 0xe82 <DIO_Write+0x3c4>
			{
				SET_BIT(PORTD_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 24));
     e40:	a2 e3       	ldi	r26, 0x32	; 50
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e2 e3       	ldi	r30, 0x32	; 50
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	48 2f       	mov	r20, r24
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
     e4e:	28 2f       	mov	r18, r24
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	c9 01       	movw	r24, r18
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	82 0f       	add	r24, r18
     e5a:	93 1f       	adc	r25, r19
     e5c:	fc 01       	movw	r30, r24
     e5e:	e0 5a       	subi	r30, 0xA0	; 160
     e60:	ff 4f       	sbci	r31, 0xFF	; 255
     e62:	80 81       	ld	r24, Z
     e64:	88 2f       	mov	r24, r24
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	9c 01       	movw	r18, r24
     e6a:	28 51       	subi	r18, 0x18	; 24
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	02 2e       	mov	r0, r18
     e74:	02 c0       	rjmp	.+4      	; 0xe7a <DIO_Write+0x3bc>
     e76:	88 0f       	add	r24, r24
     e78:	99 1f       	adc	r25, r25
     e7a:	0a 94       	dec	r0
     e7c:	e2 f7       	brpl	.-8      	; 0xe76 <DIO_Write+0x3b8>
     e7e:	84 2b       	or	r24, r20
     e80:	8c 93       	st	X, r24
			}//end else if
	    }//end else if
		return E_OK;
     e82:	81 e0       	ldi	r24, 0x01	; 1
}//end DIO_write
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	cf 91       	pop	r28
     e8a:	df 91       	pop	r29
     e8c:	08 95       	ret

00000e8e <DIO_Read>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to read a digital value from the selected DIO pin
*************************************************************************************************/
enuErrorStatus_t DIO_Read(uint8_t u8_GroupId, uint8_t* pu8_Data)
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	00 d0       	rcall	.+0      	; 0xe94 <DIO_Read+0x6>
     e94:	00 d0       	rcall	.+0      	; 0xe96 <DIO_Read+0x8>
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	89 83       	std	Y+1, r24	; 0x01
     e9c:	7b 83       	std	Y+3, r23	; 0x03
     e9e:	6a 83       	std	Y+2, r22	; 0x02
	if(pu8_Data == NULL_PTR)		return E_ERROR;
     ea0:	8a 81       	ldd	r24, Y+2	; 0x02
     ea2:	9b 81       	ldd	r25, Y+3	; 0x03
     ea4:	00 97       	sbiw	r24, 0x00	; 0
     ea6:	11 f4       	brne	.+4      	; 0xeac <DIO_Read+0x1e>
     ea8:	1c 82       	std	Y+4, r1	; 0x04
     eaa:	e8 c0       	rjmp	.+464    	; 0x107c <DIO_Read+0x1ee>
	else
	{
		if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 0) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 8))	//if porta
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	c9 01       	movw	r24, r18
     eb4:	88 0f       	add	r24, r24
     eb6:	99 1f       	adc	r25, r25
     eb8:	82 0f       	add	r24, r18
     eba:	93 1f       	adc	r25, r19
     ebc:	fc 01       	movw	r30, r24
     ebe:	e0 5a       	subi	r30, 0xA0	; 160
     ec0:	ff 4f       	sbci	r31, 0xFF	; 255
     ec2:	80 81       	ld	r24, Z
     ec4:	88 30       	cpi	r24, 0x08	; 8
     ec6:	f8 f4       	brcc	.+62     	; 0xf06 <DIO_Read+0x78>
		{
			*pu8_Data = GET_BIT(PINA_R, astrDIOConfigParameters[u8_GroupId].enuPinNo);
     ec8:	e9 e3       	ldi	r30, 0x39	; 57
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	48 2f       	mov	r20, r24
     ed0:	89 81       	ldd	r24, Y+1	; 0x01
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	c9 01       	movw	r24, r18
     ed8:	88 0f       	add	r24, r24
     eda:	99 1f       	adc	r25, r25
     edc:	82 0f       	add	r24, r18
     ede:	93 1f       	adc	r25, r19
     ee0:	fc 01       	movw	r30, r24
     ee2:	e0 5a       	subi	r30, 0xA0	; 160
     ee4:	ff 4f       	sbci	r31, 0xFF	; 255
     ee6:	80 81       	ld	r24, Z
     ee8:	28 2f       	mov	r18, r24
     eea:	30 e0       	ldi	r19, 0x00	; 0
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	02 2e       	mov	r0, r18
     ef2:	02 c0       	rjmp	.+4      	; 0xef8 <DIO_Read+0x6a>
     ef4:	88 0f       	add	r24, r24
     ef6:	99 1f       	adc	r25, r25
     ef8:	0a 94       	dec	r0
     efa:	e2 f7       	brpl	.-8      	; 0xef4 <DIO_Read+0x66>
     efc:	84 23       	and	r24, r20
     efe:	ea 81       	ldd	r30, Y+2	; 0x02
     f00:	fb 81       	ldd	r31, Y+3	; 0x03
     f02:	80 83       	st	Z, r24
     f04:	b9 c0       	rjmp	.+370    	; 0x1078 <DIO_Read+0x1ea>
		}//end if
		else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 8) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 16))	//if portb
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	28 2f       	mov	r18, r24
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	c9 01       	movw	r24, r18
     f0e:	88 0f       	add	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	82 0f       	add	r24, r18
     f14:	93 1f       	adc	r25, r19
     f16:	fc 01       	movw	r30, r24
     f18:	e0 5a       	subi	r30, 0xA0	; 160
     f1a:	ff 4f       	sbci	r31, 0xFF	; 255
     f1c:	80 81       	ld	r24, Z
     f1e:	88 30       	cpi	r24, 0x08	; 8
     f20:	80 f1       	brcs	.+96     	; 0xf82 <DIO_Read+0xf4>
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	c9 01       	movw	r24, r18
     f2a:	88 0f       	add	r24, r24
     f2c:	99 1f       	adc	r25, r25
     f2e:	82 0f       	add	r24, r18
     f30:	93 1f       	adc	r25, r19
     f32:	fc 01       	movw	r30, r24
     f34:	e0 5a       	subi	r30, 0xA0	; 160
     f36:	ff 4f       	sbci	r31, 0xFF	; 255
     f38:	80 81       	ld	r24, Z
     f3a:	80 31       	cpi	r24, 0x10	; 16
     f3c:	10 f5       	brcc	.+68     	; 0xf82 <DIO_Read+0xf4>
		{
			*pu8_Data = GET_BIT(PINB_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 8));
     f3e:	e6 e3       	ldi	r30, 0x36	; 54
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	48 2f       	mov	r20, r24
     f46:	89 81       	ldd	r24, Y+1	; 0x01
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	c9 01       	movw	r24, r18
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	82 0f       	add	r24, r18
     f54:	93 1f       	adc	r25, r19
     f56:	fc 01       	movw	r30, r24
     f58:	e0 5a       	subi	r30, 0xA0	; 160
     f5a:	ff 4f       	sbci	r31, 0xFF	; 255
     f5c:	80 81       	ld	r24, Z
     f5e:	88 2f       	mov	r24, r24
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	9c 01       	movw	r18, r24
     f64:	28 50       	subi	r18, 0x08	; 8
     f66:	30 40       	sbci	r19, 0x00	; 0
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	02 2e       	mov	r0, r18
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <DIO_Read+0xe6>
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	0a 94       	dec	r0
     f76:	e2 f7       	brpl	.-8      	; 0xf70 <DIO_Read+0xe2>
     f78:	84 23       	and	r24, r20
     f7a:	ea 81       	ldd	r30, Y+2	; 0x02
     f7c:	fb 81       	ldd	r31, Y+3	; 0x03
     f7e:	80 83       	st	Z, r24
     f80:	7b c0       	rjmp	.+246    	; 0x1078 <DIO_Read+0x1ea>
		}//end else if
		else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 16) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 24))	//if portc
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	28 2f       	mov	r18, r24
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	c9 01       	movw	r24, r18
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	82 0f       	add	r24, r18
     f90:	93 1f       	adc	r25, r19
     f92:	fc 01       	movw	r30, r24
     f94:	e0 5a       	subi	r30, 0xA0	; 160
     f96:	ff 4f       	sbci	r31, 0xFF	; 255
     f98:	80 81       	ld	r24, Z
     f9a:	80 31       	cpi	r24, 0x10	; 16
     f9c:	80 f1       	brcs	.+96     	; 0xffe <DIO_Read+0x170>
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	c9 01       	movw	r24, r18
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	82 0f       	add	r24, r18
     fac:	93 1f       	adc	r25, r19
     fae:	fc 01       	movw	r30, r24
     fb0:	e0 5a       	subi	r30, 0xA0	; 160
     fb2:	ff 4f       	sbci	r31, 0xFF	; 255
     fb4:	80 81       	ld	r24, Z
     fb6:	88 31       	cpi	r24, 0x18	; 24
     fb8:	10 f5       	brcc	.+68     	; 0xffe <DIO_Read+0x170>
		{
			*pu8_Data = GET_BIT(PINC_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 16));
     fba:	e3 e3       	ldi	r30, 0x33	; 51
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	48 2f       	mov	r20, r24
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	c9 01       	movw	r24, r18
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	82 0f       	add	r24, r18
     fd0:	93 1f       	adc	r25, r19
     fd2:	fc 01       	movw	r30, r24
     fd4:	e0 5a       	subi	r30, 0xA0	; 160
     fd6:	ff 4f       	sbci	r31, 0xFF	; 255
     fd8:	80 81       	ld	r24, Z
     fda:	88 2f       	mov	r24, r24
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	9c 01       	movw	r18, r24
     fe0:	20 51       	subi	r18, 0x10	; 16
     fe2:	30 40       	sbci	r19, 0x00	; 0
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	02 2e       	mov	r0, r18
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <DIO_Read+0x162>
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	0a 94       	dec	r0
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <DIO_Read+0x15e>
     ff4:	84 23       	and	r24, r20
     ff6:	ea 81       	ldd	r30, Y+2	; 0x02
     ff8:	fb 81       	ldd	r31, Y+3	; 0x03
     ffa:	80 83       	st	Z, r24
     ffc:	3d c0       	rjmp	.+122    	; 0x1078 <DIO_Read+0x1ea>
		}//end else if
		else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 24) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 32))	//if portd
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	28 2f       	mov	r18, r24
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	c9 01       	movw	r24, r18
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	82 0f       	add	r24, r18
    100c:	93 1f       	adc	r25, r19
    100e:	fc 01       	movw	r30, r24
    1010:	e0 5a       	subi	r30, 0xA0	; 160
    1012:	ff 4f       	sbci	r31, 0xFF	; 255
    1014:	80 81       	ld	r24, Z
    1016:	88 31       	cpi	r24, 0x18	; 24
    1018:	78 f1       	brcs	.+94     	; 0x1078 <DIO_Read+0x1ea>
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	28 2f       	mov	r18, r24
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	c9 01       	movw	r24, r18
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	82 0f       	add	r24, r18
    1028:	93 1f       	adc	r25, r19
    102a:	fc 01       	movw	r30, r24
    102c:	e0 5a       	subi	r30, 0xA0	; 160
    102e:	ff 4f       	sbci	r31, 0xFF	; 255
    1030:	80 81       	ld	r24, Z
    1032:	80 32       	cpi	r24, 0x20	; 32
    1034:	08 f5       	brcc	.+66     	; 0x1078 <DIO_Read+0x1ea>
		{
			*pu8_Data = GET_BIT(PIND_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 24));
    1036:	e0 e3       	ldi	r30, 0x30	; 48
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	48 2f       	mov	r20, r24
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	c9 01       	movw	r24, r18
    1046:	88 0f       	add	r24, r24
    1048:	99 1f       	adc	r25, r25
    104a:	82 0f       	add	r24, r18
    104c:	93 1f       	adc	r25, r19
    104e:	fc 01       	movw	r30, r24
    1050:	e0 5a       	subi	r30, 0xA0	; 160
    1052:	ff 4f       	sbci	r31, 0xFF	; 255
    1054:	80 81       	ld	r24, Z
    1056:	88 2f       	mov	r24, r24
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	9c 01       	movw	r18, r24
    105c:	28 51       	subi	r18, 0x18	; 24
    105e:	30 40       	sbci	r19, 0x00	; 0
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 2e       	mov	r0, r18
    1066:	02 c0       	rjmp	.+4      	; 0x106c <DIO_Read+0x1de>
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	0a 94       	dec	r0
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <DIO_Read+0x1da>
    1070:	84 23       	and	r24, r20
    1072:	ea 81       	ldd	r30, Y+2	; 0x02
    1074:	fb 81       	ldd	r31, Y+3	; 0x03
    1076:	80 83       	st	Z, r24
		}//end else if

		return E_OK;
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	8c 83       	std	Y+4, r24	; 0x04
    107c:	8c 81       	ldd	r24, Y+4	; 0x04
	}//end else
}//end DIO_Read
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	cf 91       	pop	r28
    1088:	df 91       	pop	r29
    108a:	08 95       	ret

0000108c <DIO_toggle>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to toggle the selected DIO pin
*************************************************************************************************/
enuErrorStatus_t DIO_toggle(uint8_t u8_GroupId)
{
    108c:	df 93       	push	r29
    108e:	cf 93       	push	r28
    1090:	0f 92       	push	r0
    1092:	cd b7       	in	r28, 0x3d	; 61
    1094:	de b7       	in	r29, 0x3e	; 62
    1096:	89 83       	std	Y+1, r24	; 0x01
	if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 0) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 8))	//if porta
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	28 2f       	mov	r18, r24
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	c9 01       	movw	r24, r18
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	82 0f       	add	r24, r18
    10a6:	93 1f       	adc	r25, r19
    10a8:	fc 01       	movw	r30, r24
    10aa:	e0 5a       	subi	r30, 0xA0	; 160
    10ac:	ff 4f       	sbci	r31, 0xFF	; 255
    10ae:	80 81       	ld	r24, Z
    10b0:	88 30       	cpi	r24, 0x08	; 8
    10b2:	f8 f4       	brcc	.+62     	; 0x10f2 <DIO_toggle+0x66>
	{
		TOGGLE_BIT(PORTA_R, astrDIOConfigParameters[u8_GroupId].enuPinNo);
    10b4:	ab e3       	ldi	r26, 0x3B	; 59
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	eb e3       	ldi	r30, 0x3B	; 59
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	48 2f       	mov	r20, r24
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	c9 01       	movw	r24, r18
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	82 0f       	add	r24, r18
    10ce:	93 1f       	adc	r25, r19
    10d0:	fc 01       	movw	r30, r24
    10d2:	e0 5a       	subi	r30, 0xA0	; 160
    10d4:	ff 4f       	sbci	r31, 0xFF	; 255
    10d6:	80 81       	ld	r24, Z
    10d8:	28 2f       	mov	r18, r24
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	02 2e       	mov	r0, r18
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <DIO_toggle+0x5c>
    10e4:	88 0f       	add	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	0a 94       	dec	r0
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <DIO_toggle+0x58>
    10ec:	84 27       	eor	r24, r20
    10ee:	8c 93       	st	X, r24
    10f0:	b9 c0       	rjmp	.+370    	; 0x1264 <DIO_toggle+0x1d8>
	}//end if
	else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 8) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 16))	//if portb
    10f2:	89 81       	ldd	r24, Y+1	; 0x01
    10f4:	28 2f       	mov	r18, r24
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	c9 01       	movw	r24, r18
    10fa:	88 0f       	add	r24, r24
    10fc:	99 1f       	adc	r25, r25
    10fe:	82 0f       	add	r24, r18
    1100:	93 1f       	adc	r25, r19
    1102:	fc 01       	movw	r30, r24
    1104:	e0 5a       	subi	r30, 0xA0	; 160
    1106:	ff 4f       	sbci	r31, 0xFF	; 255
    1108:	80 81       	ld	r24, Z
    110a:	88 30       	cpi	r24, 0x08	; 8
    110c:	80 f1       	brcs	.+96     	; 0x116e <DIO_toggle+0xe2>
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	c9 01       	movw	r24, r18
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	82 0f       	add	r24, r18
    111c:	93 1f       	adc	r25, r19
    111e:	fc 01       	movw	r30, r24
    1120:	e0 5a       	subi	r30, 0xA0	; 160
    1122:	ff 4f       	sbci	r31, 0xFF	; 255
    1124:	80 81       	ld	r24, Z
    1126:	80 31       	cpi	r24, 0x10	; 16
    1128:	10 f5       	brcc	.+68     	; 0x116e <DIO_toggle+0xe2>
	{
		TOGGLE_BIT(PORTB_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 8));
    112a:	a8 e3       	ldi	r26, 0x38	; 56
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e8 e3       	ldi	r30, 0x38	; 56
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	48 2f       	mov	r20, r24
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	28 2f       	mov	r18, r24
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	c9 01       	movw	r24, r18
    113e:	88 0f       	add	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	82 0f       	add	r24, r18
    1144:	93 1f       	adc	r25, r19
    1146:	fc 01       	movw	r30, r24
    1148:	e0 5a       	subi	r30, 0xA0	; 160
    114a:	ff 4f       	sbci	r31, 0xFF	; 255
    114c:	80 81       	ld	r24, Z
    114e:	88 2f       	mov	r24, r24
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	9c 01       	movw	r18, r24
    1154:	28 50       	subi	r18, 0x08	; 8
    1156:	30 40       	sbci	r19, 0x00	; 0
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	02 2e       	mov	r0, r18
    115e:	02 c0       	rjmp	.+4      	; 0x1164 <DIO_toggle+0xd8>
    1160:	88 0f       	add	r24, r24
    1162:	99 1f       	adc	r25, r25
    1164:	0a 94       	dec	r0
    1166:	e2 f7       	brpl	.-8      	; 0x1160 <DIO_toggle+0xd4>
    1168:	84 27       	eor	r24, r20
    116a:	8c 93       	st	X, r24
    116c:	7b c0       	rjmp	.+246    	; 0x1264 <DIO_toggle+0x1d8>
	}//end else if
	else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 16) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 24))	//if portc
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	c9 01       	movw	r24, r18
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	82 0f       	add	r24, r18
    117c:	93 1f       	adc	r25, r19
    117e:	fc 01       	movw	r30, r24
    1180:	e0 5a       	subi	r30, 0xA0	; 160
    1182:	ff 4f       	sbci	r31, 0xFF	; 255
    1184:	80 81       	ld	r24, Z
    1186:	80 31       	cpi	r24, 0x10	; 16
    1188:	80 f1       	brcs	.+96     	; 0x11ea <DIO_toggle+0x15e>
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	c9 01       	movw	r24, r18
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	82 0f       	add	r24, r18
    1198:	93 1f       	adc	r25, r19
    119a:	fc 01       	movw	r30, r24
    119c:	e0 5a       	subi	r30, 0xA0	; 160
    119e:	ff 4f       	sbci	r31, 0xFF	; 255
    11a0:	80 81       	ld	r24, Z
    11a2:	88 31       	cpi	r24, 0x18	; 24
    11a4:	10 f5       	brcc	.+68     	; 0x11ea <DIO_toggle+0x15e>
	{
		TOGGLE_BIT(PORTC_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 16));
    11a6:	a5 e3       	ldi	r26, 0x35	; 53
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	e5 e3       	ldi	r30, 0x35	; 53
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	48 2f       	mov	r20, r24
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	c9 01       	movw	r24, r18
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	82 0f       	add	r24, r18
    11c0:	93 1f       	adc	r25, r19
    11c2:	fc 01       	movw	r30, r24
    11c4:	e0 5a       	subi	r30, 0xA0	; 160
    11c6:	ff 4f       	sbci	r31, 0xFF	; 255
    11c8:	80 81       	ld	r24, Z
    11ca:	88 2f       	mov	r24, r24
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	9c 01       	movw	r18, r24
    11d0:	20 51       	subi	r18, 0x10	; 16
    11d2:	30 40       	sbci	r19, 0x00	; 0
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	02 2e       	mov	r0, r18
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <DIO_toggle+0x154>
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	0a 94       	dec	r0
    11e2:	e2 f7       	brpl	.-8      	; 0x11dc <DIO_toggle+0x150>
    11e4:	84 27       	eor	r24, r20
    11e6:	8c 93       	st	X, r24
    11e8:	3d c0       	rjmp	.+122    	; 0x1264 <DIO_toggle+0x1d8>
	}//end else if
	else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 24) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 32))	//if portd
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
    11ec:	28 2f       	mov	r18, r24
    11ee:	30 e0       	ldi	r19, 0x00	; 0
    11f0:	c9 01       	movw	r24, r18
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	82 0f       	add	r24, r18
    11f8:	93 1f       	adc	r25, r19
    11fa:	fc 01       	movw	r30, r24
    11fc:	e0 5a       	subi	r30, 0xA0	; 160
    11fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1200:	80 81       	ld	r24, Z
    1202:	88 31       	cpi	r24, 0x18	; 24
    1204:	78 f1       	brcs	.+94     	; 0x1264 <DIO_toggle+0x1d8>
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	28 2f       	mov	r18, r24
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	c9 01       	movw	r24, r18
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	82 0f       	add	r24, r18
    1214:	93 1f       	adc	r25, r19
    1216:	fc 01       	movw	r30, r24
    1218:	e0 5a       	subi	r30, 0xA0	; 160
    121a:	ff 4f       	sbci	r31, 0xFF	; 255
    121c:	80 81       	ld	r24, Z
    121e:	80 32       	cpi	r24, 0x20	; 32
    1220:	08 f5       	brcc	.+66     	; 0x1264 <DIO_toggle+0x1d8>
	{
		TOGGLE_BIT(PORTD_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 24));
    1222:	a2 e3       	ldi	r26, 0x32	; 50
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e2 e3       	ldi	r30, 0x32	; 50
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	89 81       	ldd	r24, Y+1	; 0x01
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	c9 01       	movw	r24, r18
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	82 0f       	add	r24, r18
    123c:	93 1f       	adc	r25, r19
    123e:	fc 01       	movw	r30, r24
    1240:	e0 5a       	subi	r30, 0xA0	; 160
    1242:	ff 4f       	sbci	r31, 0xFF	; 255
    1244:	80 81       	ld	r24, Z
    1246:	88 2f       	mov	r24, r24
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	9c 01       	movw	r18, r24
    124c:	28 51       	subi	r18, 0x18	; 24
    124e:	30 40       	sbci	r19, 0x00	; 0
    1250:	81 e0       	ldi	r24, 0x01	; 1
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	02 2e       	mov	r0, r18
    1256:	02 c0       	rjmp	.+4      	; 0x125c <DIO_toggle+0x1d0>
    1258:	88 0f       	add	r24, r24
    125a:	99 1f       	adc	r25, r25
    125c:	0a 94       	dec	r0
    125e:	e2 f7       	brpl	.-8      	; 0x1258 <DIO_toggle+0x1cc>
    1260:	84 27       	eor	r24, r20
    1262:	8c 93       	st	X, r24
	}//end else if

	return E_OK;
    1264:	81 e0       	ldi	r24, 0x01	; 1
}//end DIO_toggle
    1266:	0f 90       	pop	r0
    1268:	cf 91       	pop	r28
    126a:	df 91       	pop	r29
    126c:	08 95       	ret

0000126e <main>:
#include "../MCAL/I2C/I2C.h"


/*- MAIN FUNCTION---------------------------------------------*/
int main(void)
{
    126e:	df 93       	push	r29
    1270:	cf 93       	push	r28
    1272:	00 d0       	rcall	.+0      	; 0x1274 <main+0x6>
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8Add=0;
    1278:	19 82       	std	Y+1, r1	; 0x01
	uint8_t u8Data=0;
    127a:	1a 82       	std	Y+2, r1	; 0x02

	DIO_Init();
    127c:	0e 94 4d 01 	call	0x29a	; 0x29a <DIO_Init>

//	PORTB_R = u8Data;
	TWI_initSlave();
    1280:	0e 94 5b 00 	call	0xb6	; 0xb6 <TWI_initSlave>

	TWI_readDataWithACK(&u8Add);
    1284:	ce 01       	movw	r24, r28
    1286:	01 96       	adiw	r24, 0x01	; 1
    1288:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <TWI_readDataWithACK>
	TWI_readDataWithACK(&u8Data);
    128c:	ce 01       	movw	r24, r28
    128e:	02 96       	adiw	r24, 0x02	; 2
    1290:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <TWI_readDataWithACK>
	/*
	TWI_readDataWithACK(&u8Add);
	TWI_readDataWithACK(&u8Data);
	TWI_readDataWithACK(&u8Data);
	*/
	PORTB_R = u8Data;
    1294:	e8 e3       	ldi	r30, 0x38	; 56
    1296:	f0 e0       	ldi	r31, 0x00	; 0
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	80 83       	st	Z, r24
    129c:	ff cf       	rjmp	.-2      	; 0x129c <main+0x2e>

0000129e <_exit>:
    129e:	f8 94       	cli

000012a0 <__stop_program>:
    12a0:	ff cf       	rjmp	.-2      	; 0x12a0 <__stop_program>
