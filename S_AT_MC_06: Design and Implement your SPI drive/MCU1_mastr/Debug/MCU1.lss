
MCU1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001226  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00001226  0000129a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000108c  00000000  00000000  000012b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b71  00000000  00000000  0000233c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e2       	ldi	r30, 0x26	; 38
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 05 09 	call	0x120a	; 0x120a <main>
      7a:	0c 94 11 09 	jmp	0x1222	; 0x1222 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <SPI_initMaster>:
* Parameters (in) : None
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to initialize the MCU as a master SPT
************************************************************************************************/
static void SPI_initMaster(void){
      82:	df 93       	push	r29
      84:	cf 93       	push	r28
      86:	cd b7       	in	r28, 0x3d	; 61
      88:	de b7       	in	r29, 0x3e	; 62
	 * **************************************************************************/

//	DDRB_R |= (1<<PB4) | (1<<PB5) | (1<<PB7);
//	DDRB_R &= ~(1<<PB6);

	DIO_Init();
      8a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_Init>
	 * MSTR = 1 Enable Mater Mode
	 * CPOL = 0 The Leading Edge of SCK is the Rising Edge, SCK is LOW when idle
	 * CPHA = 0 Sample Data at the Rising Edge of SCK
	 * SPR1 = 0, SPR0 = 0 To Choose Clock = Fosc/4
	 ***********************************************************************/
	SPCR_R = (1<<SPE_B) | (1<<MSTR_B);
      8e:	ed e2       	ldi	r30, 0x2D	; 45
      90:	f0 e0       	ldi	r31, 0x00	; 0
      92:	80 e5       	ldi	r24, 0x50	; 80
      94:	80 83       	st	Z, r24
}
      96:	cf 91       	pop	r28
      98:	df 91       	pop	r29
      9a:	08 95       	ret

0000009c <SPI_initSlave>:
* Parameters (in) : None
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to initialize the MCU as a slave SPT
************************************************************************************************/
static void SPI_initSlave(void){
      9c:	df 93       	push	r29
      9e:	cf 93       	push	r28
      a0:	cd b7       	in	r28, 0x3d	; 61
      a2:	de b7       	in	r29, 0x3e	; 62
	 * MISO(PB6) = output
	 * SCK(PB7) = input
	 * **************************************************************************/
//	DDRB_R &= (~(1<<PB4)) & (~(1<<PB5)) & (~(1<<PB7));
//	DDRB_R |= (1<<PB6);
	DIO_Init();
      a4:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_Init>

	/************************** SPCR Description **************************
	 * SPE = 1 ENABLE SPI
	 * SPR1 = 0, SPR0 = 0 To Choose Clock = Fosc/4
	 ***********************************************************************/
	SPCR_R = (1<<SPE_B);
      a8:	ed e2       	ldi	r30, 0x2D	; 45
      aa:	f0 e0       	ldi	r31, 0x00	; 0
      ac:	80 e4       	ldi	r24, 0x40	; 64
      ae:	80 83       	st	Z, r24
}
      b0:	cf 91       	pop	r28
      b2:	df 91       	pop	r29
      b4:	08 95       	ret

000000b6 <SPI_init>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to initialize SPT
************************************************************************************************/
void SPI_init(void)
{
      b6:	df 93       	push	r29
      b8:	cf 93       	push	r28
      ba:	cd b7       	in	r28, 0x3d	; 61
      bc:	de b7       	in	r29, 0x3e	; 62
#if(SPI_CFG == MASTER)
	SPI_initMaster();
      be:	0e 94 41 00 	call	0x82	; 0x82 <SPI_initMaster>
#elif (SPI_CFG == SLAVE)
	SPI_initSlave();
#endif
}
      c2:	cf 91       	pop	r28
      c4:	df 91       	pop	r29
      c6:	08 95       	ret

000000c8 <SPI_sendData>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to send Byte via SPI
************************************************************************************************/
void SPI_sendData(const uint8_t u8Data)
{
      c8:	df 93       	push	r29
      ca:	cf 93       	push	r28
      cc:	0f 92       	push	r0
      ce:	cd b7       	in	r28, 0x3d	; 61
      d0:	de b7       	in	r29, 0x3e	; 62
      d2:	89 83       	std	Y+1, r24	; 0x01

	SPDR_R = u8Data;	/*send data*/
      d4:	ef e2       	ldi	r30, 0x2F	; 47
      d6:	f0 e0       	ldi	r31, 0x00	; 0
      d8:	89 81       	ldd	r24, Y+1	; 0x01
      da:	80 83       	st	Z, r24
	while(!GET_BIT(SPSR_R, SPIF_B));	/*wait until transfer is complete (SPIF=1)*/
      dc:	ee e2       	ldi	r30, 0x2E	; 46
      de:	f0 e0       	ldi	r31, 0x00	; 0
      e0:	80 81       	ld	r24, Z
      e2:	88 23       	and	r24, r24
      e4:	dc f7       	brge	.-10     	; 0xdc <SPI_sendData+0x14>
}
      e6:	0f 90       	pop	r0
      e8:	cf 91       	pop	r28
      ea:	df 91       	pop	r29
      ec:	08 95       	ret

000000ee <SPI_receiveData>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to receive Byte via SPI
************************************************************************************************/
void SPI_receiveData(uint8_t* pu8Data)
{
      ee:	df 93       	push	r29
      f0:	cf 93       	push	r28
      f2:	00 d0       	rcall	.+0      	; 0xf4 <SPI_receiveData+0x6>
      f4:	cd b7       	in	r28, 0x3d	; 61
      f6:	de b7       	in	r29, 0x3e	; 62
      f8:	9a 83       	std	Y+2, r25	; 0x02
      fa:	89 83       	std	Y+1, r24	; 0x01

	while(!GET_BIT(SPSR_R,SPIF_B));	/*wait until receive is complete (SPIF=1)*/
      fc:	ee e2       	ldi	r30, 0x2E	; 46
      fe:	f0 e0       	ldi	r31, 0x00	; 0
     100:	80 81       	ld	r24, Z
     102:	88 23       	and	r24, r24
     104:	dc f7       	brge	.-10     	; 0xfc <SPI_receiveData+0xe>
	*pu8Data = SPDR_R;	/*return the received data*/
     106:	ef e2       	ldi	r30, 0x2F	; 47
     108:	f0 e0       	ldi	r31, 0x00	; 0
     10a:	80 81       	ld	r24, Z
     10c:	e9 81       	ldd	r30, Y+1	; 0x01
     10e:	fa 81       	ldd	r31, Y+2	; 0x02
     110:	80 83       	st	Z, r24
}
     112:	0f 90       	pop	r0
     114:	0f 90       	pop	r0
     116:	cf 91       	pop	r28
     118:	df 91       	pop	r29
     11a:	08 95       	ret

0000011c <SPI_sendString>:
* Parameters (in) : u8Data
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to send String via SPI
************************************************************************************************/
void SPI_sendString(const uint8_t *Str){
     11c:	df 93       	push	r29
     11e:	cf 93       	push	r28
     120:	00 d0       	rcall	.+0      	; 0x122 <SPI_sendString+0x6>
     122:	0f 92       	push	r0
     124:	cd b7       	in	r28, 0x3d	; 61
     126:	de b7       	in	r29, 0x3e	; 62
     128:	9b 83       	std	Y+3, r25	; 0x03
     12a:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
     12c:	19 82       	std	Y+1, r1	; 0x01
     12e:	0e c0       	rjmp	.+28     	; 0x14c <SPI_sendString+0x30>
	while(Str[i] != '\0')
	{
		SPI_sendData(Str[i]);
     130:	89 81       	ldd	r24, Y+1	; 0x01
     132:	28 2f       	mov	r18, r24
     134:	30 e0       	ldi	r19, 0x00	; 0
     136:	8a 81       	ldd	r24, Y+2	; 0x02
     138:	9b 81       	ldd	r25, Y+3	; 0x03
     13a:	fc 01       	movw	r30, r24
     13c:	e2 0f       	add	r30, r18
     13e:	f3 1f       	adc	r31, r19
     140:	80 81       	ld	r24, Z
     142:	0e 94 64 00 	call	0xc8	; 0xc8 <SPI_sendData>
		i++;
     146:	89 81       	ldd	r24, Y+1	; 0x01
     148:	8f 5f       	subi	r24, 0xFF	; 255
     14a:	89 83       	std	Y+1, r24	; 0x01
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to send String via SPI
************************************************************************************************/
void SPI_sendString(const uint8_t *Str){
	uint8_t i = 0;
	while(Str[i] != '\0')
     14c:	89 81       	ldd	r24, Y+1	; 0x01
     14e:	28 2f       	mov	r18, r24
     150:	30 e0       	ldi	r19, 0x00	; 0
     152:	8a 81       	ldd	r24, Y+2	; 0x02
     154:	9b 81       	ldd	r25, Y+3	; 0x03
     156:	fc 01       	movw	r30, r24
     158:	e2 0f       	add	r30, r18
     15a:	f3 1f       	adc	r31, r19
     15c:	80 81       	ld	r24, Z
     15e:	88 23       	and	r24, r24
     160:	39 f7       	brne	.-50     	; 0x130 <SPI_sendString+0x14>
	{
		SPI_sendData(Str[i]);
		i++;
	}
}
     162:	0f 90       	pop	r0
     164:	0f 90       	pop	r0
     166:	0f 90       	pop	r0
     168:	cf 91       	pop	r28
     16a:	df 91       	pop	r29
     16c:	08 95       	ret

0000016e <SPI_receiveString>:
* Parameters (in) : u8Data
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to receive String via SPI
************************************************************************************************/
void SPI_receiveString(uint8_t *Str){
     16e:	df 93       	push	r29
     170:	cf 93       	push	r28
     172:	00 d0       	rcall	.+0      	; 0x174 <SPI_receiveString+0x6>
     174:	0f 92       	push	r0
     176:	cd b7       	in	r28, 0x3d	; 61
     178:	de b7       	in	r29, 0x3e	; 62
     17a:	9b 83       	std	Y+3, r25	; 0x03
     17c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
     17e:	19 82       	std	Y+1, r1	; 0x01
	do{
		i++;
     180:	89 81       	ldd	r24, Y+1	; 0x01
     182:	8f 5f       	subi	r24, 0xFF	; 255
     184:	89 83       	std	Y+1, r24	; 0x01
//		Str[i] = SPI_receiveData();
		SPI_receiveData(&Str[i]);
     186:	89 81       	ldd	r24, Y+1	; 0x01
     188:	28 2f       	mov	r18, r24
     18a:	30 e0       	ldi	r19, 0x00	; 0
     18c:	8a 81       	ldd	r24, Y+2	; 0x02
     18e:	9b 81       	ldd	r25, Y+3	; 0x03
     190:	82 0f       	add	r24, r18
     192:	93 1f       	adc	r25, r19
     194:	0e 94 77 00 	call	0xee	; 0xee <SPI_receiveData>
	}while(Str[i] != '#');
     198:	89 81       	ldd	r24, Y+1	; 0x01
     19a:	28 2f       	mov	r18, r24
     19c:	30 e0       	ldi	r19, 0x00	; 0
     19e:	8a 81       	ldd	r24, Y+2	; 0x02
     1a0:	9b 81       	ldd	r25, Y+3	; 0x03
     1a2:	fc 01       	movw	r30, r24
     1a4:	e2 0f       	add	r30, r18
     1a6:	f3 1f       	adc	r31, r19
     1a8:	80 81       	ld	r24, Z
     1aa:	83 32       	cpi	r24, 0x23	; 35
     1ac:	49 f7       	brne	.-46     	; 0x180 <SPI_receiveString+0x12>
	Str[i] = '\0';
     1ae:	89 81       	ldd	r24, Y+1	; 0x01
     1b0:	28 2f       	mov	r18, r24
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	8a 81       	ldd	r24, Y+2	; 0x02
     1b6:	9b 81       	ldd	r25, Y+3	; 0x03
     1b8:	fc 01       	movw	r30, r24
     1ba:	e2 0f       	add	r30, r18
     1bc:	f3 1f       	adc	r31, r19
     1be:	10 82       	st	Z, r1
}
     1c0:	0f 90       	pop	r0
     1c2:	0f 90       	pop	r0
     1c4:	0f 90       	pop	r0
     1c6:	cf 91       	pop	r28
     1c8:	df 91       	pop	r29
     1ca:	08 95       	ret

000001cc <DIO_Init>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to initialize all the DIO groups according to the configuration
*************************************************************************************************/
enuErrorStatus_t DIO_Init(void)
{
     1cc:	df 93       	push	r29
     1ce:	cf 93       	push	r28
     1d0:	0f 92       	push	r0
     1d2:	cd b7       	in	r28, 0x3d	; 61
     1d4:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_i;

	for(u8_i=0; u8_i<DIO_GROUPS_NO; u8_i++)
     1d6:	19 82       	std	Y+1, r1	; 0x01
     1d8:	02 c4       	rjmp	.+2052   	; 0x9de <__stack+0x17f>
	{
		//set the pin direction (input, output)
		if(astrDIOConfigParameters[u8_i].enuPinDir == INPUT)
     1da:	89 81       	ldd	r24, Y+1	; 0x01
     1dc:	28 2f       	mov	r18, r24
     1de:	30 e0       	ldi	r19, 0x00	; 0
     1e0:	c9 01       	movw	r24, r18
     1e2:	88 0f       	add	r24, r24
     1e4:	99 1f       	adc	r25, r25
     1e6:	82 0f       	add	r24, r18
     1e8:	93 1f       	adc	r25, r19
     1ea:	fc 01       	movw	r30, r24
     1ec:	ef 59       	subi	r30, 0x9F	; 159
     1ee:	ff 4f       	sbci	r31, 0xFF	; 255
     1f0:	80 81       	ld	r24, Z
     1f2:	88 23       	and	r24, r24
     1f4:	09 f0       	breq	.+2      	; 0x1f8 <DIO_Init+0x2c>
     1f6:	ed c0       	rjmp	.+474    	; 0x3d2 <DIO_Init+0x206>
		{
			//if PORTA
			if((astrDIOConfigParameters[u8_i].enuPinNo >= 0) && (astrDIOConfigParameters[u8_i].enuPinNo < 8))
     1f8:	89 81       	ldd	r24, Y+1	; 0x01
     1fa:	28 2f       	mov	r18, r24
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	c9 01       	movw	r24, r18
     200:	88 0f       	add	r24, r24
     202:	99 1f       	adc	r25, r25
     204:	82 0f       	add	r24, r18
     206:	93 1f       	adc	r25, r19
     208:	fc 01       	movw	r30, r24
     20a:	e0 5a       	subi	r30, 0xA0	; 160
     20c:	ff 4f       	sbci	r31, 0xFF	; 255
     20e:	80 81       	ld	r24, Z
     210:	88 30       	cpi	r24, 0x08	; 8
     212:	00 f5       	brcc	.+64     	; 0x254 <DIO_Init+0x88>
			{
				CLR_BIT(DDRA_R, astrDIOConfigParameters[u8_i].enuPinNo);
     214:	aa e3       	ldi	r26, 0x3A	; 58
     216:	b0 e0       	ldi	r27, 0x00	; 0
     218:	ea e3       	ldi	r30, 0x3A	; 58
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	80 81       	ld	r24, Z
     21e:	48 2f       	mov	r20, r24
     220:	89 81       	ldd	r24, Y+1	; 0x01
     222:	28 2f       	mov	r18, r24
     224:	30 e0       	ldi	r19, 0x00	; 0
     226:	c9 01       	movw	r24, r18
     228:	88 0f       	add	r24, r24
     22a:	99 1f       	adc	r25, r25
     22c:	82 0f       	add	r24, r18
     22e:	93 1f       	adc	r25, r19
     230:	fc 01       	movw	r30, r24
     232:	e0 5a       	subi	r30, 0xA0	; 160
     234:	ff 4f       	sbci	r31, 0xFF	; 255
     236:	80 81       	ld	r24, Z
     238:	28 2f       	mov	r18, r24
     23a:	30 e0       	ldi	r19, 0x00	; 0
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	02 2e       	mov	r0, r18
     242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_Init+0x7c>
     244:	88 0f       	add	r24, r24
     246:	99 1f       	adc	r25, r25
     248:	0a 94       	dec	r0
     24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_Init+0x78>
     24c:	80 95       	com	r24
     24e:	84 23       	and	r24, r20
     250:	8c 93       	st	X, r24
     252:	b3 c1       	rjmp	.+870    	; 0x5ba <DIO_Init+0x3ee>
			}//end if

			//if PORTB
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 8) && (astrDIOConfigParameters[u8_i].enuPinNo < 16))
     254:	89 81       	ldd	r24, Y+1	; 0x01
     256:	28 2f       	mov	r18, r24
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	c9 01       	movw	r24, r18
     25c:	88 0f       	add	r24, r24
     25e:	99 1f       	adc	r25, r25
     260:	82 0f       	add	r24, r18
     262:	93 1f       	adc	r25, r19
     264:	fc 01       	movw	r30, r24
     266:	e0 5a       	subi	r30, 0xA0	; 160
     268:	ff 4f       	sbci	r31, 0xFF	; 255
     26a:	80 81       	ld	r24, Z
     26c:	88 30       	cpi	r24, 0x08	; 8
     26e:	88 f1       	brcs	.+98     	; 0x2d2 <DIO_Init+0x106>
     270:	89 81       	ldd	r24, Y+1	; 0x01
     272:	28 2f       	mov	r18, r24
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	c9 01       	movw	r24, r18
     278:	88 0f       	add	r24, r24
     27a:	99 1f       	adc	r25, r25
     27c:	82 0f       	add	r24, r18
     27e:	93 1f       	adc	r25, r19
     280:	fc 01       	movw	r30, r24
     282:	e0 5a       	subi	r30, 0xA0	; 160
     284:	ff 4f       	sbci	r31, 0xFF	; 255
     286:	80 81       	ld	r24, Z
     288:	80 31       	cpi	r24, 0x10	; 16
     28a:	18 f5       	brcc	.+70     	; 0x2d2 <DIO_Init+0x106>
			{
				CLR_BIT(DDRB_R,(astrDIOConfigParameters[u8_i].enuPinNo - 8));
     28c:	a7 e3       	ldi	r26, 0x37	; 55
     28e:	b0 e0       	ldi	r27, 0x00	; 0
     290:	e7 e3       	ldi	r30, 0x37	; 55
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	80 81       	ld	r24, Z
     296:	48 2f       	mov	r20, r24
     298:	89 81       	ldd	r24, Y+1	; 0x01
     29a:	28 2f       	mov	r18, r24
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	c9 01       	movw	r24, r18
     2a0:	88 0f       	add	r24, r24
     2a2:	99 1f       	adc	r25, r25
     2a4:	82 0f       	add	r24, r18
     2a6:	93 1f       	adc	r25, r19
     2a8:	fc 01       	movw	r30, r24
     2aa:	e0 5a       	subi	r30, 0xA0	; 160
     2ac:	ff 4f       	sbci	r31, 0xFF	; 255
     2ae:	80 81       	ld	r24, Z
     2b0:	88 2f       	mov	r24, r24
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	9c 01       	movw	r18, r24
     2b6:	28 50       	subi	r18, 0x08	; 8
     2b8:	30 40       	sbci	r19, 0x00	; 0
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	02 2e       	mov	r0, r18
     2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <DIO_Init+0xfa>
     2c2:	88 0f       	add	r24, r24
     2c4:	99 1f       	adc	r25, r25
     2c6:	0a 94       	dec	r0
     2c8:	e2 f7       	brpl	.-8      	; 0x2c2 <DIO_Init+0xf6>
     2ca:	80 95       	com	r24
     2cc:	84 23       	and	r24, r20
     2ce:	8c 93       	st	X, r24
     2d0:	74 c1       	rjmp	.+744    	; 0x5ba <DIO_Init+0x3ee>
			}//end else if

			//if PORTC
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 16) && (astrDIOConfigParameters[u8_i].enuPinNo < 24))
     2d2:	89 81       	ldd	r24, Y+1	; 0x01
     2d4:	28 2f       	mov	r18, r24
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	c9 01       	movw	r24, r18
     2da:	88 0f       	add	r24, r24
     2dc:	99 1f       	adc	r25, r25
     2de:	82 0f       	add	r24, r18
     2e0:	93 1f       	adc	r25, r19
     2e2:	fc 01       	movw	r30, r24
     2e4:	e0 5a       	subi	r30, 0xA0	; 160
     2e6:	ff 4f       	sbci	r31, 0xFF	; 255
     2e8:	80 81       	ld	r24, Z
     2ea:	80 31       	cpi	r24, 0x10	; 16
     2ec:	88 f1       	brcs	.+98     	; 0x350 <DIO_Init+0x184>
     2ee:	89 81       	ldd	r24, Y+1	; 0x01
     2f0:	28 2f       	mov	r18, r24
     2f2:	30 e0       	ldi	r19, 0x00	; 0
     2f4:	c9 01       	movw	r24, r18
     2f6:	88 0f       	add	r24, r24
     2f8:	99 1f       	adc	r25, r25
     2fa:	82 0f       	add	r24, r18
     2fc:	93 1f       	adc	r25, r19
     2fe:	fc 01       	movw	r30, r24
     300:	e0 5a       	subi	r30, 0xA0	; 160
     302:	ff 4f       	sbci	r31, 0xFF	; 255
     304:	80 81       	ld	r24, Z
     306:	88 31       	cpi	r24, 0x18	; 24
     308:	18 f5       	brcc	.+70     	; 0x350 <DIO_Init+0x184>
			{
				CLR_BIT(DDRC_R,(astrDIOConfigParameters[u8_i].enuPinNo - 16));
     30a:	a4 e3       	ldi	r26, 0x34	; 52
     30c:	b0 e0       	ldi	r27, 0x00	; 0
     30e:	e4 e3       	ldi	r30, 0x34	; 52
     310:	f0 e0       	ldi	r31, 0x00	; 0
     312:	80 81       	ld	r24, Z
     314:	48 2f       	mov	r20, r24
     316:	89 81       	ldd	r24, Y+1	; 0x01
     318:	28 2f       	mov	r18, r24
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	c9 01       	movw	r24, r18
     31e:	88 0f       	add	r24, r24
     320:	99 1f       	adc	r25, r25
     322:	82 0f       	add	r24, r18
     324:	93 1f       	adc	r25, r19
     326:	fc 01       	movw	r30, r24
     328:	e0 5a       	subi	r30, 0xA0	; 160
     32a:	ff 4f       	sbci	r31, 0xFF	; 255
     32c:	80 81       	ld	r24, Z
     32e:	88 2f       	mov	r24, r24
     330:	90 e0       	ldi	r25, 0x00	; 0
     332:	9c 01       	movw	r18, r24
     334:	20 51       	subi	r18, 0x10	; 16
     336:	30 40       	sbci	r19, 0x00	; 0
     338:	81 e0       	ldi	r24, 0x01	; 1
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	02 2e       	mov	r0, r18
     33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_Init+0x178>
     340:	88 0f       	add	r24, r24
     342:	99 1f       	adc	r25, r25
     344:	0a 94       	dec	r0
     346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_Init+0x174>
     348:	80 95       	com	r24
     34a:	84 23       	and	r24, r20
     34c:	8c 93       	st	X, r24
     34e:	35 c1       	rjmp	.+618    	; 0x5ba <DIO_Init+0x3ee>
			}//end else if

			//if PORTD
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 24) && (astrDIOConfigParameters[u8_i].enuPinNo < 32))
     350:	89 81       	ldd	r24, Y+1	; 0x01
     352:	28 2f       	mov	r18, r24
     354:	30 e0       	ldi	r19, 0x00	; 0
     356:	c9 01       	movw	r24, r18
     358:	88 0f       	add	r24, r24
     35a:	99 1f       	adc	r25, r25
     35c:	82 0f       	add	r24, r18
     35e:	93 1f       	adc	r25, r19
     360:	fc 01       	movw	r30, r24
     362:	e0 5a       	subi	r30, 0xA0	; 160
     364:	ff 4f       	sbci	r31, 0xFF	; 255
     366:	80 81       	ld	r24, Z
     368:	88 31       	cpi	r24, 0x18	; 24
     36a:	08 f4       	brcc	.+2      	; 0x36e <DIO_Init+0x1a2>
     36c:	26 c1       	rjmp	.+588    	; 0x5ba <DIO_Init+0x3ee>
     36e:	89 81       	ldd	r24, Y+1	; 0x01
     370:	28 2f       	mov	r18, r24
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	c9 01       	movw	r24, r18
     376:	88 0f       	add	r24, r24
     378:	99 1f       	adc	r25, r25
     37a:	82 0f       	add	r24, r18
     37c:	93 1f       	adc	r25, r19
     37e:	fc 01       	movw	r30, r24
     380:	e0 5a       	subi	r30, 0xA0	; 160
     382:	ff 4f       	sbci	r31, 0xFF	; 255
     384:	80 81       	ld	r24, Z
     386:	80 32       	cpi	r24, 0x20	; 32
     388:	08 f0       	brcs	.+2      	; 0x38c <DIO_Init+0x1c0>
     38a:	17 c1       	rjmp	.+558    	; 0x5ba <DIO_Init+0x3ee>
			{
				CLR_BIT(DDRD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
     38c:	a1 e3       	ldi	r26, 0x31	; 49
     38e:	b0 e0       	ldi	r27, 0x00	; 0
     390:	e1 e3       	ldi	r30, 0x31	; 49
     392:	f0 e0       	ldi	r31, 0x00	; 0
     394:	80 81       	ld	r24, Z
     396:	48 2f       	mov	r20, r24
     398:	89 81       	ldd	r24, Y+1	; 0x01
     39a:	28 2f       	mov	r18, r24
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	c9 01       	movw	r24, r18
     3a0:	88 0f       	add	r24, r24
     3a2:	99 1f       	adc	r25, r25
     3a4:	82 0f       	add	r24, r18
     3a6:	93 1f       	adc	r25, r19
     3a8:	fc 01       	movw	r30, r24
     3aa:	e0 5a       	subi	r30, 0xA0	; 160
     3ac:	ff 4f       	sbci	r31, 0xFF	; 255
     3ae:	80 81       	ld	r24, Z
     3b0:	88 2f       	mov	r24, r24
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	9c 01       	movw	r18, r24
     3b6:	28 51       	subi	r18, 0x18	; 24
     3b8:	30 40       	sbci	r19, 0x00	; 0
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	02 2e       	mov	r0, r18
     3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <DIO_Init+0x1fa>
     3c2:	88 0f       	add	r24, r24
     3c4:	99 1f       	adc	r25, r25
     3c6:	0a 94       	dec	r0
     3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <DIO_Init+0x1f6>
     3ca:	80 95       	com	r24
     3cc:	84 23       	and	r24, r20
     3ce:	8c 93       	st	X, r24
     3d0:	f4 c0       	rjmp	.+488    	; 0x5ba <DIO_Init+0x3ee>
			}//end else if
		}//end if

		else if(astrDIOConfigParameters[u8_i].enuPinDir == OUTPUT)
     3d2:	89 81       	ldd	r24, Y+1	; 0x01
     3d4:	28 2f       	mov	r18, r24
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	c9 01       	movw	r24, r18
     3da:	88 0f       	add	r24, r24
     3dc:	99 1f       	adc	r25, r25
     3de:	82 0f       	add	r24, r18
     3e0:	93 1f       	adc	r25, r19
     3e2:	fc 01       	movw	r30, r24
     3e4:	ef 59       	subi	r30, 0x9F	; 159
     3e6:	ff 4f       	sbci	r31, 0xFF	; 255
     3e8:	80 81       	ld	r24, Z
     3ea:	81 30       	cpi	r24, 0x01	; 1
     3ec:	09 f0       	breq	.+2      	; 0x3f0 <DIO_Init+0x224>
     3ee:	e5 c0       	rjmp	.+458    	; 0x5ba <DIO_Init+0x3ee>
		{
			if((astrDIOConfigParameters[u8_i].enuPinNo >= 0) && (astrDIOConfigParameters[u8_i].enuPinNo < 8))	//if porta
     3f0:	89 81       	ldd	r24, Y+1	; 0x01
     3f2:	28 2f       	mov	r18, r24
     3f4:	30 e0       	ldi	r19, 0x00	; 0
     3f6:	c9 01       	movw	r24, r18
     3f8:	88 0f       	add	r24, r24
     3fa:	99 1f       	adc	r25, r25
     3fc:	82 0f       	add	r24, r18
     3fe:	93 1f       	adc	r25, r19
     400:	fc 01       	movw	r30, r24
     402:	e0 5a       	subi	r30, 0xA0	; 160
     404:	ff 4f       	sbci	r31, 0xFF	; 255
     406:	80 81       	ld	r24, Z
     408:	88 30       	cpi	r24, 0x08	; 8
     40a:	f8 f4       	brcc	.+62     	; 0x44a <DIO_Init+0x27e>
			{
				SET_BIT(DDRA_R, astrDIOConfigParameters[u8_i].enuPinNo);
     40c:	aa e3       	ldi	r26, 0x3A	; 58
     40e:	b0 e0       	ldi	r27, 0x00	; 0
     410:	ea e3       	ldi	r30, 0x3A	; 58
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	80 81       	ld	r24, Z
     416:	48 2f       	mov	r20, r24
     418:	89 81       	ldd	r24, Y+1	; 0x01
     41a:	28 2f       	mov	r18, r24
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	c9 01       	movw	r24, r18
     420:	88 0f       	add	r24, r24
     422:	99 1f       	adc	r25, r25
     424:	82 0f       	add	r24, r18
     426:	93 1f       	adc	r25, r19
     428:	fc 01       	movw	r30, r24
     42a:	e0 5a       	subi	r30, 0xA0	; 160
     42c:	ff 4f       	sbci	r31, 0xFF	; 255
     42e:	80 81       	ld	r24, Z
     430:	28 2f       	mov	r18, r24
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	02 2e       	mov	r0, r18
     43a:	02 c0       	rjmp	.+4      	; 0x440 <DIO_Init+0x274>
     43c:	88 0f       	add	r24, r24
     43e:	99 1f       	adc	r25, r25
     440:	0a 94       	dec	r0
     442:	e2 f7       	brpl	.-8      	; 0x43c <DIO_Init+0x270>
     444:	84 2b       	or	r24, r20
     446:	8c 93       	st	X, r24
     448:	b8 c0       	rjmp	.+368    	; 0x5ba <DIO_Init+0x3ee>
			}//end if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 8) && (astrDIOConfigParameters[u8_i].enuPinNo < 16))	//if portb
     44a:	89 81       	ldd	r24, Y+1	; 0x01
     44c:	28 2f       	mov	r18, r24
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	c9 01       	movw	r24, r18
     452:	88 0f       	add	r24, r24
     454:	99 1f       	adc	r25, r25
     456:	82 0f       	add	r24, r18
     458:	93 1f       	adc	r25, r19
     45a:	fc 01       	movw	r30, r24
     45c:	e0 5a       	subi	r30, 0xA0	; 160
     45e:	ff 4f       	sbci	r31, 0xFF	; 255
     460:	80 81       	ld	r24, Z
     462:	88 30       	cpi	r24, 0x08	; 8
     464:	80 f1       	brcs	.+96     	; 0x4c6 <DIO_Init+0x2fa>
     466:	89 81       	ldd	r24, Y+1	; 0x01
     468:	28 2f       	mov	r18, r24
     46a:	30 e0       	ldi	r19, 0x00	; 0
     46c:	c9 01       	movw	r24, r18
     46e:	88 0f       	add	r24, r24
     470:	99 1f       	adc	r25, r25
     472:	82 0f       	add	r24, r18
     474:	93 1f       	adc	r25, r19
     476:	fc 01       	movw	r30, r24
     478:	e0 5a       	subi	r30, 0xA0	; 160
     47a:	ff 4f       	sbci	r31, 0xFF	; 255
     47c:	80 81       	ld	r24, Z
     47e:	80 31       	cpi	r24, 0x10	; 16
     480:	10 f5       	brcc	.+68     	; 0x4c6 <DIO_Init+0x2fa>
			{
				SET_BIT(DDRB_R,(astrDIOConfigParameters[u8_i].enuPinNo - 8));
     482:	a7 e3       	ldi	r26, 0x37	; 55
     484:	b0 e0       	ldi	r27, 0x00	; 0
     486:	e7 e3       	ldi	r30, 0x37	; 55
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	80 81       	ld	r24, Z
     48c:	48 2f       	mov	r20, r24
     48e:	89 81       	ldd	r24, Y+1	; 0x01
     490:	28 2f       	mov	r18, r24
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	c9 01       	movw	r24, r18
     496:	88 0f       	add	r24, r24
     498:	99 1f       	adc	r25, r25
     49a:	82 0f       	add	r24, r18
     49c:	93 1f       	adc	r25, r19
     49e:	fc 01       	movw	r30, r24
     4a0:	e0 5a       	subi	r30, 0xA0	; 160
     4a2:	ff 4f       	sbci	r31, 0xFF	; 255
     4a4:	80 81       	ld	r24, Z
     4a6:	88 2f       	mov	r24, r24
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	9c 01       	movw	r18, r24
     4ac:	28 50       	subi	r18, 0x08	; 8
     4ae:	30 40       	sbci	r19, 0x00	; 0
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	02 2e       	mov	r0, r18
     4b6:	02 c0       	rjmp	.+4      	; 0x4bc <DIO_Init+0x2f0>
     4b8:	88 0f       	add	r24, r24
     4ba:	99 1f       	adc	r25, r25
     4bc:	0a 94       	dec	r0
     4be:	e2 f7       	brpl	.-8      	; 0x4b8 <DIO_Init+0x2ec>
     4c0:	84 2b       	or	r24, r20
     4c2:	8c 93       	st	X, r24
     4c4:	7a c0       	rjmp	.+244    	; 0x5ba <DIO_Init+0x3ee>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 16) && (astrDIOConfigParameters[u8_i].enuPinNo < 24))	//if portc
     4c6:	89 81       	ldd	r24, Y+1	; 0x01
     4c8:	28 2f       	mov	r18, r24
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	c9 01       	movw	r24, r18
     4ce:	88 0f       	add	r24, r24
     4d0:	99 1f       	adc	r25, r25
     4d2:	82 0f       	add	r24, r18
     4d4:	93 1f       	adc	r25, r19
     4d6:	fc 01       	movw	r30, r24
     4d8:	e0 5a       	subi	r30, 0xA0	; 160
     4da:	ff 4f       	sbci	r31, 0xFF	; 255
     4dc:	80 81       	ld	r24, Z
     4de:	80 31       	cpi	r24, 0x10	; 16
     4e0:	80 f1       	brcs	.+96     	; 0x542 <DIO_Init+0x376>
     4e2:	89 81       	ldd	r24, Y+1	; 0x01
     4e4:	28 2f       	mov	r18, r24
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	c9 01       	movw	r24, r18
     4ea:	88 0f       	add	r24, r24
     4ec:	99 1f       	adc	r25, r25
     4ee:	82 0f       	add	r24, r18
     4f0:	93 1f       	adc	r25, r19
     4f2:	fc 01       	movw	r30, r24
     4f4:	e0 5a       	subi	r30, 0xA0	; 160
     4f6:	ff 4f       	sbci	r31, 0xFF	; 255
     4f8:	80 81       	ld	r24, Z
     4fa:	88 31       	cpi	r24, 0x18	; 24
     4fc:	10 f5       	brcc	.+68     	; 0x542 <DIO_Init+0x376>
			{
				SET_BIT(DDRC_R,(astrDIOConfigParameters[u8_i].enuPinNo - 16));
     4fe:	a4 e3       	ldi	r26, 0x34	; 52
     500:	b0 e0       	ldi	r27, 0x00	; 0
     502:	e4 e3       	ldi	r30, 0x34	; 52
     504:	f0 e0       	ldi	r31, 0x00	; 0
     506:	80 81       	ld	r24, Z
     508:	48 2f       	mov	r20, r24
     50a:	89 81       	ldd	r24, Y+1	; 0x01
     50c:	28 2f       	mov	r18, r24
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	c9 01       	movw	r24, r18
     512:	88 0f       	add	r24, r24
     514:	99 1f       	adc	r25, r25
     516:	82 0f       	add	r24, r18
     518:	93 1f       	adc	r25, r19
     51a:	fc 01       	movw	r30, r24
     51c:	e0 5a       	subi	r30, 0xA0	; 160
     51e:	ff 4f       	sbci	r31, 0xFF	; 255
     520:	80 81       	ld	r24, Z
     522:	88 2f       	mov	r24, r24
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	9c 01       	movw	r18, r24
     528:	20 51       	subi	r18, 0x10	; 16
     52a:	30 40       	sbci	r19, 0x00	; 0
     52c:	81 e0       	ldi	r24, 0x01	; 1
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	02 2e       	mov	r0, r18
     532:	02 c0       	rjmp	.+4      	; 0x538 <DIO_Init+0x36c>
     534:	88 0f       	add	r24, r24
     536:	99 1f       	adc	r25, r25
     538:	0a 94       	dec	r0
     53a:	e2 f7       	brpl	.-8      	; 0x534 <DIO_Init+0x368>
     53c:	84 2b       	or	r24, r20
     53e:	8c 93       	st	X, r24
     540:	3c c0       	rjmp	.+120    	; 0x5ba <DIO_Init+0x3ee>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 24) && (astrDIOConfigParameters[u8_i].enuPinNo < 32))	//if portd
     542:	89 81       	ldd	r24, Y+1	; 0x01
     544:	28 2f       	mov	r18, r24
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	c9 01       	movw	r24, r18
     54a:	88 0f       	add	r24, r24
     54c:	99 1f       	adc	r25, r25
     54e:	82 0f       	add	r24, r18
     550:	93 1f       	adc	r25, r19
     552:	fc 01       	movw	r30, r24
     554:	e0 5a       	subi	r30, 0xA0	; 160
     556:	ff 4f       	sbci	r31, 0xFF	; 255
     558:	80 81       	ld	r24, Z
     55a:	88 31       	cpi	r24, 0x18	; 24
     55c:	70 f1       	brcs	.+92     	; 0x5ba <DIO_Init+0x3ee>
     55e:	89 81       	ldd	r24, Y+1	; 0x01
     560:	28 2f       	mov	r18, r24
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	c9 01       	movw	r24, r18
     566:	88 0f       	add	r24, r24
     568:	99 1f       	adc	r25, r25
     56a:	82 0f       	add	r24, r18
     56c:	93 1f       	adc	r25, r19
     56e:	fc 01       	movw	r30, r24
     570:	e0 5a       	subi	r30, 0xA0	; 160
     572:	ff 4f       	sbci	r31, 0xFF	; 255
     574:	80 81       	ld	r24, Z
     576:	80 32       	cpi	r24, 0x20	; 32
     578:	00 f5       	brcc	.+64     	; 0x5ba <DIO_Init+0x3ee>
			{
				SET_BIT(DDRD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
     57a:	a1 e3       	ldi	r26, 0x31	; 49
     57c:	b0 e0       	ldi	r27, 0x00	; 0
     57e:	e1 e3       	ldi	r30, 0x31	; 49
     580:	f0 e0       	ldi	r31, 0x00	; 0
     582:	80 81       	ld	r24, Z
     584:	48 2f       	mov	r20, r24
     586:	89 81       	ldd	r24, Y+1	; 0x01
     588:	28 2f       	mov	r18, r24
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	c9 01       	movw	r24, r18
     58e:	88 0f       	add	r24, r24
     590:	99 1f       	adc	r25, r25
     592:	82 0f       	add	r24, r18
     594:	93 1f       	adc	r25, r19
     596:	fc 01       	movw	r30, r24
     598:	e0 5a       	subi	r30, 0xA0	; 160
     59a:	ff 4f       	sbci	r31, 0xFF	; 255
     59c:	80 81       	ld	r24, Z
     59e:	88 2f       	mov	r24, r24
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	9c 01       	movw	r18, r24
     5a4:	28 51       	subi	r18, 0x18	; 24
     5a6:	30 40       	sbci	r19, 0x00	; 0
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	02 c0       	rjmp	.+4      	; 0x5b2 <DIO_Init+0x3e6>
     5ae:	88 0f       	add	r24, r24
     5b0:	99 1f       	adc	r25, r25
     5b2:	2a 95       	dec	r18
     5b4:	e2 f7       	brpl	.-8      	; 0x5ae <DIO_Init+0x3e2>
     5b6:	84 2b       	or	r24, r20
     5b8:	8c 93       	st	X, r24
			}//end else if
		}//end else if

		//enable or disable pull-up resistor
		if(astrDIOConfigParameters[u8_i].enuPinDir == INPUT &&
     5ba:	89 81       	ldd	r24, Y+1	; 0x01
     5bc:	28 2f       	mov	r18, r24
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	c9 01       	movw	r24, r18
     5c2:	88 0f       	add	r24, r24
     5c4:	99 1f       	adc	r25, r25
     5c6:	82 0f       	add	r24, r18
     5c8:	93 1f       	adc	r25, r19
     5ca:	fc 01       	movw	r30, r24
     5cc:	ef 59       	subi	r30, 0x9F	; 159
     5ce:	ff 4f       	sbci	r31, 0xFF	; 255
     5d0:	80 81       	ld	r24, Z
     5d2:	88 23       	and	r24, r24
     5d4:	09 f0       	breq	.+2      	; 0x5d8 <DIO_Init+0x40c>
     5d6:	fc c0       	rjmp	.+504    	; 0x7d0 <DIO_Init+0x604>
     5d8:	89 81       	ldd	r24, Y+1	; 0x01
     5da:	28 2f       	mov	r18, r24
     5dc:	30 e0       	ldi	r19, 0x00	; 0
     5de:	c9 01       	movw	r24, r18
     5e0:	88 0f       	add	r24, r24
     5e2:	99 1f       	adc	r25, r25
     5e4:	82 0f       	add	r24, r18
     5e6:	93 1f       	adc	r25, r19
     5e8:	fc 01       	movw	r30, r24
     5ea:	ee 59       	subi	r30, 0x9E	; 158
     5ec:	ff 4f       	sbci	r31, 0xFF	; 255
     5ee:	80 81       	ld	r24, Z
     5f0:	88 23       	and	r24, r24
     5f2:	09 f0       	breq	.+2      	; 0x5f6 <DIO_Init+0x42a>
     5f4:	ed c0       	rjmp	.+474    	; 0x7d0 <DIO_Init+0x604>
		   astrDIOConfigParameters[u8_i].enuPullupResEn == NO_CONNECTION)
		{
			if((astrDIOConfigParameters[u8_i].enuPinNo >= 0) && (astrDIOConfigParameters[u8_i].enuPinNo < 8))	//if porta
     5f6:	89 81       	ldd	r24, Y+1	; 0x01
     5f8:	28 2f       	mov	r18, r24
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	c9 01       	movw	r24, r18
     5fe:	88 0f       	add	r24, r24
     600:	99 1f       	adc	r25, r25
     602:	82 0f       	add	r24, r18
     604:	93 1f       	adc	r25, r19
     606:	fc 01       	movw	r30, r24
     608:	e0 5a       	subi	r30, 0xA0	; 160
     60a:	ff 4f       	sbci	r31, 0xFF	; 255
     60c:	80 81       	ld	r24, Z
     60e:	88 30       	cpi	r24, 0x08	; 8
     610:	00 f5       	brcc	.+64     	; 0x652 <DIO_Init+0x486>
			{
				CLR_BIT(PORTA_R, astrDIOConfigParameters[u8_i].enuPinNo);
     612:	ab e3       	ldi	r26, 0x3B	; 59
     614:	b0 e0       	ldi	r27, 0x00	; 0
     616:	eb e3       	ldi	r30, 0x3B	; 59
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	80 81       	ld	r24, Z
     61c:	48 2f       	mov	r20, r24
     61e:	89 81       	ldd	r24, Y+1	; 0x01
     620:	28 2f       	mov	r18, r24
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	c9 01       	movw	r24, r18
     626:	88 0f       	add	r24, r24
     628:	99 1f       	adc	r25, r25
     62a:	82 0f       	add	r24, r18
     62c:	93 1f       	adc	r25, r19
     62e:	fc 01       	movw	r30, r24
     630:	e0 5a       	subi	r30, 0xA0	; 160
     632:	ff 4f       	sbci	r31, 0xFF	; 255
     634:	80 81       	ld	r24, Z
     636:	28 2f       	mov	r18, r24
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	02 2e       	mov	r0, r18
     640:	02 c0       	rjmp	.+4      	; 0x646 <DIO_Init+0x47a>
     642:	88 0f       	add	r24, r24
     644:	99 1f       	adc	r25, r25
     646:	0a 94       	dec	r0
     648:	e2 f7       	brpl	.-8      	; 0x642 <DIO_Init+0x476>
     64a:	80 95       	com	r24
     64c:	84 23       	and	r24, r20
     64e:	8c 93       	st	X, r24
     650:	c3 c1       	rjmp	.+902    	; 0x9d8 <__stack+0x179>
			}//end if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 8) && (astrDIOConfigParameters[u8_i].enuPinNo < 16))	//if portb
     652:	89 81       	ldd	r24, Y+1	; 0x01
     654:	28 2f       	mov	r18, r24
     656:	30 e0       	ldi	r19, 0x00	; 0
     658:	c9 01       	movw	r24, r18
     65a:	88 0f       	add	r24, r24
     65c:	99 1f       	adc	r25, r25
     65e:	82 0f       	add	r24, r18
     660:	93 1f       	adc	r25, r19
     662:	fc 01       	movw	r30, r24
     664:	e0 5a       	subi	r30, 0xA0	; 160
     666:	ff 4f       	sbci	r31, 0xFF	; 255
     668:	80 81       	ld	r24, Z
     66a:	88 30       	cpi	r24, 0x08	; 8
     66c:	88 f1       	brcs	.+98     	; 0x6d0 <DIO_Init+0x504>
     66e:	89 81       	ldd	r24, Y+1	; 0x01
     670:	28 2f       	mov	r18, r24
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	c9 01       	movw	r24, r18
     676:	88 0f       	add	r24, r24
     678:	99 1f       	adc	r25, r25
     67a:	82 0f       	add	r24, r18
     67c:	93 1f       	adc	r25, r19
     67e:	fc 01       	movw	r30, r24
     680:	e0 5a       	subi	r30, 0xA0	; 160
     682:	ff 4f       	sbci	r31, 0xFF	; 255
     684:	80 81       	ld	r24, Z
     686:	80 31       	cpi	r24, 0x10	; 16
     688:	18 f5       	brcc	.+70     	; 0x6d0 <DIO_Init+0x504>
			{
				CLR_BIT(PORTB_R,(astrDIOConfigParameters[u8_i].enuPinNo - 8));
     68a:	a8 e3       	ldi	r26, 0x38	; 56
     68c:	b0 e0       	ldi	r27, 0x00	; 0
     68e:	e8 e3       	ldi	r30, 0x38	; 56
     690:	f0 e0       	ldi	r31, 0x00	; 0
     692:	80 81       	ld	r24, Z
     694:	48 2f       	mov	r20, r24
     696:	89 81       	ldd	r24, Y+1	; 0x01
     698:	28 2f       	mov	r18, r24
     69a:	30 e0       	ldi	r19, 0x00	; 0
     69c:	c9 01       	movw	r24, r18
     69e:	88 0f       	add	r24, r24
     6a0:	99 1f       	adc	r25, r25
     6a2:	82 0f       	add	r24, r18
     6a4:	93 1f       	adc	r25, r19
     6a6:	fc 01       	movw	r30, r24
     6a8:	e0 5a       	subi	r30, 0xA0	; 160
     6aa:	ff 4f       	sbci	r31, 0xFF	; 255
     6ac:	80 81       	ld	r24, Z
     6ae:	88 2f       	mov	r24, r24
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	9c 01       	movw	r18, r24
     6b4:	28 50       	subi	r18, 0x08	; 8
     6b6:	30 40       	sbci	r19, 0x00	; 0
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	02 2e       	mov	r0, r18
     6be:	02 c0       	rjmp	.+4      	; 0x6c4 <DIO_Init+0x4f8>
     6c0:	88 0f       	add	r24, r24
     6c2:	99 1f       	adc	r25, r25
     6c4:	0a 94       	dec	r0
     6c6:	e2 f7       	brpl	.-8      	; 0x6c0 <DIO_Init+0x4f4>
     6c8:	80 95       	com	r24
     6ca:	84 23       	and	r24, r20
     6cc:	8c 93       	st	X, r24
     6ce:	84 c1       	rjmp	.+776    	; 0x9d8 <__stack+0x179>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 16) && (astrDIOConfigParameters[u8_i].enuPinNo < 24))	//if portc
     6d0:	89 81       	ldd	r24, Y+1	; 0x01
     6d2:	28 2f       	mov	r18, r24
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	c9 01       	movw	r24, r18
     6d8:	88 0f       	add	r24, r24
     6da:	99 1f       	adc	r25, r25
     6dc:	82 0f       	add	r24, r18
     6de:	93 1f       	adc	r25, r19
     6e0:	fc 01       	movw	r30, r24
     6e2:	e0 5a       	subi	r30, 0xA0	; 160
     6e4:	ff 4f       	sbci	r31, 0xFF	; 255
     6e6:	80 81       	ld	r24, Z
     6e8:	80 31       	cpi	r24, 0x10	; 16
     6ea:	88 f1       	brcs	.+98     	; 0x74e <DIO_Init+0x582>
     6ec:	89 81       	ldd	r24, Y+1	; 0x01
     6ee:	28 2f       	mov	r18, r24
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	c9 01       	movw	r24, r18
     6f4:	88 0f       	add	r24, r24
     6f6:	99 1f       	adc	r25, r25
     6f8:	82 0f       	add	r24, r18
     6fa:	93 1f       	adc	r25, r19
     6fc:	fc 01       	movw	r30, r24
     6fe:	e0 5a       	subi	r30, 0xA0	; 160
     700:	ff 4f       	sbci	r31, 0xFF	; 255
     702:	80 81       	ld	r24, Z
     704:	88 31       	cpi	r24, 0x18	; 24
     706:	18 f5       	brcc	.+70     	; 0x74e <DIO_Init+0x582>
			{
				CLR_BIT(PORTC_R,(astrDIOConfigParameters[u8_i].enuPinNo - 16));
     708:	a5 e3       	ldi	r26, 0x35	; 53
     70a:	b0 e0       	ldi	r27, 0x00	; 0
     70c:	e5 e3       	ldi	r30, 0x35	; 53
     70e:	f0 e0       	ldi	r31, 0x00	; 0
     710:	80 81       	ld	r24, Z
     712:	48 2f       	mov	r20, r24
     714:	89 81       	ldd	r24, Y+1	; 0x01
     716:	28 2f       	mov	r18, r24
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	c9 01       	movw	r24, r18
     71c:	88 0f       	add	r24, r24
     71e:	99 1f       	adc	r25, r25
     720:	82 0f       	add	r24, r18
     722:	93 1f       	adc	r25, r19
     724:	fc 01       	movw	r30, r24
     726:	e0 5a       	subi	r30, 0xA0	; 160
     728:	ff 4f       	sbci	r31, 0xFF	; 255
     72a:	80 81       	ld	r24, Z
     72c:	88 2f       	mov	r24, r24
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	9c 01       	movw	r18, r24
     732:	20 51       	subi	r18, 0x10	; 16
     734:	30 40       	sbci	r19, 0x00	; 0
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	02 2e       	mov	r0, r18
     73c:	02 c0       	rjmp	.+4      	; 0x742 <DIO_Init+0x576>
     73e:	88 0f       	add	r24, r24
     740:	99 1f       	adc	r25, r25
     742:	0a 94       	dec	r0
     744:	e2 f7       	brpl	.-8      	; 0x73e <DIO_Init+0x572>
     746:	80 95       	com	r24
     748:	84 23       	and	r24, r20
     74a:	8c 93       	st	X, r24
     74c:	45 c1       	rjmp	.+650    	; 0x9d8 <__stack+0x179>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 24) && (astrDIOConfigParameters[u8_i].enuPinNo < 32))	//if portd
     74e:	89 81       	ldd	r24, Y+1	; 0x01
     750:	28 2f       	mov	r18, r24
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	c9 01       	movw	r24, r18
     756:	88 0f       	add	r24, r24
     758:	99 1f       	adc	r25, r25
     75a:	82 0f       	add	r24, r18
     75c:	93 1f       	adc	r25, r19
     75e:	fc 01       	movw	r30, r24
     760:	e0 5a       	subi	r30, 0xA0	; 160
     762:	ff 4f       	sbci	r31, 0xFF	; 255
     764:	80 81       	ld	r24, Z
     766:	88 31       	cpi	r24, 0x18	; 24
     768:	08 f4       	brcc	.+2      	; 0x76c <DIO_Init+0x5a0>
     76a:	36 c1       	rjmp	.+620    	; 0x9d8 <__stack+0x179>
     76c:	89 81       	ldd	r24, Y+1	; 0x01
     76e:	28 2f       	mov	r18, r24
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	c9 01       	movw	r24, r18
     774:	88 0f       	add	r24, r24
     776:	99 1f       	adc	r25, r25
     778:	82 0f       	add	r24, r18
     77a:	93 1f       	adc	r25, r19
     77c:	fc 01       	movw	r30, r24
     77e:	e0 5a       	subi	r30, 0xA0	; 160
     780:	ff 4f       	sbci	r31, 0xFF	; 255
     782:	80 81       	ld	r24, Z
     784:	80 32       	cpi	r24, 0x20	; 32
     786:	08 f0       	brcs	.+2      	; 0x78a <DIO_Init+0x5be>
     788:	27 c1       	rjmp	.+590    	; 0x9d8 <__stack+0x179>
			{
				CLR_BIT(PORTD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
     78a:	a2 e3       	ldi	r26, 0x32	; 50
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	e2 e3       	ldi	r30, 0x32	; 50
     790:	f0 e0       	ldi	r31, 0x00	; 0
     792:	80 81       	ld	r24, Z
     794:	48 2f       	mov	r20, r24
     796:	89 81       	ldd	r24, Y+1	; 0x01
     798:	28 2f       	mov	r18, r24
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	c9 01       	movw	r24, r18
     79e:	88 0f       	add	r24, r24
     7a0:	99 1f       	adc	r25, r25
     7a2:	82 0f       	add	r24, r18
     7a4:	93 1f       	adc	r25, r19
     7a6:	fc 01       	movw	r30, r24
     7a8:	e0 5a       	subi	r30, 0xA0	; 160
     7aa:	ff 4f       	sbci	r31, 0xFF	; 255
     7ac:	80 81       	ld	r24, Z
     7ae:	88 2f       	mov	r24, r24
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	9c 01       	movw	r18, r24
     7b4:	28 51       	subi	r18, 0x18	; 24
     7b6:	30 40       	sbci	r19, 0x00	; 0
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	02 2e       	mov	r0, r18
     7be:	02 c0       	rjmp	.+4      	; 0x7c4 <DIO_Init+0x5f8>
     7c0:	88 0f       	add	r24, r24
     7c2:	99 1f       	adc	r25, r25
     7c4:	0a 94       	dec	r0
     7c6:	e2 f7       	brpl	.-8      	; 0x7c0 <DIO_Init+0x5f4>
     7c8:	80 95       	com	r24
     7ca:	84 23       	and	r24, r20
     7cc:	8c 93       	st	X, r24
     7ce:	04 c1       	rjmp	.+520    	; 0x9d8 <__stack+0x179>
			}//end else if
		}//end if

		else if(astrDIOConfigParameters[u8_i].enuPinDir == INPUT &&
     7d0:	89 81       	ldd	r24, Y+1	; 0x01
     7d2:	28 2f       	mov	r18, r24
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	c9 01       	movw	r24, r18
     7d8:	88 0f       	add	r24, r24
     7da:	99 1f       	adc	r25, r25
     7dc:	82 0f       	add	r24, r18
     7de:	93 1f       	adc	r25, r19
     7e0:	fc 01       	movw	r30, r24
     7e2:	ef 59       	subi	r30, 0x9F	; 159
     7e4:	ff 4f       	sbci	r31, 0xFF	; 255
     7e6:	80 81       	ld	r24, Z
     7e8:	88 23       	and	r24, r24
     7ea:	09 f0       	breq	.+2      	; 0x7ee <DIO_Init+0x622>
     7ec:	f5 c0       	rjmp	.+490    	; 0x9d8 <__stack+0x179>
     7ee:	89 81       	ldd	r24, Y+1	; 0x01
     7f0:	28 2f       	mov	r18, r24
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	c9 01       	movw	r24, r18
     7f6:	88 0f       	add	r24, r24
     7f8:	99 1f       	adc	r25, r25
     7fa:	82 0f       	add	r24, r18
     7fc:	93 1f       	adc	r25, r19
     7fe:	fc 01       	movw	r30, r24
     800:	ee 59       	subi	r30, 0x9E	; 158
     802:	ff 4f       	sbci	r31, 0xFF	; 255
     804:	80 81       	ld	r24, Z
     806:	81 30       	cpi	r24, 0x01	; 1
     808:	09 f0       	breq	.+2      	; 0x80c <DIO_Init+0x640>
     80a:	e6 c0       	rjmp	.+460    	; 0x9d8 <__stack+0x179>
				astrDIOConfigParameters[u8_i].enuPullupResEn == PULL_UP_ENABLE)
		{
			if((astrDIOConfigParameters[u8_i].enuPinNo >= 0) && (astrDIOConfigParameters[u8_i].enuPinNo < 8))	//if porta
     80c:	89 81       	ldd	r24, Y+1	; 0x01
     80e:	28 2f       	mov	r18, r24
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	c9 01       	movw	r24, r18
     814:	88 0f       	add	r24, r24
     816:	99 1f       	adc	r25, r25
     818:	82 0f       	add	r24, r18
     81a:	93 1f       	adc	r25, r19
     81c:	fc 01       	movw	r30, r24
     81e:	e0 5a       	subi	r30, 0xA0	; 160
     820:	ff 4f       	sbci	r31, 0xFF	; 255
     822:	80 81       	ld	r24, Z
     824:	88 30       	cpi	r24, 0x08	; 8
     826:	f8 f4       	brcc	.+62     	; 0x866 <__stack+0x7>
			{
				SET_BIT(PORTA_R, astrDIOConfigParameters[u8_i].enuPinNo);
     828:	ab e3       	ldi	r26, 0x3B	; 59
     82a:	b0 e0       	ldi	r27, 0x00	; 0
     82c:	eb e3       	ldi	r30, 0x3B	; 59
     82e:	f0 e0       	ldi	r31, 0x00	; 0
     830:	80 81       	ld	r24, Z
     832:	48 2f       	mov	r20, r24
     834:	89 81       	ldd	r24, Y+1	; 0x01
     836:	28 2f       	mov	r18, r24
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	c9 01       	movw	r24, r18
     83c:	88 0f       	add	r24, r24
     83e:	99 1f       	adc	r25, r25
     840:	82 0f       	add	r24, r18
     842:	93 1f       	adc	r25, r19
     844:	fc 01       	movw	r30, r24
     846:	e0 5a       	subi	r30, 0xA0	; 160
     848:	ff 4f       	sbci	r31, 0xFF	; 255
     84a:	80 81       	ld	r24, Z
     84c:	28 2f       	mov	r18, r24
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	81 e0       	ldi	r24, 0x01	; 1
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	02 2e       	mov	r0, r18
     856:	02 c0       	rjmp	.+4      	; 0x85c <DIO_Init+0x690>
     858:	88 0f       	add	r24, r24
     85a:	99 1f       	adc	r25, r25
     85c:	0a 94       	dec	r0
     85e:	e2 f7       	brpl	.-8      	; 0x858 <DIO_Init+0x68c>
     860:	84 2b       	or	r24, r20
     862:	8c 93       	st	X, r24
     864:	b9 c0       	rjmp	.+370    	; 0x9d8 <__stack+0x179>
			}//end if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 8) && (astrDIOConfigParameters[u8_i].enuPinNo < 16))	//if portb
     866:	89 81       	ldd	r24, Y+1	; 0x01
     868:	28 2f       	mov	r18, r24
     86a:	30 e0       	ldi	r19, 0x00	; 0
     86c:	c9 01       	movw	r24, r18
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	82 0f       	add	r24, r18
     874:	93 1f       	adc	r25, r19
     876:	fc 01       	movw	r30, r24
     878:	e0 5a       	subi	r30, 0xA0	; 160
     87a:	ff 4f       	sbci	r31, 0xFF	; 255
     87c:	80 81       	ld	r24, Z
     87e:	88 30       	cpi	r24, 0x08	; 8
     880:	80 f1       	brcs	.+96     	; 0x8e2 <__stack+0x83>
     882:	89 81       	ldd	r24, Y+1	; 0x01
     884:	28 2f       	mov	r18, r24
     886:	30 e0       	ldi	r19, 0x00	; 0
     888:	c9 01       	movw	r24, r18
     88a:	88 0f       	add	r24, r24
     88c:	99 1f       	adc	r25, r25
     88e:	82 0f       	add	r24, r18
     890:	93 1f       	adc	r25, r19
     892:	fc 01       	movw	r30, r24
     894:	e0 5a       	subi	r30, 0xA0	; 160
     896:	ff 4f       	sbci	r31, 0xFF	; 255
     898:	80 81       	ld	r24, Z
     89a:	80 31       	cpi	r24, 0x10	; 16
     89c:	10 f5       	brcc	.+68     	; 0x8e2 <__stack+0x83>
			{
				SET_BIT(PORTB_R,(astrDIOConfigParameters[u8_i].enuPinNo - 8));
     89e:	a8 e3       	ldi	r26, 0x38	; 56
     8a0:	b0 e0       	ldi	r27, 0x00	; 0
     8a2:	e8 e3       	ldi	r30, 0x38	; 56
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	80 81       	ld	r24, Z
     8a8:	48 2f       	mov	r20, r24
     8aa:	89 81       	ldd	r24, Y+1	; 0x01
     8ac:	28 2f       	mov	r18, r24
     8ae:	30 e0       	ldi	r19, 0x00	; 0
     8b0:	c9 01       	movw	r24, r18
     8b2:	88 0f       	add	r24, r24
     8b4:	99 1f       	adc	r25, r25
     8b6:	82 0f       	add	r24, r18
     8b8:	93 1f       	adc	r25, r19
     8ba:	fc 01       	movw	r30, r24
     8bc:	e0 5a       	subi	r30, 0xA0	; 160
     8be:	ff 4f       	sbci	r31, 0xFF	; 255
     8c0:	80 81       	ld	r24, Z
     8c2:	88 2f       	mov	r24, r24
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	9c 01       	movw	r18, r24
     8c8:	28 50       	subi	r18, 0x08	; 8
     8ca:	30 40       	sbci	r19, 0x00	; 0
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	02 2e       	mov	r0, r18
     8d2:	02 c0       	rjmp	.+4      	; 0x8d8 <__stack+0x79>
     8d4:	88 0f       	add	r24, r24
     8d6:	99 1f       	adc	r25, r25
     8d8:	0a 94       	dec	r0
     8da:	e2 f7       	brpl	.-8      	; 0x8d4 <__stack+0x75>
     8dc:	84 2b       	or	r24, r20
     8de:	8c 93       	st	X, r24
     8e0:	7b c0       	rjmp	.+246    	; 0x9d8 <__stack+0x179>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 16) && (astrDIOConfigParameters[u8_i].enuPinNo < 24))	//if portc
     8e2:	89 81       	ldd	r24, Y+1	; 0x01
     8e4:	28 2f       	mov	r18, r24
     8e6:	30 e0       	ldi	r19, 0x00	; 0
     8e8:	c9 01       	movw	r24, r18
     8ea:	88 0f       	add	r24, r24
     8ec:	99 1f       	adc	r25, r25
     8ee:	82 0f       	add	r24, r18
     8f0:	93 1f       	adc	r25, r19
     8f2:	fc 01       	movw	r30, r24
     8f4:	e0 5a       	subi	r30, 0xA0	; 160
     8f6:	ff 4f       	sbci	r31, 0xFF	; 255
     8f8:	80 81       	ld	r24, Z
     8fa:	80 31       	cpi	r24, 0x10	; 16
     8fc:	80 f1       	brcs	.+96     	; 0x95e <__stack+0xff>
     8fe:	89 81       	ldd	r24, Y+1	; 0x01
     900:	28 2f       	mov	r18, r24
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	c9 01       	movw	r24, r18
     906:	88 0f       	add	r24, r24
     908:	99 1f       	adc	r25, r25
     90a:	82 0f       	add	r24, r18
     90c:	93 1f       	adc	r25, r19
     90e:	fc 01       	movw	r30, r24
     910:	e0 5a       	subi	r30, 0xA0	; 160
     912:	ff 4f       	sbci	r31, 0xFF	; 255
     914:	80 81       	ld	r24, Z
     916:	88 31       	cpi	r24, 0x18	; 24
     918:	10 f5       	brcc	.+68     	; 0x95e <__stack+0xff>
			{
				SET_BIT(PORTC_R,(astrDIOConfigParameters[u8_i].enuPinNo - 16));
     91a:	a5 e3       	ldi	r26, 0x35	; 53
     91c:	b0 e0       	ldi	r27, 0x00	; 0
     91e:	e5 e3       	ldi	r30, 0x35	; 53
     920:	f0 e0       	ldi	r31, 0x00	; 0
     922:	80 81       	ld	r24, Z
     924:	48 2f       	mov	r20, r24
     926:	89 81       	ldd	r24, Y+1	; 0x01
     928:	28 2f       	mov	r18, r24
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	c9 01       	movw	r24, r18
     92e:	88 0f       	add	r24, r24
     930:	99 1f       	adc	r25, r25
     932:	82 0f       	add	r24, r18
     934:	93 1f       	adc	r25, r19
     936:	fc 01       	movw	r30, r24
     938:	e0 5a       	subi	r30, 0xA0	; 160
     93a:	ff 4f       	sbci	r31, 0xFF	; 255
     93c:	80 81       	ld	r24, Z
     93e:	88 2f       	mov	r24, r24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	9c 01       	movw	r18, r24
     944:	20 51       	subi	r18, 0x10	; 16
     946:	30 40       	sbci	r19, 0x00	; 0
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	02 2e       	mov	r0, r18
     94e:	02 c0       	rjmp	.+4      	; 0x954 <__stack+0xf5>
     950:	88 0f       	add	r24, r24
     952:	99 1f       	adc	r25, r25
     954:	0a 94       	dec	r0
     956:	e2 f7       	brpl	.-8      	; 0x950 <__stack+0xf1>
     958:	84 2b       	or	r24, r20
     95a:	8c 93       	st	X, r24
     95c:	3d c0       	rjmp	.+122    	; 0x9d8 <__stack+0x179>
			}//end else if
			else if((astrDIOConfigParameters[u8_i].enuPinNo >= 24) && (astrDIOConfigParameters[u8_i].enuPinNo < 32))	//if portd
     95e:	89 81       	ldd	r24, Y+1	; 0x01
     960:	28 2f       	mov	r18, r24
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	c9 01       	movw	r24, r18
     966:	88 0f       	add	r24, r24
     968:	99 1f       	adc	r25, r25
     96a:	82 0f       	add	r24, r18
     96c:	93 1f       	adc	r25, r19
     96e:	fc 01       	movw	r30, r24
     970:	e0 5a       	subi	r30, 0xA0	; 160
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	88 31       	cpi	r24, 0x18	; 24
     978:	78 f1       	brcs	.+94     	; 0x9d8 <__stack+0x179>
     97a:	89 81       	ldd	r24, Y+1	; 0x01
     97c:	28 2f       	mov	r18, r24
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	c9 01       	movw	r24, r18
     982:	88 0f       	add	r24, r24
     984:	99 1f       	adc	r25, r25
     986:	82 0f       	add	r24, r18
     988:	93 1f       	adc	r25, r19
     98a:	fc 01       	movw	r30, r24
     98c:	e0 5a       	subi	r30, 0xA0	; 160
     98e:	ff 4f       	sbci	r31, 0xFF	; 255
     990:	80 81       	ld	r24, Z
     992:	80 32       	cpi	r24, 0x20	; 32
     994:	08 f5       	brcc	.+66     	; 0x9d8 <__stack+0x179>
			{
				SET_BIT(PORTD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
     996:	a2 e3       	ldi	r26, 0x32	; 50
     998:	b0 e0       	ldi	r27, 0x00	; 0
     99a:	e2 e3       	ldi	r30, 0x32	; 50
     99c:	f0 e0       	ldi	r31, 0x00	; 0
     99e:	80 81       	ld	r24, Z
     9a0:	48 2f       	mov	r20, r24
     9a2:	89 81       	ldd	r24, Y+1	; 0x01
     9a4:	28 2f       	mov	r18, r24
     9a6:	30 e0       	ldi	r19, 0x00	; 0
     9a8:	c9 01       	movw	r24, r18
     9aa:	88 0f       	add	r24, r24
     9ac:	99 1f       	adc	r25, r25
     9ae:	82 0f       	add	r24, r18
     9b0:	93 1f       	adc	r25, r19
     9b2:	fc 01       	movw	r30, r24
     9b4:	e0 5a       	subi	r30, 0xA0	; 160
     9b6:	ff 4f       	sbci	r31, 0xFF	; 255
     9b8:	80 81       	ld	r24, Z
     9ba:	88 2f       	mov	r24, r24
     9bc:	90 e0       	ldi	r25, 0x00	; 0
     9be:	9c 01       	movw	r18, r24
     9c0:	28 51       	subi	r18, 0x18	; 24
     9c2:	30 40       	sbci	r19, 0x00	; 0
     9c4:	81 e0       	ldi	r24, 0x01	; 1
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	02 2e       	mov	r0, r18
     9ca:	02 c0       	rjmp	.+4      	; 0x9d0 <__stack+0x171>
     9cc:	88 0f       	add	r24, r24
     9ce:	99 1f       	adc	r25, r25
     9d0:	0a 94       	dec	r0
     9d2:	e2 f7       	brpl	.-8      	; 0x9cc <__stack+0x16d>
     9d4:	84 2b       	or	r24, r20
     9d6:	8c 93       	st	X, r24
*************************************************************************************************/
enuErrorStatus_t DIO_Init(void)
{
	uint8_t u8_i;

	for(u8_i=0; u8_i<DIO_GROUPS_NO; u8_i++)
     9d8:	89 81       	ldd	r24, Y+1	; 0x01
     9da:	8f 5f       	subi	r24, 0xFF	; 255
     9dc:	89 83       	std	Y+1, r24	; 0x01
     9de:	89 81       	ldd	r24, Y+1	; 0x01
     9e0:	87 30       	cpi	r24, 0x07	; 7
     9e2:	08 f4       	brcc	.+2      	; 0x9e6 <__stack+0x187>
     9e4:	fa cb       	rjmp	.-2060   	; 0x1da <DIO_Init+0xe>
				SET_BIT(PORTD_R,(astrDIOConfigParameters[u8_i].enuPinNo - 24));
			}//end else if
		}//end else if

	}//end for
    return E_OK;
     9e6:	81 e0       	ldi	r24, 0x01	; 1
}//end DIO_Init
     9e8:	0f 90       	pop	r0
     9ea:	cf 91       	pop	r28
     9ec:	df 91       	pop	r29
     9ee:	08 95       	ret

000009f0 <DIO_Write>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to write a digital value into the selected DIO pin
*************************************************************************************************/
enuErrorStatus_t DIO_Write(uint8_t u8_GroupId, uint8_t u8_Data)
{
     9f0:	df 93       	push	r29
     9f2:	cf 93       	push	r28
     9f4:	00 d0       	rcall	.+0      	; 0x9f6 <DIO_Write+0x6>
     9f6:	cd b7       	in	r28, 0x3d	; 61
     9f8:	de b7       	in	r29, 0x3e	; 62
     9fa:	89 83       	std	Y+1, r24	; 0x01
     9fc:	6a 83       	std	Y+2, r22	; 0x02
//	if(DIO_Init() == E_ERROR)	return E_ERROR;
//	else{

		if (u8_Data == LOW)
     9fe:	8a 81       	ldd	r24, Y+2	; 0x02
     a00:	88 23       	and	r24, r24
     a02:	09 f0       	breq	.+2      	; 0xa06 <DIO_Write+0x16>
     a04:	ed c0       	rjmp	.+474    	; 0xbe0 <DIO_Write+0x1f0>
	    {
			if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 0) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 8))	//if porta
     a06:	89 81       	ldd	r24, Y+1	; 0x01
     a08:	28 2f       	mov	r18, r24
     a0a:	30 e0       	ldi	r19, 0x00	; 0
     a0c:	c9 01       	movw	r24, r18
     a0e:	88 0f       	add	r24, r24
     a10:	99 1f       	adc	r25, r25
     a12:	82 0f       	add	r24, r18
     a14:	93 1f       	adc	r25, r19
     a16:	fc 01       	movw	r30, r24
     a18:	e0 5a       	subi	r30, 0xA0	; 160
     a1a:	ff 4f       	sbci	r31, 0xFF	; 255
     a1c:	80 81       	ld	r24, Z
     a1e:	88 30       	cpi	r24, 0x08	; 8
     a20:	00 f5       	brcc	.+64     	; 0xa62 <DIO_Write+0x72>
			{
				CLR_BIT(PORTA_R, astrDIOConfigParameters[u8_GroupId].enuPinNo);
     a22:	ab e3       	ldi	r26, 0x3B	; 59
     a24:	b0 e0       	ldi	r27, 0x00	; 0
     a26:	eb e3       	ldi	r30, 0x3B	; 59
     a28:	f0 e0       	ldi	r31, 0x00	; 0
     a2a:	80 81       	ld	r24, Z
     a2c:	48 2f       	mov	r20, r24
     a2e:	89 81       	ldd	r24, Y+1	; 0x01
     a30:	28 2f       	mov	r18, r24
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	c9 01       	movw	r24, r18
     a36:	88 0f       	add	r24, r24
     a38:	99 1f       	adc	r25, r25
     a3a:	82 0f       	add	r24, r18
     a3c:	93 1f       	adc	r25, r19
     a3e:	fc 01       	movw	r30, r24
     a40:	e0 5a       	subi	r30, 0xA0	; 160
     a42:	ff 4f       	sbci	r31, 0xFF	; 255
     a44:	80 81       	ld	r24, Z
     a46:	28 2f       	mov	r18, r24
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	02 2e       	mov	r0, r18
     a50:	02 c0       	rjmp	.+4      	; 0xa56 <DIO_Write+0x66>
     a52:	88 0f       	add	r24, r24
     a54:	99 1f       	adc	r25, r25
     a56:	0a 94       	dec	r0
     a58:	e2 f7       	brpl	.-8      	; 0xa52 <DIO_Write+0x62>
     a5a:	80 95       	com	r24
     a5c:	84 23       	and	r24, r20
     a5e:	8c 93       	st	X, r24
     a60:	a9 c1       	rjmp	.+850    	; 0xdb4 <DIO_Write+0x3c4>
			}//end if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 8) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 16))	//if portb
     a62:	89 81       	ldd	r24, Y+1	; 0x01
     a64:	28 2f       	mov	r18, r24
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	c9 01       	movw	r24, r18
     a6a:	88 0f       	add	r24, r24
     a6c:	99 1f       	adc	r25, r25
     a6e:	82 0f       	add	r24, r18
     a70:	93 1f       	adc	r25, r19
     a72:	fc 01       	movw	r30, r24
     a74:	e0 5a       	subi	r30, 0xA0	; 160
     a76:	ff 4f       	sbci	r31, 0xFF	; 255
     a78:	80 81       	ld	r24, Z
     a7a:	88 30       	cpi	r24, 0x08	; 8
     a7c:	88 f1       	brcs	.+98     	; 0xae0 <DIO_Write+0xf0>
     a7e:	89 81       	ldd	r24, Y+1	; 0x01
     a80:	28 2f       	mov	r18, r24
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	c9 01       	movw	r24, r18
     a86:	88 0f       	add	r24, r24
     a88:	99 1f       	adc	r25, r25
     a8a:	82 0f       	add	r24, r18
     a8c:	93 1f       	adc	r25, r19
     a8e:	fc 01       	movw	r30, r24
     a90:	e0 5a       	subi	r30, 0xA0	; 160
     a92:	ff 4f       	sbci	r31, 0xFF	; 255
     a94:	80 81       	ld	r24, Z
     a96:	80 31       	cpi	r24, 0x10	; 16
     a98:	18 f5       	brcc	.+70     	; 0xae0 <DIO_Write+0xf0>
			{
				CLR_BIT(PORTB_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 8));
     a9a:	a8 e3       	ldi	r26, 0x38	; 56
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 e3       	ldi	r30, 0x38	; 56
     aa0:	f0 e0       	ldi	r31, 0x00	; 0
     aa2:	80 81       	ld	r24, Z
     aa4:	48 2f       	mov	r20, r24
     aa6:	89 81       	ldd	r24, Y+1	; 0x01
     aa8:	28 2f       	mov	r18, r24
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	c9 01       	movw	r24, r18
     aae:	88 0f       	add	r24, r24
     ab0:	99 1f       	adc	r25, r25
     ab2:	82 0f       	add	r24, r18
     ab4:	93 1f       	adc	r25, r19
     ab6:	fc 01       	movw	r30, r24
     ab8:	e0 5a       	subi	r30, 0xA0	; 160
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	88 2f       	mov	r24, r24
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	9c 01       	movw	r18, r24
     ac4:	28 50       	subi	r18, 0x08	; 8
     ac6:	30 40       	sbci	r19, 0x00	; 0
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	02 2e       	mov	r0, r18
     ace:	02 c0       	rjmp	.+4      	; 0xad4 <DIO_Write+0xe4>
     ad0:	88 0f       	add	r24, r24
     ad2:	99 1f       	adc	r25, r25
     ad4:	0a 94       	dec	r0
     ad6:	e2 f7       	brpl	.-8      	; 0xad0 <DIO_Write+0xe0>
     ad8:	80 95       	com	r24
     ada:	84 23       	and	r24, r20
     adc:	8c 93       	st	X, r24
     ade:	6a c1       	rjmp	.+724    	; 0xdb4 <DIO_Write+0x3c4>
			}//end else if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 16) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 24))	//if portc
     ae0:	89 81       	ldd	r24, Y+1	; 0x01
     ae2:	28 2f       	mov	r18, r24
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	c9 01       	movw	r24, r18
     ae8:	88 0f       	add	r24, r24
     aea:	99 1f       	adc	r25, r25
     aec:	82 0f       	add	r24, r18
     aee:	93 1f       	adc	r25, r19
     af0:	fc 01       	movw	r30, r24
     af2:	e0 5a       	subi	r30, 0xA0	; 160
     af4:	ff 4f       	sbci	r31, 0xFF	; 255
     af6:	80 81       	ld	r24, Z
     af8:	80 31       	cpi	r24, 0x10	; 16
     afa:	88 f1       	brcs	.+98     	; 0xb5e <DIO_Write+0x16e>
     afc:	89 81       	ldd	r24, Y+1	; 0x01
     afe:	28 2f       	mov	r18, r24
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	c9 01       	movw	r24, r18
     b04:	88 0f       	add	r24, r24
     b06:	99 1f       	adc	r25, r25
     b08:	82 0f       	add	r24, r18
     b0a:	93 1f       	adc	r25, r19
     b0c:	fc 01       	movw	r30, r24
     b0e:	e0 5a       	subi	r30, 0xA0	; 160
     b10:	ff 4f       	sbci	r31, 0xFF	; 255
     b12:	80 81       	ld	r24, Z
     b14:	88 31       	cpi	r24, 0x18	; 24
     b16:	18 f5       	brcc	.+70     	; 0xb5e <DIO_Write+0x16e>
			{
				CLR_BIT(PORTC_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 16));
     b18:	a5 e3       	ldi	r26, 0x35	; 53
     b1a:	b0 e0       	ldi	r27, 0x00	; 0
     b1c:	e5 e3       	ldi	r30, 0x35	; 53
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	80 81       	ld	r24, Z
     b22:	48 2f       	mov	r20, r24
     b24:	89 81       	ldd	r24, Y+1	; 0x01
     b26:	28 2f       	mov	r18, r24
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	c9 01       	movw	r24, r18
     b2c:	88 0f       	add	r24, r24
     b2e:	99 1f       	adc	r25, r25
     b30:	82 0f       	add	r24, r18
     b32:	93 1f       	adc	r25, r19
     b34:	fc 01       	movw	r30, r24
     b36:	e0 5a       	subi	r30, 0xA0	; 160
     b38:	ff 4f       	sbci	r31, 0xFF	; 255
     b3a:	80 81       	ld	r24, Z
     b3c:	88 2f       	mov	r24, r24
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	9c 01       	movw	r18, r24
     b42:	20 51       	subi	r18, 0x10	; 16
     b44:	30 40       	sbci	r19, 0x00	; 0
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	90 e0       	ldi	r25, 0x00	; 0
     b4a:	02 2e       	mov	r0, r18
     b4c:	02 c0       	rjmp	.+4      	; 0xb52 <DIO_Write+0x162>
     b4e:	88 0f       	add	r24, r24
     b50:	99 1f       	adc	r25, r25
     b52:	0a 94       	dec	r0
     b54:	e2 f7       	brpl	.-8      	; 0xb4e <DIO_Write+0x15e>
     b56:	80 95       	com	r24
     b58:	84 23       	and	r24, r20
     b5a:	8c 93       	st	X, r24
     b5c:	2b c1       	rjmp	.+598    	; 0xdb4 <DIO_Write+0x3c4>
			}//end else if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 24) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 32))	//if portd
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	28 2f       	mov	r18, r24
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	c9 01       	movw	r24, r18
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	82 0f       	add	r24, r18
     b6c:	93 1f       	adc	r25, r19
     b6e:	fc 01       	movw	r30, r24
     b70:	e0 5a       	subi	r30, 0xA0	; 160
     b72:	ff 4f       	sbci	r31, 0xFF	; 255
     b74:	80 81       	ld	r24, Z
     b76:	88 31       	cpi	r24, 0x18	; 24
     b78:	08 f4       	brcc	.+2      	; 0xb7c <DIO_Write+0x18c>
     b7a:	1c c1       	rjmp	.+568    	; 0xdb4 <DIO_Write+0x3c4>
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
     b7e:	28 2f       	mov	r18, r24
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	c9 01       	movw	r24, r18
     b84:	88 0f       	add	r24, r24
     b86:	99 1f       	adc	r25, r25
     b88:	82 0f       	add	r24, r18
     b8a:	93 1f       	adc	r25, r19
     b8c:	fc 01       	movw	r30, r24
     b8e:	e0 5a       	subi	r30, 0xA0	; 160
     b90:	ff 4f       	sbci	r31, 0xFF	; 255
     b92:	80 81       	ld	r24, Z
     b94:	80 32       	cpi	r24, 0x20	; 32
     b96:	08 f0       	brcs	.+2      	; 0xb9a <DIO_Write+0x1aa>
     b98:	0d c1       	rjmp	.+538    	; 0xdb4 <DIO_Write+0x3c4>
			{
				CLR_BIT(PORTD_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 24));
     b9a:	a2 e3       	ldi	r26, 0x32	; 50
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	e2 e3       	ldi	r30, 0x32	; 50
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	80 81       	ld	r24, Z
     ba4:	48 2f       	mov	r20, r24
     ba6:	89 81       	ldd	r24, Y+1	; 0x01
     ba8:	28 2f       	mov	r18, r24
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	c9 01       	movw	r24, r18
     bae:	88 0f       	add	r24, r24
     bb0:	99 1f       	adc	r25, r25
     bb2:	82 0f       	add	r24, r18
     bb4:	93 1f       	adc	r25, r19
     bb6:	fc 01       	movw	r30, r24
     bb8:	e0 5a       	subi	r30, 0xA0	; 160
     bba:	ff 4f       	sbci	r31, 0xFF	; 255
     bbc:	80 81       	ld	r24, Z
     bbe:	88 2f       	mov	r24, r24
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	9c 01       	movw	r18, r24
     bc4:	28 51       	subi	r18, 0x18	; 24
     bc6:	30 40       	sbci	r19, 0x00	; 0
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	02 2e       	mov	r0, r18
     bce:	02 c0       	rjmp	.+4      	; 0xbd4 <DIO_Write+0x1e4>
     bd0:	88 0f       	add	r24, r24
     bd2:	99 1f       	adc	r25, r25
     bd4:	0a 94       	dec	r0
     bd6:	e2 f7       	brpl	.-8      	; 0xbd0 <DIO_Write+0x1e0>
     bd8:	80 95       	com	r24
     bda:	84 23       	and	r24, r20
     bdc:	8c 93       	st	X, r24
     bde:	ea c0       	rjmp	.+468    	; 0xdb4 <DIO_Write+0x3c4>
			}//end else if
	    }//end if

	    else if(u8_Data == HIGH)
     be0:	8a 81       	ldd	r24, Y+2	; 0x02
     be2:	81 30       	cpi	r24, 0x01	; 1
     be4:	09 f0       	breq	.+2      	; 0xbe8 <DIO_Write+0x1f8>
     be6:	e6 c0       	rjmp	.+460    	; 0xdb4 <DIO_Write+0x3c4>
	    {
			if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 0) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 8))	//if porta
     be8:	89 81       	ldd	r24, Y+1	; 0x01
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	c9 01       	movw	r24, r18
     bf0:	88 0f       	add	r24, r24
     bf2:	99 1f       	adc	r25, r25
     bf4:	82 0f       	add	r24, r18
     bf6:	93 1f       	adc	r25, r19
     bf8:	fc 01       	movw	r30, r24
     bfa:	e0 5a       	subi	r30, 0xA0	; 160
     bfc:	ff 4f       	sbci	r31, 0xFF	; 255
     bfe:	80 81       	ld	r24, Z
     c00:	88 30       	cpi	r24, 0x08	; 8
     c02:	f8 f4       	brcc	.+62     	; 0xc42 <DIO_Write+0x252>
			{
				SET_BIT(PORTA_R, astrDIOConfigParameters[u8_GroupId].enuPinNo);
     c04:	ab e3       	ldi	r26, 0x3B	; 59
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	eb e3       	ldi	r30, 0x3B	; 59
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	48 2f       	mov	r20, r24
     c10:	89 81       	ldd	r24, Y+1	; 0x01
     c12:	28 2f       	mov	r18, r24
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	c9 01       	movw	r24, r18
     c18:	88 0f       	add	r24, r24
     c1a:	99 1f       	adc	r25, r25
     c1c:	82 0f       	add	r24, r18
     c1e:	93 1f       	adc	r25, r19
     c20:	fc 01       	movw	r30, r24
     c22:	e0 5a       	subi	r30, 0xA0	; 160
     c24:	ff 4f       	sbci	r31, 0xFF	; 255
     c26:	80 81       	ld	r24, Z
     c28:	28 2f       	mov	r18, r24
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	02 2e       	mov	r0, r18
     c32:	02 c0       	rjmp	.+4      	; 0xc38 <DIO_Write+0x248>
     c34:	88 0f       	add	r24, r24
     c36:	99 1f       	adc	r25, r25
     c38:	0a 94       	dec	r0
     c3a:	e2 f7       	brpl	.-8      	; 0xc34 <DIO_Write+0x244>
     c3c:	84 2b       	or	r24, r20
     c3e:	8c 93       	st	X, r24
     c40:	b9 c0       	rjmp	.+370    	; 0xdb4 <DIO_Write+0x3c4>
			}//end if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 8) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 16))	//if portb
     c42:	89 81       	ldd	r24, Y+1	; 0x01
     c44:	28 2f       	mov	r18, r24
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	c9 01       	movw	r24, r18
     c4a:	88 0f       	add	r24, r24
     c4c:	99 1f       	adc	r25, r25
     c4e:	82 0f       	add	r24, r18
     c50:	93 1f       	adc	r25, r19
     c52:	fc 01       	movw	r30, r24
     c54:	e0 5a       	subi	r30, 0xA0	; 160
     c56:	ff 4f       	sbci	r31, 0xFF	; 255
     c58:	80 81       	ld	r24, Z
     c5a:	88 30       	cpi	r24, 0x08	; 8
     c5c:	80 f1       	brcs	.+96     	; 0xcbe <DIO_Write+0x2ce>
     c5e:	89 81       	ldd	r24, Y+1	; 0x01
     c60:	28 2f       	mov	r18, r24
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	c9 01       	movw	r24, r18
     c66:	88 0f       	add	r24, r24
     c68:	99 1f       	adc	r25, r25
     c6a:	82 0f       	add	r24, r18
     c6c:	93 1f       	adc	r25, r19
     c6e:	fc 01       	movw	r30, r24
     c70:	e0 5a       	subi	r30, 0xA0	; 160
     c72:	ff 4f       	sbci	r31, 0xFF	; 255
     c74:	80 81       	ld	r24, Z
     c76:	80 31       	cpi	r24, 0x10	; 16
     c78:	10 f5       	brcc	.+68     	; 0xcbe <DIO_Write+0x2ce>
			{
				SET_BIT(PORTB_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 8));
     c7a:	a8 e3       	ldi	r26, 0x38	; 56
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	e8 e3       	ldi	r30, 0x38	; 56
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	48 2f       	mov	r20, r24
     c86:	89 81       	ldd	r24, Y+1	; 0x01
     c88:	28 2f       	mov	r18, r24
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	c9 01       	movw	r24, r18
     c8e:	88 0f       	add	r24, r24
     c90:	99 1f       	adc	r25, r25
     c92:	82 0f       	add	r24, r18
     c94:	93 1f       	adc	r25, r19
     c96:	fc 01       	movw	r30, r24
     c98:	e0 5a       	subi	r30, 0xA0	; 160
     c9a:	ff 4f       	sbci	r31, 0xFF	; 255
     c9c:	80 81       	ld	r24, Z
     c9e:	88 2f       	mov	r24, r24
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	9c 01       	movw	r18, r24
     ca4:	28 50       	subi	r18, 0x08	; 8
     ca6:	30 40       	sbci	r19, 0x00	; 0
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	02 2e       	mov	r0, r18
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <DIO_Write+0x2c4>
     cb0:	88 0f       	add	r24, r24
     cb2:	99 1f       	adc	r25, r25
     cb4:	0a 94       	dec	r0
     cb6:	e2 f7       	brpl	.-8      	; 0xcb0 <DIO_Write+0x2c0>
     cb8:	84 2b       	or	r24, r20
     cba:	8c 93       	st	X, r24
     cbc:	7b c0       	rjmp	.+246    	; 0xdb4 <DIO_Write+0x3c4>
			}//end else if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 16) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 24))	//if portc
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	28 2f       	mov	r18, r24
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	c9 01       	movw	r24, r18
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	82 0f       	add	r24, r18
     ccc:	93 1f       	adc	r25, r19
     cce:	fc 01       	movw	r30, r24
     cd0:	e0 5a       	subi	r30, 0xA0	; 160
     cd2:	ff 4f       	sbci	r31, 0xFF	; 255
     cd4:	80 81       	ld	r24, Z
     cd6:	80 31       	cpi	r24, 0x10	; 16
     cd8:	80 f1       	brcs	.+96     	; 0xd3a <DIO_Write+0x34a>
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	28 2f       	mov	r18, r24
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	c9 01       	movw	r24, r18
     ce2:	88 0f       	add	r24, r24
     ce4:	99 1f       	adc	r25, r25
     ce6:	82 0f       	add	r24, r18
     ce8:	93 1f       	adc	r25, r19
     cea:	fc 01       	movw	r30, r24
     cec:	e0 5a       	subi	r30, 0xA0	; 160
     cee:	ff 4f       	sbci	r31, 0xFF	; 255
     cf0:	80 81       	ld	r24, Z
     cf2:	88 31       	cpi	r24, 0x18	; 24
     cf4:	10 f5       	brcc	.+68     	; 0xd3a <DIO_Write+0x34a>
			{
				SET_BIT(PORTC_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 16));
     cf6:	a5 e3       	ldi	r26, 0x35	; 53
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	e5 e3       	ldi	r30, 0x35	; 53
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	48 2f       	mov	r20, r24
     d02:	89 81       	ldd	r24, Y+1	; 0x01
     d04:	28 2f       	mov	r18, r24
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	c9 01       	movw	r24, r18
     d0a:	88 0f       	add	r24, r24
     d0c:	99 1f       	adc	r25, r25
     d0e:	82 0f       	add	r24, r18
     d10:	93 1f       	adc	r25, r19
     d12:	fc 01       	movw	r30, r24
     d14:	e0 5a       	subi	r30, 0xA0	; 160
     d16:	ff 4f       	sbci	r31, 0xFF	; 255
     d18:	80 81       	ld	r24, Z
     d1a:	88 2f       	mov	r24, r24
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	9c 01       	movw	r18, r24
     d20:	20 51       	subi	r18, 0x10	; 16
     d22:	30 40       	sbci	r19, 0x00	; 0
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	02 2e       	mov	r0, r18
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <DIO_Write+0x340>
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	0a 94       	dec	r0
     d32:	e2 f7       	brpl	.-8      	; 0xd2c <DIO_Write+0x33c>
     d34:	84 2b       	or	r24, r20
     d36:	8c 93       	st	X, r24
     d38:	3d c0       	rjmp	.+122    	; 0xdb4 <DIO_Write+0x3c4>
			}//end else if
			else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 24) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 32))	//if portd
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	28 2f       	mov	r18, r24
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	c9 01       	movw	r24, r18
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	82 0f       	add	r24, r18
     d48:	93 1f       	adc	r25, r19
     d4a:	fc 01       	movw	r30, r24
     d4c:	e0 5a       	subi	r30, 0xA0	; 160
     d4e:	ff 4f       	sbci	r31, 0xFF	; 255
     d50:	80 81       	ld	r24, Z
     d52:	88 31       	cpi	r24, 0x18	; 24
     d54:	78 f1       	brcs	.+94     	; 0xdb4 <DIO_Write+0x3c4>
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	28 2f       	mov	r18, r24
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	c9 01       	movw	r24, r18
     d5e:	88 0f       	add	r24, r24
     d60:	99 1f       	adc	r25, r25
     d62:	82 0f       	add	r24, r18
     d64:	93 1f       	adc	r25, r19
     d66:	fc 01       	movw	r30, r24
     d68:	e0 5a       	subi	r30, 0xA0	; 160
     d6a:	ff 4f       	sbci	r31, 0xFF	; 255
     d6c:	80 81       	ld	r24, Z
     d6e:	80 32       	cpi	r24, 0x20	; 32
     d70:	08 f5       	brcc	.+66     	; 0xdb4 <DIO_Write+0x3c4>
			{
				SET_BIT(PORTD_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 24));
     d72:	a2 e3       	ldi	r26, 0x32	; 50
     d74:	b0 e0       	ldi	r27, 0x00	; 0
     d76:	e2 e3       	ldi	r30, 0x32	; 50
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	80 81       	ld	r24, Z
     d7c:	48 2f       	mov	r20, r24
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	28 2f       	mov	r18, r24
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	c9 01       	movw	r24, r18
     d86:	88 0f       	add	r24, r24
     d88:	99 1f       	adc	r25, r25
     d8a:	82 0f       	add	r24, r18
     d8c:	93 1f       	adc	r25, r19
     d8e:	fc 01       	movw	r30, r24
     d90:	e0 5a       	subi	r30, 0xA0	; 160
     d92:	ff 4f       	sbci	r31, 0xFF	; 255
     d94:	80 81       	ld	r24, Z
     d96:	88 2f       	mov	r24, r24
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	9c 01       	movw	r18, r24
     d9c:	28 51       	subi	r18, 0x18	; 24
     d9e:	30 40       	sbci	r19, 0x00	; 0
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	02 2e       	mov	r0, r18
     da6:	02 c0       	rjmp	.+4      	; 0xdac <DIO_Write+0x3bc>
     da8:	88 0f       	add	r24, r24
     daa:	99 1f       	adc	r25, r25
     dac:	0a 94       	dec	r0
     dae:	e2 f7       	brpl	.-8      	; 0xda8 <DIO_Write+0x3b8>
     db0:	84 2b       	or	r24, r20
     db2:	8c 93       	st	X, r24
			}//end else if
	    }//end else if
		return E_OK;
     db4:	81 e0       	ldi	r24, 0x01	; 1
}//end DIO_write
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	cf 91       	pop	r28
     dbc:	df 91       	pop	r29
     dbe:	08 95       	ret

00000dc0 <DIO_Read>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to read a digital value from the selected DIO pin
*************************************************************************************************/
enuErrorStatus_t DIO_Read(uint8_t u8_GroupId, uint8_t* pu8_Data)
{
     dc0:	df 93       	push	r29
     dc2:	cf 93       	push	r28
     dc4:	00 d0       	rcall	.+0      	; 0xdc6 <DIO_Read+0x6>
     dc6:	00 d0       	rcall	.+0      	; 0xdc8 <DIO_Read+0x8>
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	89 83       	std	Y+1, r24	; 0x01
     dce:	7b 83       	std	Y+3, r23	; 0x03
     dd0:	6a 83       	std	Y+2, r22	; 0x02
	if(pu8_Data == NULL_PTR)		return E_ERROR;
     dd2:	8a 81       	ldd	r24, Y+2	; 0x02
     dd4:	9b 81       	ldd	r25, Y+3	; 0x03
     dd6:	00 97       	sbiw	r24, 0x00	; 0
     dd8:	11 f4       	brne	.+4      	; 0xdde <DIO_Read+0x1e>
     dda:	1c 82       	std	Y+4, r1	; 0x04
     ddc:	e8 c0       	rjmp	.+464    	; 0xfae <DIO_Read+0x1ee>
	else
	{
		if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 0) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 8))	//if porta
     dde:	89 81       	ldd	r24, Y+1	; 0x01
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	c9 01       	movw	r24, r18
     de6:	88 0f       	add	r24, r24
     de8:	99 1f       	adc	r25, r25
     dea:	82 0f       	add	r24, r18
     dec:	93 1f       	adc	r25, r19
     dee:	fc 01       	movw	r30, r24
     df0:	e0 5a       	subi	r30, 0xA0	; 160
     df2:	ff 4f       	sbci	r31, 0xFF	; 255
     df4:	80 81       	ld	r24, Z
     df6:	88 30       	cpi	r24, 0x08	; 8
     df8:	f8 f4       	brcc	.+62     	; 0xe38 <DIO_Read+0x78>
		{
			*pu8_Data = GET_BIT(PINA_R, astrDIOConfigParameters[u8_GroupId].enuPinNo);
     dfa:	e9 e3       	ldi	r30, 0x39	; 57
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	48 2f       	mov	r20, r24
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	28 2f       	mov	r18, r24
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	c9 01       	movw	r24, r18
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	82 0f       	add	r24, r18
     e10:	93 1f       	adc	r25, r19
     e12:	fc 01       	movw	r30, r24
     e14:	e0 5a       	subi	r30, 0xA0	; 160
     e16:	ff 4f       	sbci	r31, 0xFF	; 255
     e18:	80 81       	ld	r24, Z
     e1a:	28 2f       	mov	r18, r24
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	02 2e       	mov	r0, r18
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <DIO_Read+0x6a>
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	0a 94       	dec	r0
     e2c:	e2 f7       	brpl	.-8      	; 0xe26 <DIO_Read+0x66>
     e2e:	84 23       	and	r24, r20
     e30:	ea 81       	ldd	r30, Y+2	; 0x02
     e32:	fb 81       	ldd	r31, Y+3	; 0x03
     e34:	80 83       	st	Z, r24
     e36:	b9 c0       	rjmp	.+370    	; 0xfaa <DIO_Read+0x1ea>
		}//end if
		else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 8) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 16))	//if portb
     e38:	89 81       	ldd	r24, Y+1	; 0x01
     e3a:	28 2f       	mov	r18, r24
     e3c:	30 e0       	ldi	r19, 0x00	; 0
     e3e:	c9 01       	movw	r24, r18
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	82 0f       	add	r24, r18
     e46:	93 1f       	adc	r25, r19
     e48:	fc 01       	movw	r30, r24
     e4a:	e0 5a       	subi	r30, 0xA0	; 160
     e4c:	ff 4f       	sbci	r31, 0xFF	; 255
     e4e:	80 81       	ld	r24, Z
     e50:	88 30       	cpi	r24, 0x08	; 8
     e52:	80 f1       	brcs	.+96     	; 0xeb4 <DIO_Read+0xf4>
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	28 2f       	mov	r18, r24
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	c9 01       	movw	r24, r18
     e5c:	88 0f       	add	r24, r24
     e5e:	99 1f       	adc	r25, r25
     e60:	82 0f       	add	r24, r18
     e62:	93 1f       	adc	r25, r19
     e64:	fc 01       	movw	r30, r24
     e66:	e0 5a       	subi	r30, 0xA0	; 160
     e68:	ff 4f       	sbci	r31, 0xFF	; 255
     e6a:	80 81       	ld	r24, Z
     e6c:	80 31       	cpi	r24, 0x10	; 16
     e6e:	10 f5       	brcc	.+68     	; 0xeb4 <DIO_Read+0xf4>
		{
			*pu8_Data = GET_BIT(PINB_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 8));
     e70:	e6 e3       	ldi	r30, 0x36	; 54
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	48 2f       	mov	r20, r24
     e78:	89 81       	ldd	r24, Y+1	; 0x01
     e7a:	28 2f       	mov	r18, r24
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	c9 01       	movw	r24, r18
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	82 0f       	add	r24, r18
     e86:	93 1f       	adc	r25, r19
     e88:	fc 01       	movw	r30, r24
     e8a:	e0 5a       	subi	r30, 0xA0	; 160
     e8c:	ff 4f       	sbci	r31, 0xFF	; 255
     e8e:	80 81       	ld	r24, Z
     e90:	88 2f       	mov	r24, r24
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	9c 01       	movw	r18, r24
     e96:	28 50       	subi	r18, 0x08	; 8
     e98:	30 40       	sbci	r19, 0x00	; 0
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	02 2e       	mov	r0, r18
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <DIO_Read+0xe6>
     ea2:	88 0f       	add	r24, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	0a 94       	dec	r0
     ea8:	e2 f7       	brpl	.-8      	; 0xea2 <DIO_Read+0xe2>
     eaa:	84 23       	and	r24, r20
     eac:	ea 81       	ldd	r30, Y+2	; 0x02
     eae:	fb 81       	ldd	r31, Y+3	; 0x03
     eb0:	80 83       	st	Z, r24
     eb2:	7b c0       	rjmp	.+246    	; 0xfaa <DIO_Read+0x1ea>
		}//end else if
		else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 16) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 24))	//if portc
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	28 2f       	mov	r18, r24
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	c9 01       	movw	r24, r18
     ebc:	88 0f       	add	r24, r24
     ebe:	99 1f       	adc	r25, r25
     ec0:	82 0f       	add	r24, r18
     ec2:	93 1f       	adc	r25, r19
     ec4:	fc 01       	movw	r30, r24
     ec6:	e0 5a       	subi	r30, 0xA0	; 160
     ec8:	ff 4f       	sbci	r31, 0xFF	; 255
     eca:	80 81       	ld	r24, Z
     ecc:	80 31       	cpi	r24, 0x10	; 16
     ece:	80 f1       	brcs	.+96     	; 0xf30 <DIO_Read+0x170>
     ed0:	89 81       	ldd	r24, Y+1	; 0x01
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	c9 01       	movw	r24, r18
     ed8:	88 0f       	add	r24, r24
     eda:	99 1f       	adc	r25, r25
     edc:	82 0f       	add	r24, r18
     ede:	93 1f       	adc	r25, r19
     ee0:	fc 01       	movw	r30, r24
     ee2:	e0 5a       	subi	r30, 0xA0	; 160
     ee4:	ff 4f       	sbci	r31, 0xFF	; 255
     ee6:	80 81       	ld	r24, Z
     ee8:	88 31       	cpi	r24, 0x18	; 24
     eea:	10 f5       	brcc	.+68     	; 0xf30 <DIO_Read+0x170>
		{
			*pu8_Data = GET_BIT(PINC_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 16));
     eec:	e3 e3       	ldi	r30, 0x33	; 51
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	48 2f       	mov	r20, r24
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	28 2f       	mov	r18, r24
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	c9 01       	movw	r24, r18
     efc:	88 0f       	add	r24, r24
     efe:	99 1f       	adc	r25, r25
     f00:	82 0f       	add	r24, r18
     f02:	93 1f       	adc	r25, r19
     f04:	fc 01       	movw	r30, r24
     f06:	e0 5a       	subi	r30, 0xA0	; 160
     f08:	ff 4f       	sbci	r31, 0xFF	; 255
     f0a:	80 81       	ld	r24, Z
     f0c:	88 2f       	mov	r24, r24
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	9c 01       	movw	r18, r24
     f12:	20 51       	subi	r18, 0x10	; 16
     f14:	30 40       	sbci	r19, 0x00	; 0
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	02 2e       	mov	r0, r18
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <DIO_Read+0x162>
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	0a 94       	dec	r0
     f24:	e2 f7       	brpl	.-8      	; 0xf1e <DIO_Read+0x15e>
     f26:	84 23       	and	r24, r20
     f28:	ea 81       	ldd	r30, Y+2	; 0x02
     f2a:	fb 81       	ldd	r31, Y+3	; 0x03
     f2c:	80 83       	st	Z, r24
     f2e:	3d c0       	rjmp	.+122    	; 0xfaa <DIO_Read+0x1ea>
		}//end else if
		else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 24) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 32))	//if portd
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	28 2f       	mov	r18, r24
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	c9 01       	movw	r24, r18
     f38:	88 0f       	add	r24, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	82 0f       	add	r24, r18
     f3e:	93 1f       	adc	r25, r19
     f40:	fc 01       	movw	r30, r24
     f42:	e0 5a       	subi	r30, 0xA0	; 160
     f44:	ff 4f       	sbci	r31, 0xFF	; 255
     f46:	80 81       	ld	r24, Z
     f48:	88 31       	cpi	r24, 0x18	; 24
     f4a:	78 f1       	brcs	.+94     	; 0xfaa <DIO_Read+0x1ea>
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	c9 01       	movw	r24, r18
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	82 0f       	add	r24, r18
     f5a:	93 1f       	adc	r25, r19
     f5c:	fc 01       	movw	r30, r24
     f5e:	e0 5a       	subi	r30, 0xA0	; 160
     f60:	ff 4f       	sbci	r31, 0xFF	; 255
     f62:	80 81       	ld	r24, Z
     f64:	80 32       	cpi	r24, 0x20	; 32
     f66:	08 f5       	brcc	.+66     	; 0xfaa <DIO_Read+0x1ea>
		{
			*pu8_Data = GET_BIT(PIND_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 24));
     f68:	e0 e3       	ldi	r30, 0x30	; 48
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	48 2f       	mov	r20, r24
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	c9 01       	movw	r24, r18
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	82 0f       	add	r24, r18
     f7e:	93 1f       	adc	r25, r19
     f80:	fc 01       	movw	r30, r24
     f82:	e0 5a       	subi	r30, 0xA0	; 160
     f84:	ff 4f       	sbci	r31, 0xFF	; 255
     f86:	80 81       	ld	r24, Z
     f88:	88 2f       	mov	r24, r24
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	9c 01       	movw	r18, r24
     f8e:	28 51       	subi	r18, 0x18	; 24
     f90:	30 40       	sbci	r19, 0x00	; 0
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	02 2e       	mov	r0, r18
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <DIO_Read+0x1de>
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	0a 94       	dec	r0
     fa0:	e2 f7       	brpl	.-8      	; 0xf9a <DIO_Read+0x1da>
     fa2:	84 23       	and	r24, r20
     fa4:	ea 81       	ldd	r30, Y+2	; 0x02
     fa6:	fb 81       	ldd	r31, Y+3	; 0x03
     fa8:	80 83       	st	Z, r24
		}//end else if

		return E_OK;
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	8c 83       	std	Y+4, r24	; 0x04
     fae:	8c 81       	ldd	r24, Y+4	; 0x04
	}//end else
}//end DIO_Read
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <DIO_toggle>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to toggle the selected DIO pin
*************************************************************************************************/
enuErrorStatus_t DIO_toggle(uint8_t u8_GroupId)
{
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	0f 92       	push	r0
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
     fc8:	89 83       	std	Y+1, r24	; 0x01
	if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 0) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 8))	//if porta
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	c9 01       	movw	r24, r18
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	82 0f       	add	r24, r18
     fd8:	93 1f       	adc	r25, r19
     fda:	fc 01       	movw	r30, r24
     fdc:	e0 5a       	subi	r30, 0xA0	; 160
     fde:	ff 4f       	sbci	r31, 0xFF	; 255
     fe0:	80 81       	ld	r24, Z
     fe2:	88 30       	cpi	r24, 0x08	; 8
     fe4:	f8 f4       	brcc	.+62     	; 0x1024 <DIO_toggle+0x66>
	{
		TOGGLE_BIT(PORTA_R, astrDIOConfigParameters[u8_GroupId].enuPinNo);
     fe6:	ab e3       	ldi	r26, 0x3B	; 59
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	eb e3       	ldi	r30, 0x3B	; 59
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	48 2f       	mov	r20, r24
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	c9 01       	movw	r24, r18
     ffa:	88 0f       	add	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	82 0f       	add	r24, r18
    1000:	93 1f       	adc	r25, r19
    1002:	fc 01       	movw	r30, r24
    1004:	e0 5a       	subi	r30, 0xA0	; 160
    1006:	ff 4f       	sbci	r31, 0xFF	; 255
    1008:	80 81       	ld	r24, Z
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	02 2e       	mov	r0, r18
    1014:	02 c0       	rjmp	.+4      	; 0x101a <DIO_toggle+0x5c>
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	0a 94       	dec	r0
    101c:	e2 f7       	brpl	.-8      	; 0x1016 <DIO_toggle+0x58>
    101e:	84 27       	eor	r24, r20
    1020:	8c 93       	st	X, r24
    1022:	b9 c0       	rjmp	.+370    	; 0x1196 <DIO_toggle+0x1d8>
	}//end if
	else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 8) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 16))	//if portb
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	28 2f       	mov	r18, r24
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	c9 01       	movw	r24, r18
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	82 0f       	add	r24, r18
    1032:	93 1f       	adc	r25, r19
    1034:	fc 01       	movw	r30, r24
    1036:	e0 5a       	subi	r30, 0xA0	; 160
    1038:	ff 4f       	sbci	r31, 0xFF	; 255
    103a:	80 81       	ld	r24, Z
    103c:	88 30       	cpi	r24, 0x08	; 8
    103e:	80 f1       	brcs	.+96     	; 0x10a0 <DIO_toggle+0xe2>
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	c9 01       	movw	r24, r18
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	82 0f       	add	r24, r18
    104e:	93 1f       	adc	r25, r19
    1050:	fc 01       	movw	r30, r24
    1052:	e0 5a       	subi	r30, 0xA0	; 160
    1054:	ff 4f       	sbci	r31, 0xFF	; 255
    1056:	80 81       	ld	r24, Z
    1058:	80 31       	cpi	r24, 0x10	; 16
    105a:	10 f5       	brcc	.+68     	; 0x10a0 <DIO_toggle+0xe2>
	{
		TOGGLE_BIT(PORTB_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 8));
    105c:	a8 e3       	ldi	r26, 0x38	; 56
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e8 e3       	ldi	r30, 0x38	; 56
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	48 2f       	mov	r20, r24
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	c9 01       	movw	r24, r18
    1070:	88 0f       	add	r24, r24
    1072:	99 1f       	adc	r25, r25
    1074:	82 0f       	add	r24, r18
    1076:	93 1f       	adc	r25, r19
    1078:	fc 01       	movw	r30, r24
    107a:	e0 5a       	subi	r30, 0xA0	; 160
    107c:	ff 4f       	sbci	r31, 0xFF	; 255
    107e:	80 81       	ld	r24, Z
    1080:	88 2f       	mov	r24, r24
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	9c 01       	movw	r18, r24
    1086:	28 50       	subi	r18, 0x08	; 8
    1088:	30 40       	sbci	r19, 0x00	; 0
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	02 2e       	mov	r0, r18
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <DIO_toggle+0xd8>
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	0a 94       	dec	r0
    1098:	e2 f7       	brpl	.-8      	; 0x1092 <DIO_toggle+0xd4>
    109a:	84 27       	eor	r24, r20
    109c:	8c 93       	st	X, r24
    109e:	7b c0       	rjmp	.+246    	; 0x1196 <DIO_toggle+0x1d8>
	}//end else if
	else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 16) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 24))	//if portc
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	c9 01       	movw	r24, r18
    10a8:	88 0f       	add	r24, r24
    10aa:	99 1f       	adc	r25, r25
    10ac:	82 0f       	add	r24, r18
    10ae:	93 1f       	adc	r25, r19
    10b0:	fc 01       	movw	r30, r24
    10b2:	e0 5a       	subi	r30, 0xA0	; 160
    10b4:	ff 4f       	sbci	r31, 0xFF	; 255
    10b6:	80 81       	ld	r24, Z
    10b8:	80 31       	cpi	r24, 0x10	; 16
    10ba:	80 f1       	brcs	.+96     	; 0x111c <DIO_toggle+0x15e>
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	c9 01       	movw	r24, r18
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	82 0f       	add	r24, r18
    10ca:	93 1f       	adc	r25, r19
    10cc:	fc 01       	movw	r30, r24
    10ce:	e0 5a       	subi	r30, 0xA0	; 160
    10d0:	ff 4f       	sbci	r31, 0xFF	; 255
    10d2:	80 81       	ld	r24, Z
    10d4:	88 31       	cpi	r24, 0x18	; 24
    10d6:	10 f5       	brcc	.+68     	; 0x111c <DIO_toggle+0x15e>
	{
		TOGGLE_BIT(PORTC_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 16));
    10d8:	a5 e3       	ldi	r26, 0x35	; 53
    10da:	b0 e0       	ldi	r27, 0x00	; 0
    10dc:	e5 e3       	ldi	r30, 0x35	; 53
    10de:	f0 e0       	ldi	r31, 0x00	; 0
    10e0:	80 81       	ld	r24, Z
    10e2:	48 2f       	mov	r20, r24
    10e4:	89 81       	ldd	r24, Y+1	; 0x01
    10e6:	28 2f       	mov	r18, r24
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	c9 01       	movw	r24, r18
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	82 0f       	add	r24, r18
    10f2:	93 1f       	adc	r25, r19
    10f4:	fc 01       	movw	r30, r24
    10f6:	e0 5a       	subi	r30, 0xA0	; 160
    10f8:	ff 4f       	sbci	r31, 0xFF	; 255
    10fa:	80 81       	ld	r24, Z
    10fc:	88 2f       	mov	r24, r24
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	9c 01       	movw	r18, r24
    1102:	20 51       	subi	r18, 0x10	; 16
    1104:	30 40       	sbci	r19, 0x00	; 0
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	02 2e       	mov	r0, r18
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <DIO_toggle+0x154>
    110e:	88 0f       	add	r24, r24
    1110:	99 1f       	adc	r25, r25
    1112:	0a 94       	dec	r0
    1114:	e2 f7       	brpl	.-8      	; 0x110e <DIO_toggle+0x150>
    1116:	84 27       	eor	r24, r20
    1118:	8c 93       	st	X, r24
    111a:	3d c0       	rjmp	.+122    	; 0x1196 <DIO_toggle+0x1d8>
	}//end else if
	else if((astrDIOConfigParameters[u8_GroupId].enuPinNo >= 24) && (astrDIOConfigParameters[u8_GroupId].enuPinNo < 32))	//if portd
    111c:	89 81       	ldd	r24, Y+1	; 0x01
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	c9 01       	movw	r24, r18
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	82 0f       	add	r24, r18
    112a:	93 1f       	adc	r25, r19
    112c:	fc 01       	movw	r30, r24
    112e:	e0 5a       	subi	r30, 0xA0	; 160
    1130:	ff 4f       	sbci	r31, 0xFF	; 255
    1132:	80 81       	ld	r24, Z
    1134:	88 31       	cpi	r24, 0x18	; 24
    1136:	78 f1       	brcs	.+94     	; 0x1196 <DIO_toggle+0x1d8>
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	c9 01       	movw	r24, r18
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	82 0f       	add	r24, r18
    1146:	93 1f       	adc	r25, r19
    1148:	fc 01       	movw	r30, r24
    114a:	e0 5a       	subi	r30, 0xA0	; 160
    114c:	ff 4f       	sbci	r31, 0xFF	; 255
    114e:	80 81       	ld	r24, Z
    1150:	80 32       	cpi	r24, 0x20	; 32
    1152:	08 f5       	brcc	.+66     	; 0x1196 <DIO_toggle+0x1d8>
	{
		TOGGLE_BIT(PORTD_R,(astrDIOConfigParameters[u8_GroupId].enuPinNo - 24));
    1154:	a2 e3       	ldi	r26, 0x32	; 50
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e2 e3       	ldi	r30, 0x32	; 50
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	48 2f       	mov	r20, r24
    1160:	89 81       	ldd	r24, Y+1	; 0x01
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	c9 01       	movw	r24, r18
    1168:	88 0f       	add	r24, r24
    116a:	99 1f       	adc	r25, r25
    116c:	82 0f       	add	r24, r18
    116e:	93 1f       	adc	r25, r19
    1170:	fc 01       	movw	r30, r24
    1172:	e0 5a       	subi	r30, 0xA0	; 160
    1174:	ff 4f       	sbci	r31, 0xFF	; 255
    1176:	80 81       	ld	r24, Z
    1178:	88 2f       	mov	r24, r24
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	9c 01       	movw	r18, r24
    117e:	28 51       	subi	r18, 0x18	; 24
    1180:	30 40       	sbci	r19, 0x00	; 0
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	02 2e       	mov	r0, r18
    1188:	02 c0       	rjmp	.+4      	; 0x118e <DIO_toggle+0x1d0>
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	0a 94       	dec	r0
    1190:	e2 f7       	brpl	.-8      	; 0x118a <DIO_toggle+0x1cc>
    1192:	84 27       	eor	r24, r20
    1194:	8c 93       	st	X, r24
	}//end else if

	return E_OK;
    1196:	81 e0       	ldi	r24, 0x01	; 1
}//end DIO_toggle
    1198:	0f 90       	pop	r0
    119a:	cf 91       	pop	r28
    119c:	df 91       	pop	r29
    119e:	08 95       	ret

000011a0 <LED_Init>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to initialize the led
*************************************************************************************************/
enuErrorStatus_t	LED_Init(void)
{
    11a0:	df 93       	push	r29
    11a2:	cf 93       	push	r28
    11a4:	cd b7       	in	r28, 0x3d	; 61
    11a6:	de b7       	in	r29, 0x3e	; 62
	return DIO_Init();
    11a8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_Init>
}//end LED_Init
    11ac:	cf 91       	pop	r28
    11ae:	df 91       	pop	r29
    11b0:	08 95       	ret

000011b2 <LED_ON>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to turn the led on
*************************************************************************************************/
enuErrorStatus_t	LED_ON(uint8_t u8_LedNum)
{
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	0f 92       	push	r0
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
    11bc:	89 83       	std	Y+1, r24	; 0x01
	DIO_Write(u8_LedNum, HIGH);
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	61 e0       	ldi	r22, 0x01	; 1
    11c2:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <DIO_Write>
	return E_OK;
    11c6:	81 e0       	ldi	r24, 0x01	; 1
}//end LED_ON
    11c8:	0f 90       	pop	r0
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	08 95       	ret

000011d0 <LED_OFF>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to turn the led off
*************************************************************************************************/
enuErrorStatus_t	LED_OFF(uint8_t u8_LedNum)
{
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	0f 92       	push	r0
    11d6:	cd b7       	in	r28, 0x3d	; 61
    11d8:	de b7       	in	r29, 0x3e	; 62
    11da:	89 83       	std	Y+1, r24	; 0x01
	DIO_Write(u8_LedNum, LOW);
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	60 e0       	ldi	r22, 0x00	; 0
    11e0:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <DIO_Write>
	return E_OK;
    11e4:	81 e0       	ldi	r24, 0x01	; 1

}//end LED_OFF
    11e6:	0f 90       	pop	r0
    11e8:	cf 91       	pop	r28
    11ea:	df 91       	pop	r29
    11ec:	08 95       	ret

000011ee <LED_toggle>:
* Parameters (out): None
* Return Value    : enuErrorStatus_t - For error handling if the user input an invalid parameter
* Description     : A function to toggle the led
*************************************************************************************************/
enuErrorStatus_t	LED_toggle(uint8_t u8_LedNum)
{
    11ee:	df 93       	push	r29
    11f0:	cf 93       	push	r28
    11f2:	0f 92       	push	r0
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
    11f8:	89 83       	std	Y+1, r24	; 0x01
	DIO_toggle(u8_LedNum);
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	0e 94 df 07 	call	0xfbe	; 0xfbe <DIO_toggle>
	return E_OK;
    1200:	81 e0       	ldi	r24, 0x01	; 1
}
    1202:	0f 90       	pop	r0
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	08 95       	ret

0000120a <main>:
#include "../MCAL/SPI/SPI_Cfg.h"
#include "../ECUAL/LED/LED.h"

/*- MAIN FUNCTION---------------------------------------------*/
int main(void)
{
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
	DIO_Init();
    1212:	0e 94 e6 00 	call	0x1cc	; 0x1cc <DIO_Init>
	SPI_init();
    1216:	0e 94 5b 00 	call	0xb6	; 0xb6 <SPI_init>

	while(1)
	{
		SPI_sendData(5);
    121a:	85 e0       	ldi	r24, 0x05	; 5
    121c:	0e 94 64 00 	call	0xc8	; 0xc8 <SPI_sendData>
    1220:	fc cf       	rjmp	.-8      	; 0x121a <main+0x10>

00001222 <_exit>:
    1222:	f8 94       	cli

00001224 <__stop_program>:
    1224:	ff cf       	rjmp	.-2      	; 0x1224 <__stop_program>
